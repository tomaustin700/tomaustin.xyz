{"data":{"posts":[{"id":26,"title":"Installing a LEMP stack on Ubuntu Server with Server Blocks","slug":"installing-a-lemp-stack-on-ubuntu-server-with-server-blocks","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<p>This article will cover installing Nginx (with HTTPS), PHP and Mysql on a Ubuntu 17.10 Server. The first step is to install Ubuntu Server, my installation was done on a virtual machine within Hyper-V however the installation should be the same for pretty much every scenario. SSH was installed when prompted during the installation and LEMP wasn&#8217;t (just so it could be covered in more detail here).<\/p>\\n<p>All commands will be performed via SSH however you can just run these directly.<\/p>\\n<p><strong>Install Nginx<\/strong><\/p>\\n<pre>sudo apt-get install nginx\\r\\n<\/pre>\\n<p>As part of installing nginx you should configure the firewall, see <a href=\\\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-install-nginx-on-ubuntu-16-04\\\">this link<\/a> for help with that. From this point onwards we will assume this has been done correctly.<br \/>\\n<strong>Create new Directory for new site<\/strong><\/p>\\n<p>My nginx server will host multiple different sites, because of this we will do things slightly different. We will setup virtual hosts for each site so each site needs a directory.<\/p>\\n<pre>sudo mkdir -p \/var\/www\/example.com\/public_html\\r\\n<\/pre>\\n<p><strong>Set permissions<\/strong><\/p>\\n<pre>sudo chown -R tom:www-data \/var\/www\/example.com\/public_html<\/pre>\\n<pre>sudo chmod 755 \/var\/www\\r\\n<\/pre>\\n<p><strong>Create the Page<\/strong><\/p>\\n<pre>sudo nano \/var\/www\/example.com\/public_html\/index.html<\/pre>\\n<pre>&lt;html&gt;\\r\\n  &lt;head&gt;\\r\\n    &lt;title&gt;www.example.com&lt;\/title&gt;\\r\\n  &lt;\/head&gt;\\r\\n  &lt;body&gt;\\r\\n    &lt;h1&gt;Success: You Have Set Up a Virtual Host&lt;\/h1&gt;\\r\\n  &lt;\/body&gt;\\r\\n&lt;\/html&gt;\\r\\n<\/pre>\\n<p><strong>Create virtual host file<\/strong><\/p>\\n<pre>sudo cp \/etc\/nginx\/sites-available\/default \/etc\/nginx\/sites-available\/example.com\\r\\n<\/pre>\\n<p><strong>Setup virtual host file<\/strong><\/p>\\n<pre>sudo nano \/etc\/nginx\/sites-available\/example.com<\/pre>\\n<pre> server {\\r\\n        listen   80; ## listen for ipv4; this line is default and implied\\r\\n        #listen   [::]:80 default ipv6only=on; ## listen for ipv6\\r\\n\\r\\n        root \/var\/www\/example.com\/public_html;\\r\\n        index index.html index.htm;\\r\\n\\r\\n        # Make site accessible from http:\/\/localhost\/\\r\\n        server_name example.com;\\r\\n}\\r\\n<\/pre>\\n<pre>sudo ln -s \/etc\/nginx\/sites-available\/example.com \/etc\/nginx\/sites-enabled\/example.com<\/pre>\\n<pre>sudo rm \/etc\/nginx\/sites-enabled\/default<\/pre>\\n<pre>sudo service nginx restart<\/pre>\\n<p>&nbsp;<\/p>\\n<p>If all has worked correctly you should be able to navigate to the url specified in your virtual host file and see your page. This is all done over HTTP and ideally we want HTTPS so the next step used LetsEncrypt to setup HTTPS<\/p>\\n<p><strong>Install Certbot<\/strong><\/p>\\n<pre>sudo add-apt-repository ppa:certbot\/certbot<\/pre>\\n<pre>sudo apt-get update<\/pre>\\n<pre>sudo apt-get install python-certbot-nginx<\/pre>\\n<p><strong>Configure Nginx<\/strong><\/p>\\n<pre>sudo nano \/etc\/nginx\/sites-available\/example.com<\/pre>\\n<p>Change to the following (make sure you have an DNS A Record for www. setup)<\/p>\\n<pre># Make site accessible from http:\/\/localhost\/ server_name example.com www.example.com;<\/pre>\\n<pre>sudo nginx -t<\/pre>\\n<pre>sudo systemctl reload nginx<\/pre>\\n<p><strong>Allow HTTPS in<\/strong><\/p>\\n<pre>sudo ufw allow 'Nginx Full'<\/pre>\\n<pre>sudo ufw delete allow 'Nginx HTTP'<\/pre>\\n<p><strong>Obtain an SSH certificate<\/strong><\/p>\\n<pre>sudo certbot --nginx -d example.com -d www.example.com<\/pre>\\n<p>This should also prompt you for various options, simply select what you want and continue. If everything has gone as planned we should now be using HTTPS (open your site in your browser to confirm)<\/p>\\n<p><strong>Install MySQL<\/strong><\/p>\\n<pre>sudo apt-get install mysql-server<\/pre>\\n<p>You will be prompted for a password so choose something strong. Run the following command to secure the installation<\/p>\\n<pre>mysql_secure_installation<\/pre>\\n<p><strong>Install PHP<\/strong><\/p>\\n<pre>sudo apt-get install php-fpm php-mysql<\/pre>\\n<p>Open the following file and modify<\/p>\\n<pre>sudo nano \/etc\/php\/7.1\/fpm\/php.ini<\/pre>\\n<p>Uncomment cgi.fix_pathinfo and set to 0, it should look like this<\/p>\\n<pre>cgi.fix_pathinfo=0<\/pre>\\n<p>Save and exit<\/p>\\n<pre>sudo systemctl restart php7.1-fpm<\/pre>\\n<p><strong>Modify Nginx to use PHP<\/strong><\/p>\\n<pre>sudo nano \/etc\/nginx\/sites-available\/example.com<\/pre>\\n<p>Add index.php before index.html, add the following location blocks<\/p>\\n<pre> location ~ \\\\.php$ {\\r\\n        include snippets\/fastcgi-php.conf;\\r\\n        fastcgi_pass unix:\/run\/php\/php7.1-fpm.sock;\\r\\n    }\\r\\n\\r\\n    location ~ \/\\\\.ht {\\r\\n        deny all;\\r\\n    }\\r\\n<\/pre>\\n<p>Save and exit. Verify everything is working with the following command<\/p>\\n<pre>sudo nginx -t<\/pre>\\n<p>If all is okay then reload nginx<\/p>\\n<pre>sudo systemctl reload nginx<\/pre>\\n<p>You should now have a functioning LAMP box that supports server blocks. <\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<p>This article will cover installing Nginx (with HTTPS), PHP and Mysql on a Ubuntu 17.10 Server. The first step is to install Ubuntu Server, my installation was done on a virtual machine within Hyper-V however the installation should be the same for pretty much every scenario. SSH was installed when prompted during the installation and LEMP wasn&#8217;t (just so it could be covered in more detail here).<\/p>\n<p>All commands will be performed via SSH however you can just run these directly.<\/p>\n<p><strong>Install Nginx<\/strong><\/p>\n<pre>sudo apt-get install nginx\r\n<\/pre>\n<p>As part of installing nginx you should configure the firewall, see <a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-install-nginx-on-ubuntu-16-04\">this link<\/a> for help with that. From this point onwards we will assume this has been done correctly.<br \/>\n<strong>Create new Directory for new site<\/strong><\/p>\n<p>My nginx server will host multiple different sites, because of this we will do things slightly different. We will setup virtual hosts for each site so each site needs a directory.<\/p>\n<pre>sudo mkdir -p \/var\/www\/example.com\/public_html\r\n<\/pre>\n<p><strong>Set permissions<\/strong><\/p>\n<pre>sudo chown -R tom:www-data \/var\/www\/example.com\/public_html<\/pre>\n<pre>sudo chmod 755 \/var\/www\r\n<\/pre>\n<p><strong>Create the Page<\/strong><\/p>\n<pre>sudo nano \/var\/www\/example.com\/public_html\/index.html<\/pre>\n<pre>&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;www.example.com&lt;\/title&gt;\r\n  &lt;\/head&gt;\r\n  &lt;body&gt;\r\n    &lt;h1&gt;Success: You Have Set Up a Virtual Host&lt;\/h1&gt;\r\n  &lt;\/body&gt;\r\n&lt;\/html&gt;\r\n<\/pre>\n<p><strong>Create virtual host file<\/strong><\/p>\n<pre>sudo cp \/etc\/nginx\/sites-available\/default \/etc\/nginx\/sites-available\/example.com\r\n<\/pre>\n<p><strong>Setup virtual host file<\/strong><\/p>\n<pre>sudo nano \/etc\/nginx\/sites-available\/example.com<\/pre>\n<pre> server {\r\n        listen   80; ## listen for ipv4; this line is default and implied\r\n        #listen   [::]:80 default ipv6only=on; ## listen for ipv6\r\n\r\n        root \/var\/www\/example.com\/public_html;\r\n        index index.html index.htm;\r\n\r\n        # Make site accessible from http:\/\/localhost\/\r\n        server_name example.com;\r\n}\r\n<\/pre>\n<pre>sudo ln -s \/etc\/nginx\/sites-available\/example.com \/etc\/nginx\/sites-enabled\/example.com<\/pre>\n<pre>sudo rm \/etc\/nginx\/sites-enabled\/default<\/pre>\n<pre>sudo service nginx restart<\/pre>\n<p>&nbsp;<\/p>\n<p>If all has worked correctly you should be able to navigate to the url specified in your virtual host file and see your page. This is all done over HTTP and ideally we want HTTPS so the next step used LetsEncrypt to setup HTTPS<\/p>\n<p><strong>Install Certbot<\/strong><\/p>\n<pre>sudo add-apt-repository ppa:certbot\/certbot<\/pre>\n<pre>sudo apt-get update<\/pre>\n<pre>sudo apt-get install python-certbot-nginx<\/pre>\n<p><strong>Configure Nginx<\/strong><\/p>\n<pre>sudo nano \/etc\/nginx\/sites-available\/example.com<\/pre>\n<p>Change to the following (make sure you have an DNS A Record for www. setup)<\/p>\n<pre># Make site accessible from http:\/\/localhost\/ server_name example.com www.example.com;<\/pre>\n<pre>sudo nginx -t<\/pre>\n<pre>sudo systemctl reload nginx<\/pre>\n<p><strong>Allow HTTPS in<\/strong><\/p>\n<pre>sudo ufw allow 'Nginx Full'<\/pre>\n<pre>sudo ufw delete allow 'Nginx HTTP'<\/pre>\n<p><strong>Obtain an SSH certificate<\/strong><\/p>\n<pre>sudo certbot --nginx -d example.com -d www.example.com<\/pre>\n<p>This should also prompt you for various options, simply select what you want and continue. If everything has gone as planned we should now be using HTTPS (open your site in your browser to confirm)<\/p>\n<p><strong>Install MySQL<\/strong><\/p>\n<pre>sudo apt-get install mysql-server<\/pre>\n<p>You will be prompted for a password so choose something strong. Run the following command to secure the installation<\/p>\n<pre>mysql_secure_installation<\/pre>\n<p><strong>Install PHP<\/strong><\/p>\n<pre>sudo apt-get install php-fpm php-mysql<\/pre>\n<p>Open the following file and modify<\/p>\n<pre>sudo nano \/etc\/php\/7.1\/fpm\/php.ini<\/pre>\n<p>Uncomment cgi.fix_pathinfo and set to 0, it should look like this<\/p>\n<pre>cgi.fix_pathinfo=0<\/pre>\n<p>Save and exit<\/p>\n<pre>sudo systemctl restart php7.1-fpm<\/pre>\n<p><strong>Modify Nginx to use PHP<\/strong><\/p>\n<pre>sudo nano \/etc\/nginx\/sites-available\/example.com<\/pre>\n<p>Add index.php before index.html, add the following location blocks<\/p>\n<pre> location ~ \\.php$ {\r\n        include snippets\/fastcgi-php.conf;\r\n        fastcgi_pass unix:\/run\/php\/php7.1-fpm.sock;\r\n    }\r\n\r\n    location ~ \/\\.ht {\r\n        deny all;\r\n    }\r\n<\/pre>\n<p>Save and exit. Verify everything is working with the following command<\/p>\n<pre>sudo nginx -t<\/pre>\n<p>If all is okay then reload nginx<\/p>\n<pre>sudo systemctl reload nginx<\/pre>\n<p>You should now have a functioning LAMP box that supports server blocks. <\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 03 Jan 2018 12:26:14 +0000","created_by":1,"updated_at":"Thu, 04 Jan 2018 12:36:08 +0000","updated_by":1,"published_at":"Wed, 03 Jan 2018 12:26:14 +0000","published_by":1},{"id":56,"title":"Updating Ubuntu Server 17.10 to use Static IP","slug":"updating-ubuntu-server-17-10-to-use-static-ip","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<p>A recent problem I came across was setting my Nginx server which is running Ubuntu Server 17.10 to use a static IP address. The normal approach of editing\\u00a0\/etc\/network\/interfaces wasn&#8217;t working so I gave up on it and let DHCP do its thing, this worked fine until my Hyper-V server rebooted and then Nginx got a different address which broke my port forwarding rules and all sites nginx was hosting. After some digging around it turns out things are different in 17.10 and configuring network interfaces is done by editing \\u00a0\/etc\/netplan\/01-netcfg.yaml (a different yaml file exists for each interface you\\u00a0have). Once editing in your favourite editor you can set it to something like the following:<\/p>\\n<pre># This file describes the network interfaces available on your system\\r\\n# For more information, see netplan(5).\\r\\nnetwork:\\r\\n version: 2\\r\\n renderer: networkd\\r\\n ethernets:\\r\\n   ens33:\\r\\n     dhcp4: no\\r\\n     dhcp6: no\\r\\n     addresses: [192.168.1.2\/24]\\r\\n     gateway4: 192.168.1.1\\r\\n     nameservers:\\r\\n       addresses: [8.8.8.8,8.8.4.4]<\/pre>\\n<p>Then save the file and run the following command to apply the changes<\/p>\\n<pre>sudo netplan apply<\/pre>\\n<p>&nbsp;<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<p>A recent problem I came across was setting my Nginx server which is running Ubuntu Server 17.10 to use a static IP address. The normal approach of editing\u00a0\/etc\/network\/interfaces wasn&#8217;t working so I gave up on it and let DHCP do its thing, this worked fine until my Hyper-V server rebooted and then Nginx got a different address which broke my port forwarding rules and all sites nginx was hosting. After some digging around it turns out things are different in 17.10 and configuring network interfaces is done by editing \u00a0\/etc\/netplan\/01-netcfg.yaml (a different yaml file exists for each interface you\u00a0have). Once editing in your favourite editor you can set it to something like the following:<\/p>\n<pre># This file describes the network interfaces available on your system\r\n# For more information, see netplan(5).\r\nnetwork:\r\n version: 2\r\n renderer: networkd\r\n ethernets:\r\n   ens33:\r\n     dhcp4: no\r\n     dhcp6: no\r\n     addresses: [192.168.1.2\/24]\r\n     gateway4: 192.168.1.1\r\n     nameservers:\r\n       addresses: [8.8.8.8,8.8.4.4]<\/pre>\n<p>Then save the file and run the following command to apply the changes<\/p>\n<pre>sudo netplan apply<\/pre>\n<p>&nbsp;<\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 04 Jan 2018 12:24:26 +0000","created_by":1,"updated_at":"Thu, 04 Jan 2018 12:35:29 +0000","updated_by":1,"published_at":"Thu, 04 Jan 2018 12:24:26 +0000","published_by":1},{"id":60,"title":"Configuring WinRM for IIS Deployment","slug":"temp-slug-2","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"","feature_image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 08 Jan 2018 15:51:33 +0000","created_by":1,"updated_at":"Mon, 08 Jan 2018 15:51:33 +0000","updated_by":1,"published_at":"","published_by":1},{"id":66,"title":"Tracking cryptocurrency prices using Binance API","slug":"tracking-cryptocurrency-prices-using-binance-api","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<p>After recently investing in various cryptocurrencies through <a href=\\\"http:\/\/www.binance.com\\\">Binance<\/a> I found that their website didn&#8217;t show enough data regarding total profit\/loss, they did however have an api which could be used to gather that data. The solution was to develop a simple (I am no asp.net developer!) site which would show current portfolio price and total profit\/loss as an amount and as a percentage. You can see which endpoints Binance offer <a href=\\\"https:\/\/www.binance.com\/restapipub.html\\\">here <\/a>. My approach was to find the total investment amount using the depositHistory enpoint, convert that to USD at the time of investment using the <a href=\\\"https:\/\/www.cryptocompare.com\/api\/\\\">cryptocompare api<\/a> (this api can give historical crypto prices so we can determine the cost at time of investment) and then find the price of my current investments by finding their ethereum price and converting that to usd. I am sure there is probably a more elegant way of doing this however I wanted something quick an easy. I called the cryptocompare api myself using HttpClient and passed in the symbol I wanted the price for and the time I wanted it (cryptocompare want the time as a timestamp).<\/p>\\n<pre class=\\\"brush: csharp; title: ; notranslate\\\" title=\\\"\\\">\\r\\nHttpClient client = new HttpClient();\\r\\nCryptoHistory usdPrice = null;\\r\\nHttpResponseMessage usdResponse = await client.GetAsync(&quot;https:\/\/min-api.cryptocompare.com\/data\/pricehistorical?fsym=ETH&amp;tsyms=USD&amp;ts=&quot; +\\r\\n deposit.InsertTime.ToString().Remove(deposit.InsertTime.ToString().Length - 3));\\r\\nif (usdResponse.IsSuccessStatusCode)\\r\\n{\\r\\n...\\r\\n...\\r\\n...\\r\\n}\\r\\n\\r\\n<\/pre>\\n<p>The Binance api was called using <a href=\\\"https:\/\/github.com\/morpheums\/Binance.API.Csharp.Client\\\">this<\/a> C# client made by <a href=\\\"https:\/\/github.com\/morpheums\\\">Jose Mejia<\/a> and works perfectly so there was no point in calling the endpoints myself when someone else had wrapped it up. Anyway you can find the completed wesbite on my github <a href=\\\"https:\/\/github.com\/tomaustin700\/Binance-Crypto-Tracker\\\">here<\/a>, I will warn you that is is very crude and I am no asp.net developer so it could all have probably been done a lot more elegantly using ajax and partialviews. Feel free to send a pull request with improvements. The finished site can be found <a href=\\\"https:\/\/crypto.tomaustin.xyz\/\\\">here<\/a><\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<p>After recently investing in various cryptocurrencies through <a href=\"http:\/\/www.binance.com\">Binance<\/a> I found that their website didn&#8217;t show enough data regarding total profit\/loss, they did however have an api which could be used to gather that data. The solution was to develop a simple (I am no asp.net developer!) site which would show current portfolio price and total profit\/loss as an amount and as a percentage. You can see which endpoints Binance offer <a href=\"https:\/\/www.binance.com\/restapipub.html\">here <\/a>. My approach was to find the total investment amount using the depositHistory enpoint, convert that to USD at the time of investment using the <a href=\"https:\/\/www.cryptocompare.com\/api\/\">cryptocompare api<\/a> (this api can give historical crypto prices so we can determine the cost at time of investment) and then find the price of my current investments by finding their ethereum price and converting that to usd. I am sure there is probably a more elegant way of doing this however I wanted something quick an easy. I called the cryptocompare api myself using HttpClient and passed in the symbol I wanted the price for and the time I wanted it (cryptocompare want the time as a timestamp).<\/p>\n<pre class=\"brush: csharp; title: ; notranslate\" title=\">\r\nHttpClient client = new HttpClient();\r\nCryptoHistory usdPrice = null;\r\nHttpResponseMessage usdResponse = await client.GetAsync(&quot;https:\/\/min-api.cryptocompare.com\/data\/pricehistorical?fsym=ETH&amp;tsyms=USD&amp;ts=&quot; +\r\n deposit.InsertTime.ToString().Remove(deposit.InsertTime.ToString().Length - 3));\r\nif (usdResponse.IsSuccessStatusCode)\r\n{\r\n...\r\n...\r\n...\r\n}\r\n\r\n<\/pre>\n<p>The Binance api was called using <a href=\"https:\/\/github.com\/morpheums\/Binance.API.Csharp.Client\">this<\/a> C# client made by <a href=\"https:\/\/github.com\/morpheums\">Jose Mejia<\/a> and works perfectly so there was no point in calling the endpoints myself when someone else had wrapped it up. Anyway you can find the completed wesbite on my github <a href=\"https:\/\/github.com\/tomaustin700\/Binance-Crypto-Tracker\">here<\/a>, I will warn you that is is very crude and I am no asp.net developer so it could all have probably been done a lot more elegantly using ajax and partialviews. Feel free to send a pull request with improvements. The finished site can be found <a href=\"https:\/\/crypto.tomaustin.xyz\/\">here<\/a><\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 17 Jan 2018 08:26:44 +0000","created_by":1,"updated_at":"Wed, 17 Jan 2018 10:39:18 +0000","updated_by":1,"published_at":"Wed, 17 Jan 2018 08:26:44 +0000","published_by":1},{"id":64,"title":"Using GSuite with a custom domain name","slug":"using-gsuite-custom-domain-name","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<p>I recently bought a domain name and needed email to go with it, after some research I decided to use GSuite as I&#8217;ve used Gmail for years and it has the added benefit of unlimited drive storage. This post should guide you through the steps needed to get GSuite connected to your domain and email up and running.<\/p>\\n<p><strong>1: Buy domain name<\/strong><br \/>\\nI used <a href=\\\"https:\/\/www.1and1.co.uk\/?ar=1\\\">1and1<\/a> to buy my domain as they seemed the cheapest at the time. It shouldn&#8217;t matter where you got the domain from so don&#8217;t worry too much about that.<\/p>\\n<p><strong>2: Setup DNS<\/strong><br \/>\\nMy webserver is hosted at home which means I don&#8217;t have a static IP address, to stop this being a problem I used <a href=\\\"https:\/\/www.dynu.com\\\">Dynu<\/a> for dynamic dns. I have used No-IP for years however they don&#8217;t allow connecting to custom domains for free. To point the domain towards dynu I created an account there and then set the nameserver in the 1&amp;1 control panel.<\/p>\\n<p><img loading=\\\"lazy\\\" class=\\\"alignnone  wp-image-74\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/dns.png?resize=477%2C202\\\" alt=\\\"\\\" width=\\\"477\\\" height=\\\"202\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/dns.png?resize=300%2C127 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/dns.png?resize=768%2C326 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/dns.png?resize=1024%2C434 1024w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/dns.png?resize=720%2C305 720w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/dns.png?w=1118 1118w\\\" sizes=\\\"(max-width: 477px) 100vw, 477px\\\" data-recalc-dims=\\\"1\\\" \/><\/p>\\n<p><strong>3: Setup GSuite<\/strong><\/p>\\n<p>Now dns is working we can connect GSuite to our domain. Start with navigating to the <a href=\\\"https:\/\/gsuite.google.com\/together\/?user-benefits_activeEl=tab-connect\\\">GSuite homepage<\/a> and press the Get Started button in the top right. You should be able to follow the wizard through as it is fairly self explanatory, if you are only going to be using it for yourself you should select &#8216;Just You&#8217; on the about page.<\/p>\\n<p><img loading=\\\"lazy\\\" class=\\\"alignnone size-medium wp-image-75\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/goog.png?resize=254%2C300\\\" alt=\\\"\\\" width=\\\"254\\\" height=\\\"300\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/goog.png?resize=254%2C300 254w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/goog.png?w=507 507w\\\" sizes=\\\"(max-width: 254px) 100vw, 254px\\\" data-recalc-dims=\\\"1\\\" \/><\/p>\\n<p>When you get to this page select &#8216;Yes, I have one I can use&#8217;<\/p>\\n<p><img loading=\\\"lazy\\\" class=\\\"alignnone size-medium wp-image-76\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/customdomain.png?resize=300%2C138\\\" alt=\\\"\\\" width=\\\"300\\\" height=\\\"138\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/customdomain.png?resize=300%2C138 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/customdomain.png?w=533 533w\\\" sizes=\\\"(max-width: 300px) 100vw, 300px\\\" data-recalc-dims=\\\"1\\\" \/><\/p>\\n<p><img loading=\\\"lazy\\\" class=\\\"alignnone size-medium wp-image-77\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/test.png?resize=300%2C198\\\" alt=\\\"\\\" width=\\\"300\\\" height=\\\"198\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/test.png?resize=300%2C198 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/test.png?w=569 569w\\\" sizes=\\\"(max-width: 300px) 100vw, 300px\\\" data-recalc-dims=\\\"1\\\" \/><\/p>\\n<p>Press next and fill in the details on the next few prompts and then continue to setup. When prompted if you want to add people just click &#8216;I have added all user email addresses currrently using &#8230;&#8217;<\/p>\\n<p>When you get to the verify domain section go back to dynu, click manage dns and add an TXT record (you can do this in the DNS records settings panel) and also setup the MX records. Once done your MX Records page should look something like this<br \/>\\n<img loading=\\\"lazy\\\" class=\\\"alignnone  wp-image-79\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/sns.png?resize=634%2C129\\\" alt=\\\"\\\" width=\\\"634\\\" height=\\\"129\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/sns.png?resize=300%2C61 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/sns.png?resize=768%2C157 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/sns.png?resize=720%2C147 720w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/sns.png?w=965 965w\\\" sizes=\\\"(max-width: 634px) 100vw, 634px\\\" data-recalc-dims=\\\"1\\\" \/><\/p>\\n<p>Once that is done google should verify correctly and you should now be able to use GSuite for your email and utilise the unlimited drive storage which comes with GSuite.<\/p>\\n<p>&nbsp;<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<p>I recently bought a domain name and needed email to go with it, after some research I decided to use GSuite as I&#8217;ve used Gmail for years and it has the added benefit of unlimited drive storage. This post should guide you through the steps needed to get GSuite connected to your domain and email up and running.<\/p>\n<p><strong>1: Buy domain name<\/strong><br \/>\nI used <a href=\"https:\/\/www.1and1.co.uk\/?ar=1\">1and1<\/a> to buy my domain as they seemed the cheapest at the time. It shouldn&#8217;t matter where you got the domain from so don&#8217;t worry too much about that.<\/p>\n<p><strong>2: Setup DNS<\/strong><br \/>\nMy webserver is hosted at home which means I don&#8217;t have a static IP address, to stop this being a problem I used <a href=\"https:\/\/www.dynu.com\">Dynu<\/a> for dynamic dns. I have used No-IP for years however they don&#8217;t allow connecting to custom domains for free. To point the domain towards dynu I created an account there and then set the nameserver in the 1&amp;1 control panel.<\/p>\n<p><img loading=\"lazy\" class=\"alignnone  wp-image-74\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/dns.png?resize=477%2C202\" alt=\" width=\"477\" height=\"202\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/dns.png?resize=300%2C127 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/dns.png?resize=768%2C326 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/dns.png?resize=1024%2C434 1024w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/dns.png?resize=720%2C305 720w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/dns.png?w=1118 1118w\" sizes=\"(max-width: 477px) 100vw, 477px\" data-recalc-dims=\"1\" \/><\/p>\n<p><strong>3: Setup GSuite<\/strong><\/p>\n<p>Now dns is working we can connect GSuite to our domain. Start with navigating to the <a href=\"https:\/\/gsuite.google.com\/together\/?user-benefits_activeEl=tab-connect\">GSuite homepage<\/a> and press the Get Started button in the top right. You should be able to follow the wizard through as it is fairly self explanatory, if you are only going to be using it for yourself you should select &#8216;Just You&#8217; on the about page.<\/p>\n<p><img loading=\"lazy\" class=\"alignnone size-medium wp-image-75\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/goog.png?resize=254%2C300\" alt=\" width=\"254\" height=\"300\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/goog.png?resize=254%2C300 254w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/goog.png?w=507 507w\" sizes=\"(max-width: 254px) 100vw, 254px\" data-recalc-dims=\"1\" \/><\/p>\n<p>When you get to this page select &#8216;Yes, I have one I can use&#8217;<\/p>\n<p><img loading=\"lazy\" class=\"alignnone size-medium wp-image-76\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/customdomain.png?resize=300%2C138\" alt=\" width=\"300\" height=\"138\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/customdomain.png?resize=300%2C138 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/customdomain.png?w=533 533w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" \/><\/p>\n<p><img loading=\"lazy\" class=\"alignnone size-medium wp-image-77\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/test.png?resize=300%2C198\" alt=\" width=\"300\" height=\"198\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/test.png?resize=300%2C198 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/test.png?w=569 569w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Press next and fill in the details on the next few prompts and then continue to setup. When prompted if you want to add people just click &#8216;I have added all user email addresses currrently using &#8230;&#8217;<\/p>\n<p>When you get to the verify domain section go back to dynu, click manage dns and add an TXT record (you can do this in the DNS records settings panel) and also setup the MX records. Once done your MX Records page should look something like this<br \/>\n<img loading=\"lazy\" class=\"alignnone  wp-image-79\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/sns.png?resize=634%2C129\" alt=\" width=\"634\" height=\"129\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/sns.png?resize=300%2C61 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/sns.png?resize=768%2C157 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/sns.png?resize=720%2C147 720w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/01\/sns.png?w=965 965w\" sizes=\"(max-width: 634px) 100vw, 634px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Once that is done google should verify correctly and you should now be able to use GSuite for your email and utilise the unlimited drive storage which comes with GSuite.<\/p>\n<p>&nbsp;<\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 22 Jan 2018 08:29:25 +0000","created_by":1,"updated_at":"Mon, 22 Jan 2018 10:31:45 +0000","updated_by":1,"published_at":"Mon, 22 Jan 2018 08:29:25 +0000","published_by":1},{"id":84,"title":"Installing Jenkins on Ubuntu","slug":"temp-slug-5","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"","feature_image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 16 Mar 2018 08:11:11 +0000","created_by":1,"updated_at":"Fri, 16 Mar 2018 08:11:11 +0000","updated_by":1,"published_at":"","published_by":1},{"id":73,"title":"Using Veeam to Backup and Restore","slug":"temp-slug-6","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"","feature_image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 16 Mar 2018 08:11:37 +0000","created_by":1,"updated_at":"Fri, 16 Mar 2018 08:11:37 +0000","updated_by":1,"published_at":"","published_by":1},{"id":89,"title":"Using rsync  to upload to Google Drive","slug":"temp-slug-7","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"","feature_image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 16 Mar 2018 13:54:47 +0000","created_by":1,"updated_at":"Fri, 16 Mar 2018 13:54:47 +0000","updated_by":1,"published_at":"","published_by":1},{"id":3,"title":"Unit Testing with DateTime.Now","slug":"unit-testing-with-datetime-now","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<p>I recently had to write some unit tests for a method which had various outcomes depending on the current Date\/Time, this created a problem as the method used DateTime.Now and there is no way to <a href=\\\"https:\/\/github.com\/moq\/moq\\\">moq<\/a>\\u00a0it. I tried a few different ways of doing this and did a bit of Googling and came up with the following solution. I can&#8217;t take credit for this as it came from <a href=\\\"https:\/\/stackoverflow.com\/questions\/2425721\/unit-testing-datetime-now\\\">this stackoverflow post.<\/a><\/p>\\n<p><script src=\\\"https:\/\/gist.github.com\/tomaustin700\/339d18b9802e9f757ae74ce30c5a49b7.js\\\"><\/script><\/p>\\n<p>The way this works is that you use SystemTime within your methods instead of DateTime and then change the value depending on the test using SetDateTime.<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<p>I recently had to write some unit tests for a method which had various outcomes depending on the current Date\/Time, this created a problem as the method used DateTime.Now and there is no way to <a href=\"https:\/\/github.com\/moq\/moq\">moq<\/a>\u00a0it. I tried a few different ways of doing this and did a bit of Googling and came up with the following solution. I can&#8217;t take credit for this as it came from <a href=\"https:\/\/stackoverflow.com\/questions\/2425721\/unit-testing-datetime-now\">this stackoverflow post.<\/a><\/p>\n<p><script src=\"https:\/\/gist.github.com\/tomaustin700\/339d18b9802e9f757ae74ce30c5a49b7.js\"><\/script><\/p>\n<p>The way this works is that you use SystemTime within your methods instead of DateTime and then change the value depending on the test using SetDateTime.<\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 20 Mar 2018 11:04:35 +0000","created_by":1,"updated_at":"Mon, 10 Dec 2018 22:03:53 +0000","updated_by":1,"published_at":"Tue, 20 Mar 2018 11:04:35 +0000","published_by":1},{"id":86,"title":"Controlling Fan Speeds on a Dell R710","slug":"controlling-fan-speeds-on-a-dell-r710","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<p>A few months back I upgraded my home server to a Dell R710, I got a good deal on it and it came preloaded with 72GB ram and two Xeons so it was much more powerful than the server it replaced. The problem with it is that the R710 is an enterprise grade server and is intended for data centres and not the home. Because of this it has multiple blower fans which are great for airflow and keep everything nice and cool however they can be very noisy which was problematic. After a bit of research I found that the fan rpm could be controlled via <a href=\\\"https:\/\/en.wikipedia.org\/wiki\/Intelligent_Platform_Management_Interface\\\">IPMI<\/a>. I spun up a Ubuntu server VM and modified a script I found on <a href=\\\"https:\/\/github.com\/NoLooseEnds\/Scripts\/blob\/master\/R710-IPMI-TEMP\/R710-IPMITemp.sh\\\">GitHub<\/a>\\u00a0to periodically check the system temperature and modify the fan speed accordingly. Most of the time the server is not under load so the fan speeds ramp down to acceptable noise levels. The final script can be found below (in order to use it you will need to install ipmitool). This script can be ran using a cronjob (I have mine running via Jenkins every 5 mins).<\/p>\\n<p><script src=\\\"https:\/\/gist.github.com\/tomaustin700\/6f56622600b912e58db87f252a626fc0.js\\\"><\/script><\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<p>A few months back I upgraded my home server to a Dell R710, I got a good deal on it and it came preloaded with 72GB ram and two Xeons so it was much more powerful than the server it replaced. The problem with it is that the R710 is an enterprise grade server and is intended for data centres and not the home. Because of this it has multiple blower fans which are great for airflow and keep everything nice and cool however they can be very noisy which was problematic. After a bit of research I found that the fan rpm could be controlled via <a href=\"https:\/\/en.wikipedia.org\/wiki\/Intelligent_Platform_Management_Interface\">IPMI<\/a>. I spun up a Ubuntu server VM and modified a script I found on <a href=\"https:\/\/github.com\/NoLooseEnds\/Scripts\/blob\/master\/R710-IPMI-TEMP\/R710-IPMITemp.sh\">GitHub<\/a>\u00a0to periodically check the system temperature and modify the fan speed accordingly. Most of the time the server is not under load so the fan speeds ramp down to acceptable noise levels. The final script can be found below (in order to use it you will need to install ipmitool). This script can be ran using a cronjob (I have mine running via Jenkins every 5 mins).<\/p>\n<p><script src=\"https:\/\/gist.github.com\/tomaustin700\/6f56622600b912e58db87f252a626fc0.js\"><\/script><\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 20 Mar 2018 11:17:33 +0000","created_by":1,"updated_at":"Tue, 20 Mar 2018 11:29:02 +0000","updated_by":1,"published_at":"Tue, 20 Mar 2018 11:17:33 +0000","published_by":1},{"id":91,"title":"Workrbot - Microsoft TFS Auto Moderator","slug":"workrbot-microsoft-tfs-auto-moderator","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<p>I use <a href=\\\"https:\/\/www.visualstudio.com\/tfs\/\\\">Microsoft TFS<\/a> on a daily basis and have found that no matter how many documents and guides you write regarding processes people will log bugs\/user stories incorrectly. To try and help with this I built a bot which can be given a ruleset and notify users when substandard work items are added. More information can be found on my github page <a href=\\\"https:\/\/github.com\/tomaustin700\/Workrbot\\\">here<\/a>. Below you can find the installation instructions.<\/p>\\n<h1>Installation<\/h1>\\n<p>Workrbot can be installed within IIS and requires an Active Directory user account to run. The below steps show a basic installation.<\/p>\\n<p><strong>Create new IIS Application Pool<\/strong><\/p>\\n<p>Open IIS and create a new application pool for Workrbot, once created open &#8216;Advanced Settings&#8217; for the pool and turn on &#8216;Load User Profile&#8217;<\/p>\\n<p><img src=\\\"https:\/\/i2.wp.com\/i.imgur.com\/gr2bs48.png?w=640&#038;ssl=1\\\" alt=\\\"IIS Application pool\\\" data-recalc-dims=\\\"1\\\" \/><\/p>\\n<p><strong>Create new IIS Application<\/strong><\/p>\\n<p>This is where Workrbot will be accessed and is where you will need to deploy to. The settings are fairly straight forward for this (remember to select the application pool you created)<br \/>\\n<img src=\\\"https:\/\/i0.wp.com\/i.imgur.com\/3lUzQth.png?w=640&#038;ssl=1\\\" alt=\\\"add iis application\\\" data-recalc-dims=\\\"1\\\" \/><\/p>\\n<p><strong>Create Active Directory User Account<\/strong><\/p>\\n<p>Workrbot requires an AD user account to run, no specific permissions are required so just add a basic account.<\/p>\\n<p><img src=\\\"https:\/\/i1.wp.com\/i.imgur.com\/sOwNnjA.png?w=640&#038;ssl=1\\\" alt=\\\"Add AD User\\\" data-recalc-dims=\\\"1\\\" \/><\/p>\\n<p><strong>Grant User Permissions Within TFS<\/strong><\/p>\\n<p>In order to update work items within TFS Workrbot needs some permissions, I have just added it to the Team I want to manage.<\/p>\\n<p><img src=\\\"https:\/\/i1.wp.com\/i.imgur.com\/PIpTKAl.png?w=640&#038;ssl=1\\\" alt=\\\"Add User to TFS\\\" data-recalc-dims=\\\"1\\\" \/><\/p>\\n<p><strong>Deploy to IIS<\/strong><\/p>\\n<p>Deploy Workrbot to your IIS application in your preferred way. I normally do it from visual studio and publish it to the directory of the application however you can do it using web deploy or any other means of getting it to your application.<\/p>\\n<p><strong>Configure Workrbot Settings<\/strong><\/p>\\n<p>You should now have a site you can access (assuming you deployed to IIS correctly). Simply navigate to your workrbot instance using your preferred browser and click settings.<br \/>\\n<img src=\\\"https:\/\/i1.wp.com\/i.imgur.com\/JSj8GDu.png?w=640&#038;ssl=1\\\" alt=\\\"workrbot settings\\\" data-recalc-dims=\\\"1\\\" \/><\/p>\\n<p><strong>Configure TFS Web Hooks<\/strong><\/p>\\n<p>In order for TFS to communicate with Workrbot you need to setup web hooks within TFS (This can be done by hovering over the TFS configureation cog and selecting service hooks). You will then need to add the following web hooks.<br \/>\\n&#8211; Work Item Created (Point to http:\/\/<em>youriisinstance<\/em>\/workrbot\/api\/TFS\/WorkItemCreated\/)<br \/>\\n&#8211; Work Item Deleted (Point to http:\/\/<em>youriisinstance<\/em>\/workrbot\/api\/TFS\/WorkItemDeleted\/)<br \/>\\n&#8211; Work Item Restored (Point to http:\/\/<em>youriisinstance<\/em>\/workrbot\/api\/TFS\/WorkItemRestored\/)<br \/>\\n&#8211; Work Item Updated (Point to http:\/\/<em>youriisinstance<\/em>\/workrbot\/api\/TFS\/WorkItemUpdated\/)<br \/>\\n&#8211; Work Item Commented On (Point to http:\/\/<em>youriisinstance<\/em>\/workrbot\/api\/TFS\/CommentPosted\/)<\/p>\\n<p>When adding the web hook you will need to set Resource Version to latest. Don&#8217;t worry if you test the web hook and it fails (some aren&#8217;t coded to accept the fake request that is sent when testing). Once all setup you should have something that looks like this<br \/>\\n<img src=\\\"https:\/\/i0.wp.com\/i.imgur.com\/sNMoW7h.png?w=640&#038;ssl=1\\\" alt=\\\"hooks\\\" data-recalc-dims=\\\"1\\\" \/><\/p>\\n<p><strong>Configure Workrbot<\/strong><\/p>\\n<p>You are almost done! Now just access your Workrbot instance and setup rules to do whatever you want<br \/>\\n<img src=\\\"https:\/\/i0.wp.com\/i.imgur.com\/bPbMgDd.png?w=640&#038;ssl=1\\\" alt=\\\"events\\\" data-recalc-dims=\\\"1\\\" \/><\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<p>I use <a href=\"https:\/\/www.visualstudio.com\/tfs\/\">Microsoft TFS<\/a> on a daily basis and have found that no matter how many documents and guides you write regarding processes people will log bugs\/user stories incorrectly. To try and help with this I built a bot which can be given a ruleset and notify users when substandard work items are added. More information can be found on my github page <a href=\"https:\/\/github.com\/tomaustin700\/Workrbot\">here<\/a>. Below you can find the installation instructions.<\/p>\n<h1>Installation<\/h1>\n<p>Workrbot can be installed within IIS and requires an Active Directory user account to run. The below steps show a basic installation.<\/p>\n<p><strong>Create new IIS Application Pool<\/strong><\/p>\n<p>Open IIS and create a new application pool for Workrbot, once created open &#8216;Advanced Settings&#8217; for the pool and turn on &#8216;Load User Profile&#8217;<\/p>\n<p><img src=\"https:\/\/i2.wp.com\/i.imgur.com\/gr2bs48.png?w=640&#038;ssl=1\" alt=\"IIS Application pool\" data-recalc-dims=\"1\" \/><\/p>\n<p><strong>Create new IIS Application<\/strong><\/p>\n<p>This is where Workrbot will be accessed and is where you will need to deploy to. The settings are fairly straight forward for this (remember to select the application pool you created)<br \/>\n<img src=\"https:\/\/i0.wp.com\/i.imgur.com\/3lUzQth.png?w=640&#038;ssl=1\" alt=\"add iis application\" data-recalc-dims=\"1\" \/><\/p>\n<p><strong>Create Active Directory User Account<\/strong><\/p>\n<p>Workrbot requires an AD user account to run, no specific permissions are required so just add a basic account.<\/p>\n<p><img src=\"https:\/\/i1.wp.com\/i.imgur.com\/sOwNnjA.png?w=640&#038;ssl=1\" alt=\"Add AD User\" data-recalc-dims=\"1\" \/><\/p>\n<p><strong>Grant User Permissions Within TFS<\/strong><\/p>\n<p>In order to update work items within TFS Workrbot needs some permissions, I have just added it to the Team I want to manage.<\/p>\n<p><img src=\"https:\/\/i1.wp.com\/i.imgur.com\/PIpTKAl.png?w=640&#038;ssl=1\" alt=\"Add User to TFS\" data-recalc-dims=\"1\" \/><\/p>\n<p><strong>Deploy to IIS<\/strong><\/p>\n<p>Deploy Workrbot to your IIS application in your preferred way. I normally do it from visual studio and publish it to the directory of the application however you can do it using web deploy or any other means of getting it to your application.<\/p>\n<p><strong>Configure Workrbot Settings<\/strong><\/p>\n<p>You should now have a site you can access (assuming you deployed to IIS correctly). Simply navigate to your workrbot instance using your preferred browser and click settings.<br \/>\n<img src=\"https:\/\/i1.wp.com\/i.imgur.com\/JSj8GDu.png?w=640&#038;ssl=1\" alt=\"workrbot settings\" data-recalc-dims=\"1\" \/><\/p>\n<p><strong>Configure TFS Web Hooks<\/strong><\/p>\n<p>In order for TFS to communicate with Workrbot you need to setup web hooks within TFS (This can be done by hovering over the TFS configureation cog and selecting service hooks). You will then need to add the following web hooks.<br \/>\n&#8211; Work Item Created (Point to http:\/\/<em>youriisinstance<\/em>\/workrbot\/api\/TFS\/WorkItemCreated\/)<br \/>\n&#8211; Work Item Deleted (Point to http:\/\/<em>youriisinstance<\/em>\/workrbot\/api\/TFS\/WorkItemDeleted\/)<br \/>\n&#8211; Work Item Restored (Point to http:\/\/<em>youriisinstance<\/em>\/workrbot\/api\/TFS\/WorkItemRestored\/)<br \/>\n&#8211; Work Item Updated (Point to http:\/\/<em>youriisinstance<\/em>\/workrbot\/api\/TFS\/WorkItemUpdated\/)<br \/>\n&#8211; Work Item Commented On (Point to http:\/\/<em>youriisinstance<\/em>\/workrbot\/api\/TFS\/CommentPosted\/)<\/p>\n<p>When adding the web hook you will need to set Resource Version to latest. Don&#8217;t worry if you test the web hook and it fails (some aren&#8217;t coded to accept the fake request that is sent when testing). Once all setup you should have something that looks like this<br \/>\n<img src=\"https:\/\/i0.wp.com\/i.imgur.com\/sNMoW7h.png?w=640&#038;ssl=1\" alt=\"hooks\" data-recalc-dims=\"1\" \/><\/p>\n<p><strong>Configure Workrbot<\/strong><\/p>\n<p>You are almost done! Now just access your Workrbot instance and setup rules to do whatever you want<br \/>\n<img src=\"https:\/\/i0.wp.com\/i.imgur.com\/bPbMgDd.png?w=640&#038;ssl=1\" alt=\"events\" data-recalc-dims=\"1\" \/><\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 20 Mar 2018 11:46:19 +0000","created_by":1,"updated_at":"Mon, 21 May 2018 15:51:15 +0000","updated_by":1,"published_at":"Tue, 20 Mar 2018 11:46:19 +0000","published_by":1},{"id":117,"title":"Metriticity - A .Net metrics gathering Nuget package","slug":"metriticity-a-net-metrics-gathering-nuget-package","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<p>When people think of DevOps they frequently miss out or neglect the monitoring of their applications. One of the main goals of DevOps is to react quickly to situations and ensure the best experience for the end user; monitoring enables this and gives us the following advantages<\/p>\\n<ul>\\n<li>Identifies problems in the application.<\/li>\\n<li>Drives insights into backlog from production.<\/li>\\n<li>Enables hypothesis-driven development.<\/li>\\n<li>Allows user telemetry to help the team take proactive actions instead of reactive actions.<\/li>\\n<\/ul>\\n<p>Seeing problems as they occur is the most effective way of making sure that the problems are corrected as soon as possible. A system that is able to monitor, detect, and alert to problems will allow for mitigation or resolution of problems as soon as they occur.<\/p>\\n<p>To aid with this I have developed a Nuget package which can monitor c# applications and provide a wide range of metrics which should be able to be used to monitor application health. This package is <a href=\\\"https:\/\/www.nuget.org\/packages\/Metricity\/\\\">Metricity<\/a>.<\/p>\\n<p>Metricity can monitor method execution times, application cpu usage, application memory usage, method hit counts, timings, exception handling and a whole lot more. What separates Metricity from other packages is that it can natively send statistics to a remote database for live monitoring. You can use Metricity without any of the remote features and there is still a lot it can help you with without it however Metricity&#8217;s strengths lie with its database capabilities. Please see the <a href=\\\"https:\/\/github.com\/tomaustin700\/Metricity\\\">Metricity GitHub page<\/a> for up-to-date features however a rundown of the main methods can be seen below<\/p>\\n<p><script src=\\\"https:\/\/gist.github.com\/tomaustin700\/9c7e211e9227401b07aefd23380800ba.js\\\"><\/script><\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<p>When people think of DevOps they frequently miss out or neglect the monitoring of their applications. One of the main goals of DevOps is to react quickly to situations and ensure the best experience for the end user; monitoring enables this and gives us the following advantages<\/p>\n<ul>\n<li>Identifies problems in the application.<\/li>\n<li>Drives insights into backlog from production.<\/li>\n<li>Enables hypothesis-driven development.<\/li>\n<li>Allows user telemetry to help the team take proactive actions instead of reactive actions.<\/li>\n<\/ul>\n<p>Seeing problems as they occur is the most effective way of making sure that the problems are corrected as soon as possible. A system that is able to monitor, detect, and alert to problems will allow for mitigation or resolution of problems as soon as they occur.<\/p>\n<p>To aid with this I have developed a Nuget package which can monitor c# applications and provide a wide range of metrics which should be able to be used to monitor application health. This package is <a href=\"https:\/\/www.nuget.org\/packages\/Metricity\/\">Metricity<\/a>.<\/p>\n<p>Metricity can monitor method execution times, application cpu usage, application memory usage, method hit counts, timings, exception handling and a whole lot more. What separates Metricity from other packages is that it can natively send statistics to a remote database for live monitoring. You can use Metricity without any of the remote features and there is still a lot it can help you with without it however Metricity&#8217;s strengths lie with its database capabilities. Please see the <a href=\"https:\/\/github.com\/tomaustin700\/Metricity\">Metricity GitHub page<\/a> for up-to-date features however a rundown of the main methods can be seen below<\/p>\n<p><script src=\"https:\/\/gist.github.com\/tomaustin700\/9c7e211e9227401b07aefd23380800ba.js\"><\/script><\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 21 May 2018 13:29:40 +0000","created_by":1,"updated_at":"Mon, 21 May 2018 13:42:31 +0000","updated_by":1,"published_at":"Mon, 21 May 2018 13:29:40 +0000","published_by":1},{"id":124,"title":"Getting Around No NAT Loopback","slug":"getting-around-no-nat-loopback","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>I have been hosting this site internally for about a year now on a virtualised nginx instance, getting it up and running was a breeze but something always bugged me &#8211; I couldn&#8217;t access the site from within the local network.<\/p>\\n\\n\\n\\n<p>After a bit of digging around I found the problem&#8230; my router didn&#8217;t support NAT Loopback. Without NAT Loopback if I typed my url into the address bar it would take me to my routers login page. Now I could work around this by using the internal ip of the nginx instance however because the site address is&nbsp;http:\/\/tomaustin.xyz WordPress seems to get a bit weird if you don&#8217;t access it from that address (certain things don&#8217;t render correctly, images don&#8217;t load).<\/p>\\n\\n\\n\\n<p>After about a year I decided enough was enough and I was going to sort this out.<\/p>\\n\\n\\n\\n<p>Internally I host my own domain and DNS server so I knew with a bit of DNS magic I could get this working. Normally DNS servers cause nothing but problems and you can spend hours trying to get something working before you realise it&#8217;s a DNS issue, it&#8217;s always DNS! This time DNS was on my side.<\/p>\\n\\n\\n\\n<p>First off open DNS Manger on your DNS server and expand Forward Lookup Zones, then right click and select New Zone<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"358\\\" height=\\\"224\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-3.png?resize=358%2C224\\\" alt=\\\"\\\" class=\\\"wp-image-128\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-3.png?w=358 358w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-3.png?resize=300%2C188 300w\\\" sizes=\\\"(max-width: 358px) 100vw, 358px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Click through the wizard and select Primary zone and select &#8220;To all DNS servers running on domain controllers in this domain:&#8221; (I think any of the options will work but this is what I selected). Now enter your zone name.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"528\\\" height=\\\"414\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-1.png?resize=528%2C414\\\" alt=\\\"\\\" class=\\\"wp-image-126\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-1.png?w=528 528w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-1.png?resize=300%2C235 300w\\\" sizes=\\\"(max-width: 528px) 100vw, 528px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Click to Allow only secure dynamic updates and finish. Your domain should now show in the Forward Lookup Zone of the DNS Server.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"194\\\" height=\\\"185\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-7.png?resize=194%2C185\\\" alt=\\\"\\\" class=\\\"wp-image-133\\\" data-recalc-dims=\\\"1\\\"\/><\/figure>\\n\\n\\n\\n<p>Now all we need to do is add a few A records and we are done, click on your zone then right click and select New Host (A or AAAA).<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"351\\\" height=\\\"424\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-4.png?resize=351%2C424\\\" alt=\\\"\\\" class=\\\"wp-image-129\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-4.png?w=351 351w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-4.png?resize=248%2C300 248w\\\" sizes=\\\"(max-width: 351px) 100vw, 351px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>The first record we want to add just wants to have a blank name, add the ip address of your web server.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"433\\\" height=\\\"410\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-5.png?resize=433%2C410\\\" alt=\\\"\\\" class=\\\"wp-image-130\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-5.png?w=433 433w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-5.png?resize=300%2C284 300w\\\" sizes=\\\"(max-width: 433px) 100vw, 433px\\\" data-recalc-dims=\\\"1\\\" \/><figcaption><br><\/figcaption><\/figure>\\n\\n\\n\\n<p>Once that has added add a second entry but enter www in the Name field, use the same IP address.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"430\\\" height=\\\"480\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-6.png?resize=430%2C480\\\" alt=\\\"\\\" class=\\\"wp-image-131\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-6.png?w=430 430w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-6.png?resize=269%2C300 269w\\\" sizes=\\\"(max-width: 430px) 100vw, 430px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>That should be it!<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>I have been hosting this site internally for about a year now on a virtualised nginx instance, getting it up and running was a breeze but something always bugged me &#8211; I couldn&#8217;t access the site from within the local network.<\/p>\n\n\n\n<p>After a bit of digging around I found the problem&#8230; my router didn&#8217;t support NAT Loopback. Without NAT Loopback if I typed my url into the address bar it would take me to my routers login page. Now I could work around this by using the internal ip of the nginx instance however because the site address is&nbsp;http:\/\/tomaustin.xyz WordPress seems to get a bit weird if you don&#8217;t access it from that address (certain things don&#8217;t render correctly, images don&#8217;t load).<\/p>\n\n\n\n<p>After about a year I decided enough was enough and I was going to sort this out.<\/p>\n\n\n\n<p>Internally I host my own domain and DNS server so I knew with a bit of DNS magic I could get this working. Normally DNS servers cause nothing but problems and you can spend hours trying to get something working before you realise it&#8217;s a DNS issue, it&#8217;s always DNS! This time DNS was on my side.<\/p>\n\n\n\n<p>First off open DNS Manger on your DNS server and expand Forward Lookup Zones, then right click and select New Zone<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"358\" height=\"224\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-3.png?resize=358%2C224\" alt=\" class=\"wp-image-128\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-3.png?w=358 358w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-3.png?resize=300%2C188 300w\" sizes=\"(max-width: 358px) 100vw, 358px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Click through the wizard and select Primary zone and select &#8220;To all DNS servers running on domain controllers in this domain:&#8221; (I think any of the options will work but this is what I selected). Now enter your zone name.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"528\" height=\"414\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-1.png?resize=528%2C414\" alt=\" class=\"wp-image-126\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-1.png?w=528 528w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-1.png?resize=300%2C235 300w\" sizes=\"(max-width: 528px) 100vw, 528px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Click to Allow only secure dynamic updates and finish. Your domain should now show in the Forward Lookup Zone of the DNS Server.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"194\" height=\"185\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-7.png?resize=194%2C185\" alt=\" class=\"wp-image-133\" data-recalc-dims=\"1\"\/><\/figure>\n\n\n\n<p>Now all we need to do is add a few A records and we are done, click on your zone then right click and select New Host (A or AAAA).<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"351\" height=\"424\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-4.png?resize=351%2C424\" alt=\" class=\"wp-image-129\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-4.png?w=351 351w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-4.png?resize=248%2C300 248w\" sizes=\"(max-width: 351px) 100vw, 351px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>The first record we want to add just wants to have a blank name, add the ip address of your web server.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"433\" height=\"410\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-5.png?resize=433%2C410\" alt=\" class=\"wp-image-130\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-5.png?w=433 433w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-5.png?resize=300%2C284 300w\" sizes=\"(max-width: 433px) 100vw, 433px\" data-recalc-dims=\"1\" \/><figcaption><br><\/figcaption><\/figure>\n\n\n\n<p>Once that has added add a second entry but enter www in the Name field, use the same IP address.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"430\" height=\"480\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-6.png?resize=430%2C480\" alt=\" class=\"wp-image-131\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-6.png?w=430 430w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-6.png?resize=269%2C300 269w\" sizes=\"(max-width: 430px) 100vw, 430px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>That should be it!<\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 10 Dec 2018 21:27:39 +0000","created_by":1,"updated_at":"Tue, 11 Dec 2018 21:58:04 +0000","updated_by":1,"published_at":"Mon, 10 Dec 2018 21:27:39 +0000","published_by":1},{"id":136,"title":"Monitoring C# applications using Bosun","slug":"monitoring-c-applications-using-bosun","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>I recently stumbled across <a href=\\\"https:\/\/nickcraver.com\/blog\/2018\/11\/29\/stack-overflow-how-we-do-monitoring\/\\\">this interesting write-up<\/a> by Nick Craver about how <a href=\\\"http:\/\/www.stackoverflow.com\\\">Stack Overflow<\/a> do their monitoring. If you have any interest in DevOps or infrastructure in general I highly recommend giving it a read. One section caught my eye&#8230; <a href=\\\"https:\/\/bosun.org\/\\\">Bosun<\/a>.<\/p>\\n\\n\\n\\n<br \/>\\n\\n\\n\\n<p>Bosun is a data collection tool for metrics and meta data, if you&#8217;ve read any of my previous posts you will have seen my post about the metric gathering package I wrote called <a href=\\\"http:\/\/tomaustin.xyz\/2018\/05\/21\/metriticity-a-net-metrics-gathering-nuget-package\/\\\">Metricity<\/a>. I started writing Metricity because I couldn&#8217;t find anything which could collect metrics of my choosing and store them somewhere on an internal network. Metricity worked but you had to spin up your own sql database to store the data and there was no UI for analysing and viewing the data (I did start writing a website using <a href=\\\"https:\/\/vuejs.org\/\\\">Vue<\/a> which could show the data but that&#8217;s for another post). Bosun does everything Metricity can and more!<\/p>\\n\\n\\n\\n<br \/>\\n\\n\\n\\n<p>By default Bosun can record metrics from servers (cpu load, clock speed, hdd capactity, etc) which is useful but the feature which really caught my eye was its C# Nuget package called <a href=\\\"https:\/\/github.com\/StackExchange\/BosunReporter\\\">Bosun Reporter<\/a>. Bosun Reporter allows any data to be sent to Bosun from within your application, I decided I had to test this out so the first thing to do was spin up a Bosun server.<\/p>\\n\\n\\n\\n<br \/>\\n\\n\\n\\n<p>The Bosun homepage has an excellent <a href=\\\"https:\/\/github.com\/bosun-monitor\/bosun\/releases\\\">quick start guide<\/a> which covers how to install the server using Docker, something to be aware of is that running Bosun from a Docker container is not currently supported in production environments. This is fine for me but they do provide versions for pretty much every operating system <a href=\\\"https:\/\/github.com\/bosun-monitor\/bosun\/releases\\\">here<\/a>. I have been meaning to get into Docker for a while so this seemed like a great time to spin up a new Ubuntu server, install Docker and pull the latest Bosun version from the Docker Registry.<\/p>\\n\\n\\n\\n<br \/>\\n\\n\\n\\n<p>I followed the quick start guide and quickly had Docker installed and Bosun running &#8211; that was easy! If you want to do this yourself without following the guide simply select Docker when prompted during the Ubuntu installation (this became an option on 18.10). Once installation has finished run:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-preformatted\\\">docker run -d -p 4242:4242 -p 8070:8070 stackexchange\/bosun:0.6.0-pre<\/pre>\\n\\n\\n\\n<p>This differs ever so slightly from the quick start guide as the guide uses version 0.5.0 which I did try at first but various features were missing. After a quick chat in the <a href=\\\"https:\/\/bosun.slack.com\\\">Bosun slack<\/a> I was told to try the 0.6.0 pre release which had everything I needed. The instance should start and you should be able to access your server using the IP of your Docker server and the port number (in our case 8070). You should be greeted with the following:<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"1205\\\" height=\\\"365\\\" src=\\\"https:\/\/i2.wp.com\/www.tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?fit=640%2C194&amp;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-137\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?w=1205 1205w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=300%2C91 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=768%2C233 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=1024%2C310 1024w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=720%2C218 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" \/><\/figure>\\n\\n\\n\\n<br \/>\\n\\n\\n\\n<p>At this point I do suggest going through the quick start guide as it explains in excellent detail all the features and workflow. From this point I will assume your fairly familiar with the UI (there isn&#8217;t much to it!).<\/p>\\n\\n\\n\\n<br \/>\\n\\n\\n\\n<p>Because I wanted to see how easy it was to push data from Bosun Reporter I made a new C# console application and installed Bosun Reporter. If you want to skip ahead and see the finished code then it&#8217;s on my GitHub <a href=\\\"https:\/\/github.com\/tomaustin700\/BosunExample\\\">here<\/a> but I will go into the details a bit here.<\/p>\\n\\n\\n\\n<p>The first thing to do is create a Metrics Collector and setup the connection and setting.<\/p>\\n\\n\\n\\n<script src=\\\"https:\/\/gist.github.com\/tomaustin700\/44ff9ba9cd3e03894887f03aaf6abb82.js\\\"><\/script>\\n\\n\\n\\n<p>It is recommended that the collector is made static, you would then initilise it when your application loads up. Now that we have collector setup we can start collecting some metrics! I am only going to go into recording metrics using EventGauge however Bosun Reporter supports several different ways of collecting data, these are explained in detail within the <a href=\\\"https:\/\/github.com\/StackExchange\/BosunReporter\\\">documentation<\/a>.<\/p>\\n\\n\\n\\n<br \/>\\n\\n\\n\\n<p>For this example I have created a simple console application that calls an API to get the weather for London, we will then measure the response time and log it in Bosun. We first need to create the metric we want to use for recording, this is as simple as calling CreateMetric.<\/p>\\n\\n\\n\\n<script src=\\\"https:\/\/gist.github.com\/tomaustin700\/83742a512ba216b1dc409bd134d31594.js\\\"><\/script>\\n\\n\\n\\n<p>We have to specify a few parameters to give Bosun some context to what we are collecting, in our case GetWeather corresponds to the metric name, time taken is the unit of measurement and the last parameter is a short description of what&#8217;s being collected. Adding data to the GetWeather metric is as simple as calling .Record and passing in the data you want to record. To make things a bit more reusable I wrapped up the recording in a Time method which accepts a Func&lt;Task&gt; as a parameter along with the EventGuage we made earlier. This method is called in the following way:<\/p>\\n\\n\\n\\n<script src=\\\"https:\/\/gist.github.com\/tomaustin700\/af4c0a366f1d959b53aa5bc5a45755f8.js\\\"><\/script>\\n\\n\\n\\n<p>In order to record the length of time the Func&lt;Task&gt; takes to execute we first create a stopwatch and start it, then we Invoke our method, stop the stopwatch and finally record our data in our metric.<\/p>\\n\\n\\n\\n<script src=\\\"https:\/\/gist.github.com\/tomaustin700\/3d58b541f22ac8c4d9bca38ea42da65a.js\\\"><\/script>\\n\\n\\n\\n<p>In my application I have setup a simple ElaspedEventHandler which then calls the Time method every 5 seconds which has the GetWeather method passed into it. This is just to get some data into Bosun so we can have a look at what we get. We can now run our application and start generating some data. Something to be aware of is by default Bosun Reporter will only submit data every 30 seconds (this is a nice touch as it stops us spamming Bosun), this can be tweaked by changing the SnapshotInterval parameter of the MetricsCollector.<\/p>\\n\\n\\n\\n<br \/>\\n\\n\\n\\n<p>Now if we open Bosun and have a look hopefully we should start seeing some data rolling in. The first thing we should notice is that under Items and then Hosts we should see our device name.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"452\\\" height=\\\"152\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-9.png?resize=452%2C152\\\" alt=\\\"\\\" class=\\\"wp-image-150\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-9.png?w=452 452w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-9.png?resize=300%2C101 300w\\\" sizes=\\\"(max-width: 452px) 100vw, 452px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>So far so good! 10cbc024198e is the name of the Bosun server and tom-pc is what we are running our application on. If we then click that device name and select Available Metrics we should see our data.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"425\\\" height=\\\"281\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-10.png?resize=425%2C281\\\" alt=\\\"\\\" class=\\\"wp-image-151\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-10.png?w=425 425w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-10.png?resize=300%2C198 300w\\\" sizes=\\\"(max-width: 425px) 100vw, 425px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>TestApp.GetWeather is the data we have pushed! As you can see I tried a few of the other data gathering features of Bosun Reporter but lets dive deeper into GetWeather.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"1166\\\" height=\\\"580\\\" src=\\\"https:\/\/i2.wp.com\/www.tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-11.png?fit=640%2C318&amp;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-152\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-11.png?w=1166 1166w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-11.png?resize=300%2C149 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-11.png?resize=768%2C382 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-11.png?resize=1024%2C509 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-11.png?resize=720%2C358 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" \/><\/figure>\\n\\n\\n\\n<p>We are presented with a nice graph showing our response time in ms and the interval of our API requests. From this we could then create an expression and use that to create an alert, this could then email us if a response took longer than our average response time. That&#8217;s just one example but Bosun supports all sorts of operators and aggregation techniques. I suggest checking out the <a href=\\\"https:\/\/bosun.org\/expressions\\\">documentation<\/a> for a deeper dive into Bosun&#8217;s expression language. All of the source code for the example I created for this can be found <a href=\\\"https:\/\/github.com\/tomaustin700\/BosunExample\\\">here<\/a> and I suggest you give Bosun and Bosun Reporter a try for youself!<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>I recently stumbled across <a href=\"https:\/\/nickcraver.com\/blog\/2018\/11\/29\/stack-overflow-how-we-do-monitoring\/\">this interesting write-up<\/a> by Nick Craver about how <a href=\"http:\/\/www.stackoverflow.com\">Stack Overflow<\/a> do their monitoring. If you have any interest in DevOps or infrastructure in general I highly recommend giving it a read. One section caught my eye&#8230; <a href=\"https:\/\/bosun.org\/\">Bosun<\/a>.<\/p>\n\n\n\n<br \/>\n\n\n\n<p>Bosun is a data collection tool for metrics and meta data, if you&#8217;ve read any of my previous posts you will have seen my post about the metric gathering package I wrote called <a href=\"http:\/\/tomaustin.xyz\/2018\/05\/21\/metriticity-a-net-metrics-gathering-nuget-package\/\">Metricity<\/a>. I started writing Metricity because I couldn&#8217;t find anything which could collect metrics of my choosing and store them somewhere on an internal network. Metricity worked but you had to spin up your own sql database to store the data and there was no UI for analysing and viewing the data (I did start writing a website using <a href=\"https:\/\/vuejs.org\/\">Vue<\/a> which could show the data but that&#8217;s for another post). Bosun does everything Metricity can and more!<\/p>\n\n\n\n<br \/>\n\n\n\n<p>By default Bosun can record metrics from servers (cpu load, clock speed, hdd capactity, etc) which is useful but the feature which really caught my eye was its C# Nuget package called <a href=\"https:\/\/github.com\/StackExchange\/BosunReporter\">Bosun Reporter<\/a>. Bosun Reporter allows any data to be sent to Bosun from within your application, I decided I had to test this out so the first thing to do was spin up a Bosun server.<\/p>\n\n\n\n<br \/>\n\n\n\n<p>The Bosun homepage has an excellent <a href=\"https:\/\/github.com\/bosun-monitor\/bosun\/releases\">quick start guide<\/a> which covers how to install the server using Docker, something to be aware of is that running Bosun from a Docker container is not currently supported in production environments. This is fine for me but they do provide versions for pretty much every operating system <a href=\"https:\/\/github.com\/bosun-monitor\/bosun\/releases\">here<\/a>. I have been meaning to get into Docker for a while so this seemed like a great time to spin up a new Ubuntu server, install Docker and pull the latest Bosun version from the Docker Registry.<\/p>\n\n\n\n<br \/>\n\n\n\n<p>I followed the quick start guide and quickly had Docker installed and Bosun running &#8211; that was easy! If you want to do this yourself without following the guide simply select Docker when prompted during the Ubuntu installation (this became an option on 18.10). Once installation has finished run:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">docker run -d -p 4242:4242 -p 8070:8070 stackexchange\/bosun:0.6.0-pre<\/pre>\n\n\n\n<p>This differs ever so slightly from the quick start guide as the guide uses version 0.5.0 which I did try at first but various features were missing. After a quick chat in the <a href=\"https:\/\/bosun.slack.com\">Bosun slack<\/a> I was told to try the 0.6.0 pre release which had everything I needed. The instance should start and you should be able to access your server using the IP of your Docker server and the port number (in our case 8070). You should be greeted with the following:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1205\" height=\"365\" src=\"https:\/\/i2.wp.com\/www.tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?fit=640%2C194&amp;ssl=1\" alt=\" class=\"wp-image-137\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?w=1205 1205w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=300%2C91 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=768%2C233 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=1024%2C310 1024w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=720%2C218 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" \/><\/figure>\n\n\n\n<br \/>\n\n\n\n<p>At this point I do suggest going through the quick start guide as it explains in excellent detail all the features and workflow. From this point I will assume your fairly familiar with the UI (there isn&#8217;t much to it!).<\/p>\n\n\n\n<br \/>\n\n\n\n<p>Because I wanted to see how easy it was to push data from Bosun Reporter I made a new C# console application and installed Bosun Reporter. If you want to skip ahead and see the finished code then it&#8217;s on my GitHub <a href=\"https:\/\/github.com\/tomaustin700\/BosunExample\">here<\/a> but I will go into the details a bit here.<\/p>\n\n\n\n<p>The first thing to do is create a Metrics Collector and setup the connection and setting.<\/p>\n\n\n\n<script src=\"https:\/\/gist.github.com\/tomaustin700\/44ff9ba9cd3e03894887f03aaf6abb82.js\"><\/script>\n\n\n\n<p>It is recommended that the collector is made static, you would then initilise it when your application loads up. Now that we have collector setup we can start collecting some metrics! I am only going to go into recording metrics using EventGauge however Bosun Reporter supports several different ways of collecting data, these are explained in detail within the <a href=\"https:\/\/github.com\/StackExchange\/BosunReporter\">documentation<\/a>.<\/p>\n\n\n\n<br \/>\n\n\n\n<p>For this example I have created a simple console application that calls an API to get the weather for London, we will then measure the response time and log it in Bosun. We first need to create the metric we want to use for recording, this is as simple as calling CreateMetric.<\/p>\n\n\n\n<script src=\"https:\/\/gist.github.com\/tomaustin700\/83742a512ba216b1dc409bd134d31594.js\"><\/script>\n\n\n\n<p>We have to specify a few parameters to give Bosun some context to what we are collecting, in our case GetWeather corresponds to the metric name, time taken is the unit of measurement and the last parameter is a short description of what&#8217;s being collected. Adding data to the GetWeather metric is as simple as calling .Record and passing in the data you want to record. To make things a bit more reusable I wrapped up the recording in a Time method which accepts a Func&lt;Task&gt; as a parameter along with the EventGuage we made earlier. This method is called in the following way:<\/p>\n\n\n\n<script src=\"https:\/\/gist.github.com\/tomaustin700\/af4c0a366f1d959b53aa5bc5a45755f8.js\"><\/script>\n\n\n\n<p>In order to record the length of time the Func&lt;Task&gt; takes to execute we first create a stopwatch and start it, then we Invoke our method, stop the stopwatch and finally record our data in our metric.<\/p>\n\n\n\n<script src=\"https:\/\/gist.github.com\/tomaustin700\/3d58b541f22ac8c4d9bca38ea42da65a.js\"><\/script>\n\n\n\n<p>In my application I have setup a simple ElaspedEventHandler which then calls the Time method every 5 seconds which has the GetWeather method passed into it. This is just to get some data into Bosun so we can have a look at what we get. We can now run our application and start generating some data. Something to be aware of is by default Bosun Reporter will only submit data every 30 seconds (this is a nice touch as it stops us spamming Bosun), this can be tweaked by changing the SnapshotInterval parameter of the MetricsCollector.<\/p>\n\n\n\n<br \/>\n\n\n\n<p>Now if we open Bosun and have a look hopefully we should start seeing some data rolling in. The first thing we should notice is that under Items and then Hosts we should see our device name.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"452\" height=\"152\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-9.png?resize=452%2C152\" alt=\" class=\"wp-image-150\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-9.png?w=452 452w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-9.png?resize=300%2C101 300w\" sizes=\"(max-width: 452px) 100vw, 452px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>So far so good! 10cbc024198e is the name of the Bosun server and tom-pc is what we are running our application on. If we then click that device name and select Available Metrics we should see our data.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"425\" height=\"281\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-10.png?resize=425%2C281\" alt=\" class=\"wp-image-151\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-10.png?w=425 425w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-10.png?resize=300%2C198 300w\" sizes=\"(max-width: 425px) 100vw, 425px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>TestApp.GetWeather is the data we have pushed! As you can see I tried a few of the other data gathering features of Bosun Reporter but lets dive deeper into GetWeather.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1166\" height=\"580\" src=\"https:\/\/i2.wp.com\/www.tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-11.png?fit=640%2C318&amp;ssl=1\" alt=\" class=\"wp-image-152\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-11.png?w=1166 1166w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-11.png?resize=300%2C149 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-11.png?resize=768%2C382 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-11.png?resize=1024%2C509 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-11.png?resize=720%2C358 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" \/><\/figure>\n\n\n\n<p>We are presented with a nice graph showing our response time in ms and the interval of our API requests. From this we could then create an expression and use that to create an alert, this could then email us if a response took longer than our average response time. That&#8217;s just one example but Bosun supports all sorts of operators and aggregation techniques. I suggest checking out the <a href=\"https:\/\/bosun.org\/expressions\">documentation<\/a> for a deeper dive into Bosun&#8217;s expression language. All of the source code for the example I created for this can be found <a href=\"https:\/\/github.com\/tomaustin700\/BosunExample\">here<\/a> and I suggest you give Bosun and Bosun Reporter a try for youself!<\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 11 Dec 2018 21:35:48 +0000","created_by":1,"updated_at":"Sun, 05 May 2019 14:55:17 +0000","updated_by":1,"published_at":"Tue, 11 Dec 2018 21:35:48 +0000","published_by":1},{"id":158,"title":"Sending Windows data to Bosun using Scollector","slug":"sending-windows-data-to-bosun-using-scollector","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>I have previously written about how to send .net application data to <a href=\\\"https:\/\/bosun.org\/\\\">Bosun<\/a> however what if we wanted to send data from our OS to Bosun? Well for that we need <a href=\\\"http:\/\/bosun.org\/scollector\/\\\">Scollector<\/a>!<\/p>\\n\\n\\n\\n<br \/>\\n\\n\\n\\n<p>The first thing we need to do is download the correct binary for our OS, these can all be found on the Scollector homepage however for this article we will just be focusing on the Windows version. Once downloaded create a folder for Scollector on C:\\\\ (this can be anywhere really but this makes it nice and easy). One thing that also makes things easy is to rename the exe to just Scollector. Put the exe in the directory you have just made. Now open a Powershell session as administrator and run the following command to install Scollector as a Windows service.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>c:\\\\Scollector\\\\Scollector.exe -winsvc=\\\"install\\\"<\/code><\/pre>\\n\\n\\n\\n<p>Now we need to modify the service so it can connect to our Bosun server, for that we need to open the registry editor (run &gt; regedit) and navigate to&nbsp;HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\scollector. We should see an entry called ImagePath which points to our Scollector exe.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"129\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-12.png?resize=640%2C129\\\" alt=\\\"\\\" class=\\\"wp-image-159\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-12.png?w=760 760w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-12.png?resize=300%2C60 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-12.png?resize=720%2C145 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>We now need to right click on this entry and select modify. Add the following parameter to the Value data (the ip and port correspond to your Bosun server).<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"450\\\" height=\\\"227\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-13.png?resize=450%2C227\\\" alt=\\\"\\\" class=\\\"wp-image-160\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-13.png?w=450 450w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-13.png?resize=300%2C151 300w\\\" sizes=\\\"(max-width: 450px) 100vw, 450px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Now all we need to do is open Services (run &gt; services.msc), find scollector and start the service. If everything has worked the service should start and its status should be &#8216;Running&#8217;. If the service won&#8217;t start then check the Windows Event Viewer and navigate to Windows Logs &gt; Application.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"42\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-14.png?resize=640%2C42\\\" alt=\\\"\\\" class=\\\"wp-image-161\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-14.png?w=848 848w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-14.png?resize=300%2C20 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-14.png?resize=768%2C51 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-14.png?resize=720%2C48 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>If we now open our Bosun server and click Items our host should be listed under Hosts. Once clicked we should be greeted with every metric we could possibly need for our OS!<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"1179\\\" height=\\\"718\\\" src=\\\"https:\/\/i1.wp.com\/www.tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-15.png?fit=640%2C390&amp;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-162\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-15.png?w=1179 1179w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-15.png?resize=300%2C183 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-15.png?resize=768%2C468 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-15.png?resize=1024%2C624 1024w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-15.png?resize=720%2C438 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" \/><\/figure>\\n\\n\\n\\n<p>Clicking &#8216;Available Metrics&#8217; will show us everything that is being sent and we can use any of these to setup alerts.<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>I have previously written about how to send .net application data to <a href=\"https:\/\/bosun.org\/\">Bosun<\/a> however what if we wanted to send data from our OS to Bosun? Well for that we need <a href=\"http:\/\/bosun.org\/scollector\/\">Scollector<\/a>!<\/p>\n\n\n\n<br \/>\n\n\n\n<p>The first thing we need to do is download the correct binary for our OS, these can all be found on the Scollector homepage however for this article we will just be focusing on the Windows version. Once downloaded create a folder for Scollector on C:\\ (this can be anywhere really but this makes it nice and easy). One thing that also makes things easy is to rename the exe to just Scollector. Put the exe in the directory you have just made. Now open a Powershell session as administrator and run the following command to install Scollector as a Windows service.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>c:\\Scollector\\Scollector.exe -winsvc=\"install\"<\/code><\/pre>\n\n\n\n<p>Now we need to modify the service so it can connect to our Bosun server, for that we need to open the registry editor (run &gt; regedit) and navigate to&nbsp;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\scollector. We should see an entry called ImagePath which points to our Scollector exe.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"129\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-12.png?resize=640%2C129\" alt=\" class=\"wp-image-159\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-12.png?w=760 760w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-12.png?resize=300%2C60 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-12.png?resize=720%2C145 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>We now need to right click on this entry and select modify. Add the following parameter to the Value data (the ip and port correspond to your Bosun server).<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"450\" height=\"227\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-13.png?resize=450%2C227\" alt=\" class=\"wp-image-160\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-13.png?w=450 450w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-13.png?resize=300%2C151 300w\" sizes=\"(max-width: 450px) 100vw, 450px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Now all we need to do is open Services (run &gt; services.msc), find scollector and start the service. If everything has worked the service should start and its status should be &#8216;Running&#8217;. If the service won&#8217;t start then check the Windows Event Viewer and navigate to Windows Logs &gt; Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"42\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-14.png?resize=640%2C42\" alt=\" class=\"wp-image-161\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-14.png?w=848 848w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-14.png?resize=300%2C20 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-14.png?resize=768%2C51 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-14.png?resize=720%2C48 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>If we now open our Bosun server and click Items our host should be listed under Hosts. Once clicked we should be greeted with every metric we could possibly need for our OS!<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1179\" height=\"718\" src=\"https:\/\/i1.wp.com\/www.tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-15.png?fit=640%2C390&amp;ssl=1\" alt=\" class=\"wp-image-162\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-15.png?w=1179 1179w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-15.png?resize=300%2C183 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-15.png?resize=768%2C468 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-15.png?resize=1024%2C624 1024w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-15.png?resize=720%2C438 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" \/><\/figure>\n\n\n\n<p>Clicking &#8216;Available Metrics&#8217; will show us everything that is being sent and we can use any of these to setup alerts.<\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 13 Dec 2018 21:29:02 +0000","created_by":1,"updated_at":"Sun, 05 May 2019 14:55:33 +0000","updated_by":1,"published_at":"Thu, 13 Dec 2018 21:29:02 +0000","published_by":1},{"id":175,"title":"Configuring Bosun running inside a Docker container","slug":"configuring-docker-bosun","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>This is the third part in a series of articles regarding <a href=\\\"https:\/\/bosun.org\/\\\">Bosun<\/a>, the first two parts can be found <a href=\\\"http:\/\/tomaustin.xyz\/2018\/12\/11\/monitoring-c-applications-using-bosun\/\\\">here<\/a> and <a href=\\\"http:\/\/tomaustin.xyz\/2018\/12\/13\/sending-windows-data-to-bosun-using-scollector\/\\\">here<\/a>. Now that you have Bosun running and logging metrics from <a href=\\\"https:\/\/github.com\/StackExchange\/BosunReporter\\\">Bosun Reporter<\/a> and <a href=\\\"https:\/\/bosun.org\/scollector\/\\\">Scollector<\/a> we should look at configuration!<\/p>\\n\\n\\n\\n<br \/>\\n\\n\\n\\n<p>This article will cover configuration for Bosun running inside a Docker container, if you are running on Windows or Linux things will be a little different but ultimately you will want to locate bosun.toml and edit it with your favorite text editor. For Docker things are slightly more complicated but nothing we can&#8217;t manage. Firstly connect to your Docker server (I&#8217;d recommend putty and run the following command to list your containers:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo docker ps<\/code><\/pre>\\n\\n\\n\\n<br \/>\\n\\n\\n\\n<p>We should now be greeted with a list of all of the running containers on your Docker server<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"124\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-16.png?resize=640%2C124\\\" alt=\\\"\\\" class=\\\"wp-image-176\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-16.png?w=650 650w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-16.png?resize=300%2C58 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Ignore most of this, we are only concerned with the container id. Now connect to your container using the exec command.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo docker exec -it 10cbc024198e \/bin\/bash<\/code><\/pre>\\n\\n\\n\\n<p>Now all we need to do is edit bosun.toml using a text editor (I like nano) and set our configuration<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>nano \/data\/bosun.toml<\/code><\/pre>\\n\\n\\n\\n<p>At this point we should refer to the <a href=\\\"https:\/\/bosun.org\/system_configuration\\\">Bosun Configuration<\/a> documentation and set the options we need to set. Once we are happy we can save and exit (ctrl+o, enter, ctrl+x if you are using nano), exit the container shell by using the exit command and restart our container for the configuration to be applied.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo docker restart 10cbc024198e<\/code><\/pre>\\n\\n\\n\\n<br \/>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>This is the third part in a series of articles regarding <a href=\"https:\/\/bosun.org\/\">Bosun<\/a>, the first two parts can be found <a href=\"http:\/\/tomaustin.xyz\/2018\/12\/11\/monitoring-c-applications-using-bosun\/\">here<\/a> and <a href=\"http:\/\/tomaustin.xyz\/2018\/12\/13\/sending-windows-data-to-bosun-using-scollector\/\">here<\/a>. Now that you have Bosun running and logging metrics from <a href=\"https:\/\/github.com\/StackExchange\/BosunReporter\">Bosun Reporter<\/a> and <a href=\"https:\/\/bosun.org\/scollector\/\">Scollector<\/a> we should look at configuration!<\/p>\n\n\n\n<br \/>\n\n\n\n<p>This article will cover configuration for Bosun running inside a Docker container, if you are running on Windows or Linux things will be a little different but ultimately you will want to locate bosun.toml and edit it with your favorite text editor. For Docker things are slightly more complicated but nothing we can&#8217;t manage. Firstly connect to your Docker server (I&#8217;d recommend putty and run the following command to list your containers:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo docker ps<\/code><\/pre>\n\n\n\n<br \/>\n\n\n\n<p>We should now be greeted with a list of all of the running containers on your Docker server<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"124\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-16.png?resize=640%2C124\" alt=\" class=\"wp-image-176\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-16.png?w=650 650w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-16.png?resize=300%2C58 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Ignore most of this, we are only concerned with the container id. Now connect to your container using the exec command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo docker exec -it 10cbc024198e \/bin\/bash<\/code><\/pre>\n\n\n\n<p>Now all we need to do is edit bosun.toml using a text editor (I like nano) and set our configuration<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>nano \/data\/bosun.toml<\/code><\/pre>\n\n\n\n<p>At this point we should refer to the <a href=\"https:\/\/bosun.org\/system_configuration\">Bosun Configuration<\/a> documentation and set the options we need to set. Once we are happy we can save and exit (ctrl+o, enter, ctrl+x if you are using nano), exit the container shell by using the exit command and restart our container for the configuration to be applied.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo docker restart 10cbc024198e<\/code><\/pre>\n\n\n\n<br \/>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 17 Dec 2018 20:44:09 +0000","created_by":1,"updated_at":"Sun, 05 May 2019 14:55:53 +0000","updated_by":1,"published_at":"Mon, 17 Dec 2018 20:44:09 +0000","published_by":1},{"id":204,"title":"Load Balancing Azure DevOps Server using HAProxy","slug":"load-balancing-azure-devops-server-using-haproxy","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>I have used and managed<a href=\\\"https:\/\/azure.microsoft.com\/en-us\/services\/devops\/server\/\\\"> Azure DevOps Server<\/a> (previous Team Foundation Server) for several  years and now that my daily role includes doing more and more &#8216;DevOps&#8217; stuff I decided it was time to look into load balancing ADS. I&#8217;ve previously looked at this a few years ago and found one out-of-date tutorial which used <a href=\\\"https:\/\/docs.microsoft.com\/en-us\/windows-server\/networking\/technologies\/network-load-balancing\\\">Windows Network Load Balancing<\/a> which did get it working however I&#8217;ve been wanting to work with <a href=\\\"http:\/\/www.haproxy.org\/\\\">HAProxy<\/a> for a while and now seemed like the perfect opportunity.<\/p>\\n\\n\\n\\n<p>This tutorial will cover installing ADS and pointing it to an existing SQL Server and then setting up HAProxy to act as a load balancer. Before starting you will need a configured Domain Controller and an existing SQL Server instance connected to the domain. We will configure ADS to have multiple application tiers and then use HAProxy in a round-robin configuration to load balance between them. You will need two VM&#8217;s (or more if you want higher availability) for your ADS Application Tiers, these also need to be joined to the domain. For HAProxy I will be using Ubuntu but pretty much any Linux distro you prefer will be capable.  In total you should have something like this (everything is running Windows Server 2016 apart from HAP which is Ubuntu 18.04 LTS):<\/p>\\n\\n\\n\\n<p><\/p>\\n\\n\\n\\n<p>DC &#8211; Domain Controller<\/p>\\n\\n\\n\\n<p>SQL &#8211; SQL Server<\/p>\\n\\n\\n\\n<p>ADS1 &#8211; Azure DevOps Server Application Tier 1<\/p>\\n\\n\\n\\n<p>ADS2 &#8211; Azure DevOps Server Application Tier 2<\/p>\\n\\n\\n\\n<p>HAP &#8211; HAProxy server<\/p>\\n\\n\\n\\n<h2>Configuring Azure DevOps Server Application Tiers<\/h2>\\n\\n\\n\\n<p>Now that you have your infrastructure created we can get Azure DevOps Server installed. Start by remoting onto ADS1, downloading <a href=\\\"https:\/\/azure.microsoft.com\/en-us\/services\/devops\/server\/\\\">Azure DevOps Server<\/a> and starting the installation. After it has acquired the components it needs you should be at greeted with this prompt:<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"449\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/startwizard.png?resize=640%2C449\\\" alt=\\\"\\\" class=\\\"wp-image-212\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/startwizard.png?w=912 912w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/startwizard.png?resize=300%2C211 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/startwizard.png?resize=768%2C539 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/startwizard.png?resize=720%2C505 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Hit &#8216;Start Wizard&#8217; and then hit Next, when prompted about Deployment Type select &#8216;This is a new Azure DevOps Server delpoyment&#8217;.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"438\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/deploy.png?resize=640%2C438\\\" alt=\\\"\\\" class=\\\"wp-image-213\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/deploy.png?w=924 924w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/deploy.png?resize=300%2C205 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/deploy.png?resize=768%2C525 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/deploy.png?resize=720%2C492 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Hit next again until prompted about deployment scenario, I recommend choosing Advanced as it will give you a bit more control over how things are configured.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"445\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/advanced.png?resize=640%2C445\\\" alt=\\\"\\\" class=\\\"wp-image-214\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/advanced.png?w=920 920w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/advanced.png?resize=300%2C208 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/advanced.png?resize=768%2C533 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/advanced.png?resize=720%2C500 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Next you will be prompted to choose your language and then database configuration. When prompted to specify the SQL Server Instance enter the name of your SQL Server. I recommend you hit &#8216;Test&#8217; to ensure everything is working correctly. If everything is good you should get a green tick.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"438\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/sql.png?resize=640%2C438\\\" alt=\\\"\\\" class=\\\"wp-image-215\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/sql.png?w=926 926w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/sql.png?resize=300%2C205 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/sql.png?resize=768%2C526 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/sql.png?resize=720%2C493 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>On the next page you will be asked about the Service Account, I have added a user to the AD for my service account however you can use a system account if you wish.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"441\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/serviceaccount.png?resize=640%2C441\\\" alt=\\\"\\\" class=\\\"wp-image-217\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/serviceaccount.png?w=921 921w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/serviceaccount.png?resize=300%2C207 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/serviceaccount.png?resize=768%2C529 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/serviceaccount.png?resize=720%2C496 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>On the Application Tier page I generally leave everything at its default value however if you are installing into a production environment I recommend you configure your site settings and also specify the cache location.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"443\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/aptier.png?resize=640%2C443\\\" alt=\\\"\\\" class=\\\"wp-image-218\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/aptier.png?w=921 921w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/aptier.png?resize=300%2C207 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/aptier.png?resize=768%2C531 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/aptier.png?resize=720%2C498 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>On the next page you can configure Search, you will need to specify a user for search. If you are installing this in a production environment I highly recommend you set the search index location to a high speed storage location (the faster the better). <\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"498\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/search.png?resize=640%2C498\\\" alt=\\\"\\\" class=\\\"wp-image-219\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/search.png?w=1013 1013w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/search.png?resize=300%2C233 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/search.png?resize=768%2C597 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/search.png?resize=720%2C560 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>The next page allows you to configure reporting, I will not be enabling reporting for this installation so I will leave this unticked.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"495\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/reporting.png?resize=640%2C495\\\" alt=\\\"\\\" class=\\\"wp-image-221\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/reporting.png?w=1005 1005w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/reporting.png?resize=300%2C232 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/reporting.png?resize=768%2C595 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/reporting.png?resize=720%2C557 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>We&#8217;re nearly at the end of configuration! Make sure &#8216;Create a new team project collection&#8217; is enabled and enter a name for your collection. I am just using the default value however you can name yours whatever you want.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"500\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/collection.png?resize=640%2C500\\\" alt=\\\"\\\" class=\\\"wp-image-222\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/collection.png?w=1007 1007w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/collection.png?resize=300%2C234 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/collection.png?resize=768%2C599 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/collection.png?resize=720%2C562 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>The next page will give you chance to review all of your settings. Once you are happy with everything press &#8216;Verify&#8217;, this will run readiness checks to check everything. If you have configured Search you may be prompted to install Java 8 so tick to install if required.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"468\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/readiness.png?resize=640%2C468\\\" alt=\\\"\\\" class=\\\"wp-image-223\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/readiness.png?w=944 944w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/readiness.png?resize=300%2C220 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/readiness.png?resize=768%2C562 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/readiness.png?resize=720%2C527 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>I have also been prompted about having less than the recommended 4GB of memory but this is fine as this is just a test server. When you are ready hit &#8216;Configure&#8217;.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"471\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuring.png?resize=640%2C471\\\" alt=\\\"\\\" class=\\\"wp-image-224\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuring.png?w=942 942w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuring.png?resize=300%2C221 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuring.png?resize=768%2C565 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuring.png?resize=720%2C530 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Go and grab and coffee and wait for the configuration to complete, once done you should be greeted with lots of green ticks!<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"472\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/1done.png?resize=640%2C472\\\" alt=\\\"\\\" class=\\\"wp-image-232\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/1done.png?w=941 941w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/1done.png?resize=300%2C221 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/1done.png?resize=768%2C566 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/1done.png?resize=720%2C531 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Press &#8216;Next&#8217; and then &#8216;Close&#8217;. Lets check everything is working by navigating to our instance. If everything has gone to plan you should be asked for credentials and then be asked to create a project.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"1219\\\" height=\\\"949\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/connected.png?fit=640%2C498&amp;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-234\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/connected.png?w=1219 1219w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/connected.png?resize=300%2C234 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/connected.png?resize=768%2C598 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/connected.png?resize=1024%2C797 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/connected.png?resize=720%2C561 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" \/><\/figure>\\n\\n\\n\\n<p>Now we need to install our second application instance. Remote onto ADS2 and start the Azure DevOps Server installation, when prompted about deployment type choose &#8216;I have existing databases to use for this Azure DevOps Server deployment&#8217;.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"446\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/existingdb.png?resize=640%2C446\\\" alt=\\\"\\\" class=\\\"wp-image-239\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/existingdb.png?w=915 915w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/existingdb.png?resize=300%2C209 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/existingdb.png?resize=768%2C535 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/existingdb.png?resize=720%2C501 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Enter the name of your SQL Server and then hit &#8216;List Available Databases&#8217;, select your previously created database and press &#8216;Next&#8217;.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"442\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/exitingdatabases.png?resize=640%2C442\\\" alt=\\\"\\\" class=\\\"wp-image-240\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/exitingdatabases.png?w=916 916w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/exitingdatabases.png?resize=300%2C207 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/exitingdatabases.png?resize=768%2C530 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/exitingdatabases.png?resize=720%2C497 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Like when we configured ADS1 you will be asked to choose a deployment scenario, I will be choosing &#8216;Basic&#8217; however if you want to dive deeper into the settings choose &#8216;Advanced&#8217;.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"437\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/basic.png?resize=640%2C437\\\" alt=\\\"\\\" class=\\\"wp-image-241\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/basic.png?w=926 926w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/basic.png?resize=300%2C205 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/basic.png?resize=768%2C524 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/basic.png?resize=720%2C491 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Next enter the service account information you previously used when configuring ADS1<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"440\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/service2.png?resize=640%2C440\\\" alt=\\\"\\\" class=\\\"wp-image-242\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/service2.png?w=917 917w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/service2.png?resize=300%2C206 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/service2.png?resize=768%2C528 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/service2.png?resize=720%2C495 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Configure the web settings and the cache location to your liking, I&#8217;ll be leaving mine at the default values however as previously stated if you are installing in a production environment I suggest setting the File Cache Location.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"441\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/cache.png?resize=640%2C441\\\" alt=\\\"\\\" class=\\\"wp-image-243\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/cache.png?w=919 919w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/cache.png?resize=300%2C207 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/cache.png?resize=768%2C529 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/cache.png?resize=720%2C496 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Double check your settings and press verify, this shouldn&#8217;t take long as there is much less to verify this time. <\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"442\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/verifying.png?resize=640%2C442\\\" alt=\\\"\\\" class=\\\"wp-image-245\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/verifying.png?w=916 916w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/verifying.png?resize=300%2C207 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/verifying.png?resize=768%2C530 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/verifying.png?resize=720%2C497 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>You will get a message stating the Public URL does not resolve to this machine, this is expected as we will be load balancing between our application tiers. Confirm you have read the warning and would like to continue anyway and press &#8216;Configure&#8217;.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"441\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/publicurl.png?resize=640%2C441\\\" alt=\\\"\\\" class=\\\"wp-image-247\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/publicurl.png?w=915 915w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/publicurl.png?resize=300%2C207 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/publicurl.png?resize=768%2C530 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/publicurl.png?resize=720%2C497 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>This shouldn&#8217;t take too long so sit back and wait for it to complete.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"443\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuringads2.png?resize=640%2C443\\\" alt=\\\"\\\" class=\\\"wp-image-248\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuringads2.png?w=917 917w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuringads2.png?resize=300%2C208 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuringads2.png?resize=768%2C532 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuringads2.png?resize=720%2C499 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Once completed press &#8216;Next&#8217; and &#8216;Close&#8217;. In the Azure DevOps Server Administration Console select &#8216;Application Tier&#8217; and scroll down to &#8216;Application Tiers&#8217;, both our instances should be visible.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"427\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/tiers.png?resize=640%2C427\\\" alt=\\\"\\\" class=\\\"wp-image-253\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/tiers.png?w=977 977w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/tiers.png?resize=300%2C200 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/tiers.png?resize=768%2C513 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/tiers.png?resize=720%2C480 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>We can check ADS2 is working correctly by navigating to the instance using your browser. If everything is working the ADS Projects Home should be shown.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"1211\\\" height=\\\"942\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/ads2.png?fit=640%2C498&amp;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-254\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/ads2.png?w=1211 1211w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/ads2.png?resize=300%2C233 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/ads2.png?resize=768%2C597 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/ads2.png?resize=1024%2C797 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/ads2.png?resize=720%2C560 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" \/><\/figure>\\n\\n\\n\\n<h2>Installing and Configuring HAProxy<\/h2>\\n\\n\\n\\n<p>Now we can start congfiguring HAProxy! Start by SSHing into your &#8216;nix server and running apt-get update to make sure everything is up-to-date.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"409\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapupdate.png?resize=640%2C409\\\" alt=\\\"\\\" class=\\\"wp-image-256\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapupdate.png?w=665 665w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapupdate.png?resize=300%2C192 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Once done run the following command to install HAProxy.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo apt-get install haproxy<\/code><\/pre>\\n\\n\\n\\n<p>Once HAProxy is downloaded and installed we need to enable the init script, this will allow HAProxy to autostart. Run the following command to edit the script with Nano.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/etc\/default\/haproxy<\/code><\/pre>\\n\\n\\n\\n<p>Append Enabled=1 to the file and then save and close (ctrl+o, enter, ctrl+x).<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"408\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/initenabled.png?resize=640%2C408\\\" alt=\\\"\\\" class=\\\"wp-image-257\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/initenabled.png?w=666 666w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/initenabled.png?resize=300%2C191 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Before we start configuring HAProxy lets make a backup of the config file in case anything goes wrong.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>cd \/etc\/haproxy; sudo cp haproxy.cfg haproxy.cfg.orig<\/code><\/pre>\\n\\n\\n\\n<p>Now lets open the config file<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/etc\/haproxy\/haproxy.cfg<\/code><\/pre>\\n\\n\\n\\n<p>Under defaults change mode to tcp and option to tcplog. This will configure HAProxy to perform layer 4 load balancing.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"405\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/layer4.png?resize=640%2C405\\\" alt=\\\"\\\" class=\\\"wp-image-258\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/layer4.png?w=664 664w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/layer4.png?resize=300%2C190 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Now we need to configure our frontend and backends, at the end of the config file add the following configuration (enter the ip address of your HAProxy instance where I have blocked mine out). I wont go into detail what these settings do but read <a href=\\\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-use-haproxy-as-a-layer-4-load-balancer-for-wordpress-application-servers-on-ubuntu-14-04\\\">this excellent article<\/a> on Digital Ocean for more info.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"406\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/frontend.png?resize=640%2C406\\\" alt=\\\"\\\" class=\\\"wp-image-260\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/frontend.png?w=665 665w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/frontend.png?resize=300%2C190 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Now lets add our backends! Put the ip addresses of your ADS instances where I have blocked mine out.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"407\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/backends-1.png?resize=640%2C407\\\" alt=\\\"\\\" class=\\\"wp-image-266\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/backends-1.png?w=659 659w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/backends-1.png?resize=300%2C191 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Save and Exit and we&#8217;re almost done! Let&#8217;s just restart HAProxy to enable our changes.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo service haproxy restart<\/code><\/pre>\\n\\n\\n\\n<p>If we now navigate to the IP address of our HAProxy server we should be prompted to enter our ADS credentials and then be able to see the Projects Home Page. We&#8217;re now load balancing between our ADS Instances!<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"1208\\\" height=\\\"940\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapads.png?fit=640%2C498&amp;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-263\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapads.png?w=1208 1208w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapads.png?resize=300%2C233 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapads.png?resize=768%2C598 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapads.png?resize=1024%2C797 1024w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapads.png?resize=720%2C560 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" \/><\/figure>\\n\\n\\n\\n<h2>Adding a DNS Record<\/h2>\\n\\n\\n\\n<p>Entering the IP address of our HAProxy server is not the most user-friendly thing so there are a few more changes we can make to make things easier. Remote into your domain controller and open &#8216;DNS&#8217;. Expand &#8216;Forward Lookup Zones&#8217;, right click and select &#8216;New Host&#8217;. Enter &#8216;ads&#8217; in &#8216;Name&#8217; and enter the IP address of your HAProxy server in the &#8216;IP address&#8217; box.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"444\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/dns.png?resize=640%2C444\\\" alt=\\\"\\\" class=\\\"wp-image-267\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/dns.png?w=760 760w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/dns.png?resize=300%2C208 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/dns.png?resize=720%2C499 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Hit &#8216;Add host&#8217; and then press &#8216;Done&#8217;. You should now be able to access ADS by typing ADS in your browsers url bar.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"1207\\\" height=\\\"937\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/adsurl.png?fit=640%2C497&amp;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-268\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/adsurl.png?w=1207 1207w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/adsurl.png?resize=300%2C233 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/adsurl.png?resize=768%2C596 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/adsurl.png?resize=1024%2C795 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/adsurl.png?resize=720%2C559 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" \/><\/figure>\\n\\n\\n\\n<p>Almost there! The last thing to do is change the Public URL of ADS. Remote back onto one of your ADS instances and open the Azure DevOps Server Administration Console. Click &#8216;Application Tier&#8217; and select &#8216;Change Public URL&#8217; on the right. Enter &#8216;ads&#8217; in the field and press &#8216;Test&#8217;, you should see a tick if everything is good!<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"428\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/allgood.png?resize=640%2C428\\\" alt=\\\"\\\" class=\\\"wp-image-270\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/allgood.png?w=967 967w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/allgood.png?resize=300%2C200 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/allgood.png?resize=768%2C513 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/allgood.png?resize=720%2C481 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>That&#8217;s it! When your users browse to http:\/\/ads they are being load balanced between both of the ADS Instances. We could take things further by adding a second HAProxy instance to take over in the event our first one failed and even add a SQL cluster but both of these our outside the scope of this article. <\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>I have used and managed<a href=\"https:\/\/azure.microsoft.com\/en-us\/services\/devops\/server\/\"> Azure DevOps Server<\/a> (previous Team Foundation Server) for several  years and now that my daily role includes doing more and more &#8216;DevOps&#8217; stuff I decided it was time to look into load balancing ADS. I&#8217;ve previously looked at this a few years ago and found one out-of-date tutorial which used <a href=\"https:\/\/docs.microsoft.com\/en-us\/windows-server\/networking\/technologies\/network-load-balancing\">Windows Network Load Balancing<\/a> which did get it working however I&#8217;ve been wanting to work with <a href=\"http:\/\/www.haproxy.org\/\">HAProxy<\/a> for a while and now seemed like the perfect opportunity.<\/p>\n\n\n\n<p>This tutorial will cover installing ADS and pointing it to an existing SQL Server and then setting up HAProxy to act as a load balancer. Before starting you will need a configured Domain Controller and an existing SQL Server instance connected to the domain. We will configure ADS to have multiple application tiers and then use HAProxy in a round-robin configuration to load balance between them. You will need two VM&#8217;s (or more if you want higher availability) for your ADS Application Tiers, these also need to be joined to the domain. For HAProxy I will be using Ubuntu but pretty much any Linux distro you prefer will be capable.  In total you should have something like this (everything is running Windows Server 2016 apart from HAP which is Ubuntu 18.04 LTS):<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p>DC &#8211; Domain Controller<\/p>\n\n\n\n<p>SQL &#8211; SQL Server<\/p>\n\n\n\n<p>ADS1 &#8211; Azure DevOps Server Application Tier 1<\/p>\n\n\n\n<p>ADS2 &#8211; Azure DevOps Server Application Tier 2<\/p>\n\n\n\n<p>HAP &#8211; HAProxy server<\/p>\n\n\n\n<h2>Configuring Azure DevOps Server Application Tiers<\/h2>\n\n\n\n<p>Now that you have your infrastructure created we can get Azure DevOps Server installed. Start by remoting onto ADS1, downloading <a href=\"https:\/\/azure.microsoft.com\/en-us\/services\/devops\/server\/\">Azure DevOps Server<\/a> and starting the installation. After it has acquired the components it needs you should be at greeted with this prompt:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"449\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/startwizard.png?resize=640%2C449\" alt=\" class=\"wp-image-212\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/startwizard.png?w=912 912w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/startwizard.png?resize=300%2C211 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/startwizard.png?resize=768%2C539 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/startwizard.png?resize=720%2C505 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Hit &#8216;Start Wizard&#8217; and then hit Next, when prompted about Deployment Type select &#8216;This is a new Azure DevOps Server delpoyment&#8217;.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"438\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/deploy.png?resize=640%2C438\" alt=\" class=\"wp-image-213\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/deploy.png?w=924 924w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/deploy.png?resize=300%2C205 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/deploy.png?resize=768%2C525 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/deploy.png?resize=720%2C492 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Hit next again until prompted about deployment scenario, I recommend choosing Advanced as it will give you a bit more control over how things are configured.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"445\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/advanced.png?resize=640%2C445\" alt=\" class=\"wp-image-214\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/advanced.png?w=920 920w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/advanced.png?resize=300%2C208 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/advanced.png?resize=768%2C533 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/advanced.png?resize=720%2C500 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Next you will be prompted to choose your language and then database configuration. When prompted to specify the SQL Server Instance enter the name of your SQL Server. I recommend you hit &#8216;Test&#8217; to ensure everything is working correctly. If everything is good you should get a green tick.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"438\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/sql.png?resize=640%2C438\" alt=\" class=\"wp-image-215\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/sql.png?w=926 926w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/sql.png?resize=300%2C205 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/sql.png?resize=768%2C526 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/sql.png?resize=720%2C493 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>On the next page you will be asked about the Service Account, I have added a user to the AD for my service account however you can use a system account if you wish.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"441\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/serviceaccount.png?resize=640%2C441\" alt=\" class=\"wp-image-217\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/serviceaccount.png?w=921 921w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/serviceaccount.png?resize=300%2C207 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/serviceaccount.png?resize=768%2C529 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/serviceaccount.png?resize=720%2C496 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>On the Application Tier page I generally leave everything at its default value however if you are installing into a production environment I recommend you configure your site settings and also specify the cache location.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"443\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/aptier.png?resize=640%2C443\" alt=\" class=\"wp-image-218\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/aptier.png?w=921 921w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/aptier.png?resize=300%2C207 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/aptier.png?resize=768%2C531 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/aptier.png?resize=720%2C498 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>On the next page you can configure Search, you will need to specify a user for search. If you are installing this in a production environment I highly recommend you set the search index location to a high speed storage location (the faster the better). <\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"498\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/search.png?resize=640%2C498\" alt=\" class=\"wp-image-219\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/search.png?w=1013 1013w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/search.png?resize=300%2C233 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/search.png?resize=768%2C597 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/search.png?resize=720%2C560 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>The next page allows you to configure reporting, I will not be enabling reporting for this installation so I will leave this unticked.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"495\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/reporting.png?resize=640%2C495\" alt=\" class=\"wp-image-221\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/reporting.png?w=1005 1005w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/reporting.png?resize=300%2C232 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/reporting.png?resize=768%2C595 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/reporting.png?resize=720%2C557 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>We&#8217;re nearly at the end of configuration! Make sure &#8216;Create a new team project collection&#8217; is enabled and enter a name for your collection. I am just using the default value however you can name yours whatever you want.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"500\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/collection.png?resize=640%2C500\" alt=\" class=\"wp-image-222\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/collection.png?w=1007 1007w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/collection.png?resize=300%2C234 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/collection.png?resize=768%2C599 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/collection.png?resize=720%2C562 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>The next page will give you chance to review all of your settings. Once you are happy with everything press &#8216;Verify&#8217;, this will run readiness checks to check everything. If you have configured Search you may be prompted to install Java 8 so tick to install if required.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"468\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/readiness.png?resize=640%2C468\" alt=\" class=\"wp-image-223\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/readiness.png?w=944 944w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/readiness.png?resize=300%2C220 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/readiness.png?resize=768%2C562 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/readiness.png?resize=720%2C527 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>I have also been prompted about having less than the recommended 4GB of memory but this is fine as this is just a test server. When you are ready hit &#8216;Configure&#8217;.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"471\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuring.png?resize=640%2C471\" alt=\" class=\"wp-image-224\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuring.png?w=942 942w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuring.png?resize=300%2C221 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuring.png?resize=768%2C565 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuring.png?resize=720%2C530 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Go and grab and coffee and wait for the configuration to complete, once done you should be greeted with lots of green ticks!<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"472\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/1done.png?resize=640%2C472\" alt=\" class=\"wp-image-232\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/1done.png?w=941 941w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/1done.png?resize=300%2C221 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/1done.png?resize=768%2C566 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/1done.png?resize=720%2C531 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Press &#8216;Next&#8217; and then &#8216;Close&#8217;. Lets check everything is working by navigating to our instance. If everything has gone to plan you should be asked for credentials and then be asked to create a project.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1219\" height=\"949\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/connected.png?fit=640%2C498&amp;ssl=1\" alt=\" class=\"wp-image-234\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/connected.png?w=1219 1219w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/connected.png?resize=300%2C234 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/connected.png?resize=768%2C598 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/connected.png?resize=1024%2C797 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/connected.png?resize=720%2C561 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" \/><\/figure>\n\n\n\n<p>Now we need to install our second application instance. Remote onto ADS2 and start the Azure DevOps Server installation, when prompted about deployment type choose &#8216;I have existing databases to use for this Azure DevOps Server deployment&#8217;.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"446\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/existingdb.png?resize=640%2C446\" alt=\" class=\"wp-image-239\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/existingdb.png?w=915 915w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/existingdb.png?resize=300%2C209 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/existingdb.png?resize=768%2C535 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/existingdb.png?resize=720%2C501 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Enter the name of your SQL Server and then hit &#8216;List Available Databases&#8217;, select your previously created database and press &#8216;Next&#8217;.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"442\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/exitingdatabases.png?resize=640%2C442\" alt=\" class=\"wp-image-240\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/exitingdatabases.png?w=916 916w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/exitingdatabases.png?resize=300%2C207 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/exitingdatabases.png?resize=768%2C530 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/exitingdatabases.png?resize=720%2C497 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Like when we configured ADS1 you will be asked to choose a deployment scenario, I will be choosing &#8216;Basic&#8217; however if you want to dive deeper into the settings choose &#8216;Advanced&#8217;.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"437\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/basic.png?resize=640%2C437\" alt=\" class=\"wp-image-241\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/basic.png?w=926 926w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/basic.png?resize=300%2C205 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/basic.png?resize=768%2C524 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/basic.png?resize=720%2C491 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Next enter the service account information you previously used when configuring ADS1<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"440\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/service2.png?resize=640%2C440\" alt=\" class=\"wp-image-242\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/service2.png?w=917 917w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/service2.png?resize=300%2C206 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/service2.png?resize=768%2C528 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/service2.png?resize=720%2C495 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Configure the web settings and the cache location to your liking, I&#8217;ll be leaving mine at the default values however as previously stated if you are installing in a production environment I suggest setting the File Cache Location.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"441\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/cache.png?resize=640%2C441\" alt=\" class=\"wp-image-243\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/cache.png?w=919 919w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/cache.png?resize=300%2C207 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/cache.png?resize=768%2C529 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/cache.png?resize=720%2C496 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Double check your settings and press verify, this shouldn&#8217;t take long as there is much less to verify this time. <\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"442\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/verifying.png?resize=640%2C442\" alt=\" class=\"wp-image-245\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/verifying.png?w=916 916w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/verifying.png?resize=300%2C207 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/verifying.png?resize=768%2C530 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/verifying.png?resize=720%2C497 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>You will get a message stating the Public URL does not resolve to this machine, this is expected as we will be load balancing between our application tiers. Confirm you have read the warning and would like to continue anyway and press &#8216;Configure&#8217;.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"441\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/publicurl.png?resize=640%2C441\" alt=\" class=\"wp-image-247\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/publicurl.png?w=915 915w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/publicurl.png?resize=300%2C207 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/publicurl.png?resize=768%2C530 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/publicurl.png?resize=720%2C497 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>This shouldn&#8217;t take too long so sit back and wait for it to complete.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"443\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuringads2.png?resize=640%2C443\" alt=\" class=\"wp-image-248\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuringads2.png?w=917 917w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuringads2.png?resize=300%2C208 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuringads2.png?resize=768%2C532 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/configuringads2.png?resize=720%2C499 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Once completed press &#8216;Next&#8217; and &#8216;Close&#8217;. In the Azure DevOps Server Administration Console select &#8216;Application Tier&#8217; and scroll down to &#8216;Application Tiers&#8217;, both our instances should be visible.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"427\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/tiers.png?resize=640%2C427\" alt=\" class=\"wp-image-253\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/tiers.png?w=977 977w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/tiers.png?resize=300%2C200 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/tiers.png?resize=768%2C513 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/tiers.png?resize=720%2C480 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>We can check ADS2 is working correctly by navigating to the instance using your browser. If everything is working the ADS Projects Home should be shown.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1211\" height=\"942\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/ads2.png?fit=640%2C498&amp;ssl=1\" alt=\" class=\"wp-image-254\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/ads2.png?w=1211 1211w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/ads2.png?resize=300%2C233 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/ads2.png?resize=768%2C597 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/ads2.png?resize=1024%2C797 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/ads2.png?resize=720%2C560 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" \/><\/figure>\n\n\n\n<h2>Installing and Configuring HAProxy<\/h2>\n\n\n\n<p>Now we can start congfiguring HAProxy! Start by SSHing into your &#8216;nix server and running apt-get update to make sure everything is up-to-date.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"409\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapupdate.png?resize=640%2C409\" alt=\" class=\"wp-image-256\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapupdate.png?w=665 665w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapupdate.png?resize=300%2C192 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Once done run the following command to install HAProxy.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install haproxy<\/code><\/pre>\n\n\n\n<p>Once HAProxy is downloaded and installed we need to enable the init script, this will allow HAProxy to autostart. Run the following command to edit the script with Nano.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/etc\/default\/haproxy<\/code><\/pre>\n\n\n\n<p>Append Enabled=1 to the file and then save and close (ctrl+o, enter, ctrl+x).<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"408\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/initenabled.png?resize=640%2C408\" alt=\" class=\"wp-image-257\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/initenabled.png?w=666 666w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/initenabled.png?resize=300%2C191 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Before we start configuring HAProxy lets make a backup of the config file in case anything goes wrong.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd \/etc\/haproxy; sudo cp haproxy.cfg haproxy.cfg.orig<\/code><\/pre>\n\n\n\n<p>Now lets open the config file<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/etc\/haproxy\/haproxy.cfg<\/code><\/pre>\n\n\n\n<p>Under defaults change mode to tcp and option to tcplog. This will configure HAProxy to perform layer 4 load balancing.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"405\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/layer4.png?resize=640%2C405\" alt=\" class=\"wp-image-258\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/layer4.png?w=664 664w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/layer4.png?resize=300%2C190 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Now we need to configure our frontend and backends, at the end of the config file add the following configuration (enter the ip address of your HAProxy instance where I have blocked mine out). I wont go into detail what these settings do but read <a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-use-haproxy-as-a-layer-4-load-balancer-for-wordpress-application-servers-on-ubuntu-14-04\">this excellent article<\/a> on Digital Ocean for more info.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"406\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/frontend.png?resize=640%2C406\" alt=\" class=\"wp-image-260\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/frontend.png?w=665 665w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/frontend.png?resize=300%2C190 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Now lets add our backends! Put the ip addresses of your ADS instances where I have blocked mine out.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"407\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/backends-1.png?resize=640%2C407\" alt=\" class=\"wp-image-266\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/backends-1.png?w=659 659w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/backends-1.png?resize=300%2C191 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Save and Exit and we&#8217;re almost done! Let&#8217;s just restart HAProxy to enable our changes.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo service haproxy restart<\/code><\/pre>\n\n\n\n<p>If we now navigate to the IP address of our HAProxy server we should be prompted to enter our ADS credentials and then be able to see the Projects Home Page. We&#8217;re now load balancing between our ADS Instances!<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1208\" height=\"940\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapads.png?fit=640%2C498&amp;ssl=1\" alt=\" class=\"wp-image-263\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapads.png?w=1208 1208w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapads.png?resize=300%2C233 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapads.png?resize=768%2C598 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapads.png?resize=1024%2C797 1024w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/hapads.png?resize=720%2C560 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" \/><\/figure>\n\n\n\n<h2>Adding a DNS Record<\/h2>\n\n\n\n<p>Entering the IP address of our HAProxy server is not the most user-friendly thing so there are a few more changes we can make to make things easier. Remote into your domain controller and open &#8216;DNS&#8217;. Expand &#8216;Forward Lookup Zones&#8217;, right click and select &#8216;New Host&#8217;. Enter &#8216;ads&#8217; in &#8216;Name&#8217; and enter the IP address of your HAProxy server in the &#8216;IP address&#8217; box.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"444\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/dns.png?resize=640%2C444\" alt=\" class=\"wp-image-267\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/dns.png?w=760 760w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/dns.png?resize=300%2C208 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/dns.png?resize=720%2C499 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Hit &#8216;Add host&#8217; and then press &#8216;Done&#8217;. You should now be able to access ADS by typing ADS in your browsers url bar.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1207\" height=\"937\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/adsurl.png?fit=640%2C497&amp;ssl=1\" alt=\" class=\"wp-image-268\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/adsurl.png?w=1207 1207w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/adsurl.png?resize=300%2C233 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/adsurl.png?resize=768%2C596 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/adsurl.png?resize=1024%2C795 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/adsurl.png?resize=720%2C559 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" \/><\/figure>\n\n\n\n<p>Almost there! The last thing to do is change the Public URL of ADS. Remote back onto one of your ADS instances and open the Azure DevOps Server Administration Console. Click &#8216;Application Tier&#8217; and select &#8216;Change Public URL&#8217; on the right. Enter &#8216;ads&#8217; in the field and press &#8216;Test&#8217;, you should see a tick if everything is good!<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"428\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/allgood.png?resize=640%2C428\" alt=\" class=\"wp-image-270\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/allgood.png?w=967 967w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/allgood.png?resize=300%2C200 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/allgood.png?resize=768%2C513 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/04\/allgood.png?resize=720%2C481 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>That&#8217;s it! When your users browse to http:\/\/ads they are being load balanced between both of the ADS Instances. We could take things further by adding a second HAProxy instance to take over in the event our first one failed and even add a SQL cluster but both of these our outside the scope of this article. <\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 08 Apr 2019 12:57:54 +0000","created_by":1,"updated_at":"Fri, 12 Apr 2019 17:28:31 +0000","updated_by":1,"published_at":"Mon, 08 Apr 2019 12:57:54 +0000","published_by":1},{"id":288,"title":"Enabling HTTPS in Azure DevOps Server","slug":"temp-slug-17","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"","feature_image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 22 Apr 2019 13:57:13 +0000","created_by":1,"updated_at":"Mon, 22 Apr 2019 13:57:13 +0000","updated_by":1,"published_at":"","published_by":1},{"id":290,"title":"Escaping single quotes in WIQL","slug":"temp-slug-18","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"","feature_image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 25 Apr 2019 11:27:41 +0000","created_by":1,"updated_at":"Thu, 25 Apr 2019 11:27:41 +0000","updated_by":1,"published_at":"","published_by":1},{"id":292,"title":"Updating Bosun 0.6.0-Pre to 0.8.0-Preview","slug":"temp-slug-19","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>This article will cover updating the Bosun 0.6.0-Pre docker image to 0.8.0-Preview (the latest version at time of writing).<\/p>\\n\\n\\n\\n<p>The latest docker image for Bosun provided by <a href=\\\"https:\/\/hub.docker.com\/r\/stackexchange\/bosun\/tags\\\">Stack Exchange is 0.6.0-pre <\/a>which is now a few versions behind the released version so if we want to make use of all the new features and bug fixes there are a few things we need to do.<\/p>\\n\\n\\n\\n<p>Let&#8217;s start by pulling the 0.6.0-Pre image from Docker Hub and creating a container.<\/p>\\n\\n\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\ndocker run -d -p 4242:4242 -p 8070:8070 stackexchange\/bosun:0.6.0-pre\\n<\/pre>\\n\\n\\n<p>We should now be able to access the 0.6.0-Pre instance by navigating to our hosts IP address with post 8070 specified.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"194\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=640%2C194\\\" alt=\\\"\\\" class=\\\"wp-image-137\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=1024%2C310 1024w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=300%2C91 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=768%2C233 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=720%2C218 720w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?w=1205 1205w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>The Stack Exchange Bosun repository does list upgrade instructions so let&#8217;s start the upgrade process by following them. Enter your docker instance using the following command:<\/p>\\n\\n\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\ndocker exec -it &lt;id&gt; bash\\n<\/pre>\\n\\n\\n<p>&lt;id> should be the id or name of your Bosun docker container, if you don&#8217;t know what those are then run the list container command to show all your running containers.<\/p>\\n\\n\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\ndocker container ls\\n<\/pre>\\n\\n\\n<p>Now that we have entered the container we need to install wget so we can pull the latest Bosun binaries later.<\/p>\\n\\n\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\napt-get update &amp;amp;&amp;amp; apt-get install -y wget\\n<\/pre>\\n\\n\\n<p><\/p>\\n\\n\\n\\n<p>nano  \/etc\/apt\/sources.list <\/p>\\n\\n\\n\\n<p> deb http:\/\/archive.debian.org\/debian\/ wheezy contrib main non-free <\/p>\\n\\n\\n\\n<p>apt-get update<\/p>\\n\\n\\n\\n<p>apt-get install wget<\/p>\\n\\n\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n$ apt-get update &amp;amp;&amp;amp; apt-get install -y wget\\n$ wget -O \/bosun\/bosun https:\/\/github.com\/bosun\/monitor\/bosun\/releases\/download\/0.8.0-preview\/bosun-linux-amd64\\n$ kill -HUP 1\\n<\/pre>\\n\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nrm -rf \/data\/ledis_data\/\\nhttps:\/\/github.com\/bosun-monitor\/bosun\/issues\/2335\\n<\/pre>\\n\\n\\n<p>restart container<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>This article will cover updating the Bosun 0.6.0-Pre docker image to 0.8.0-Preview (the latest version at time of writing).<\/p>\n\n\n\n<p>The latest docker image for Bosun provided by <a href=\"https:\/\/hub.docker.com\/r\/stackexchange\/bosun\/tags\">Stack Exchange is 0.6.0-pre <\/a>which is now a few versions behind the released version so if we want to make use of all the new features and bug fixes there are a few things we need to do.<\/p>\n\n\n\n<p>Let&#8217;s start by pulling the 0.6.0-Pre image from Docker Hub and creating a container.<\/p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\">\ndocker run -d -p 4242:4242 -p 8070:8070 stackexchange\/bosun:0.6.0-pre\n<\/pre>\n\n\n<p>We should now be able to access the 0.6.0-Pre instance by navigating to our hosts IP address with post 8070 specified.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"194\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=640%2C194\" alt=\" class=\"wp-image-137\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=1024%2C310 1024w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=300%2C91 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=768%2C233 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?resize=720%2C218 720w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2018\/12\/image-8.png?w=1205 1205w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>The Stack Exchange Bosun repository does list upgrade instructions so let&#8217;s start the upgrade process by following them. Enter your docker instance using the following command:<\/p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\">\ndocker exec -it &lt;id&gt; bash\n<\/pre>\n\n\n<p>&lt;id> should be the id or name of your Bosun docker container, if you don&#8217;t know what those are then run the list container command to show all your running containers.<\/p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\">\ndocker container ls\n<\/pre>\n\n\n<p>Now that we have entered the container we need to install wget so we can pull the latest Bosun binaries later.<\/p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\">\napt-get update &amp;amp;&amp;amp; apt-get install -y wget\n<\/pre>\n\n\n<p><\/p>\n\n\n\n<p>nano  \/etc\/apt\/sources.list <\/p>\n\n\n\n<p> deb http:\/\/archive.debian.org\/debian\/ wheezy contrib main non-free <\/p>\n\n\n\n<p>apt-get update<\/p>\n\n\n\n<p>apt-get install wget<\/p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\">\n$ apt-get update &amp;amp;&amp;amp; apt-get install -y wget\n$ wget -O \/bosun\/bosun https:\/\/github.com\/bosun\/monitor\/bosun\/releases\/download\/0.8.0-preview\/bosun-linux-amd64\n$ kill -HUP 1\n<\/pre>\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\">\nrm -rf \/data\/ledis_data\/\nhttps:\/\/github.com\/bosun-monitor\/bosun\/issues\/2335\n<\/pre>\n\n\n<p>restart container<\/p>\n","feature_image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 26 Apr 2019 12:50:43 +0000","created_by":1,"updated_at":"Fri, 26 Apr 2019 12:50:43 +0000","updated_by":1,"published_at":"","published_by":1},{"id":296,"title":"Installing Bosun in a production environment - Part 1","slug":"installing-bosun-in-a-production-environment","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p> Parts 1, 2, 3 and 4 of this series can be found at the following locations: <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\\\">Part 1<\/a>, <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\\\">Part 2<\/a>, <a href=\\\"http:\/\/tomaustin.xyz\/2019\/06\/01\/installing-bosun-in-a-production-environment-part-3\/\\\">Part 3<\/a> and <a href=\\\"http:\/\/tomaustin.xyz\/2019\/06\/08\/installing-bosun-in-a-production-environment-part-4\/\\\">Part 4<\/a>.<\/p>\\n\\n\\n\\n<p>Whenever I&#8217;ve written about <a href=\\\"https:\/\/bosun.org\/\\\">Bosun<\/a> in the past I&#8217;ve always used the <a href=\\\"https:\/\/hub.docker.com\/r\/stackexchange\/bosun\\\">official Bosun Docker image provided by Stack Exchange<\/a>, this has been fine for demonstrations and examples however what if we wanted to run Bosun in a production environment? Stack Exchange recommend against using the Docker image in production so this will be the first article in a series covering how to install and configure Bosun in a production environment. <\/p>\\n\\n\\n\\n<p>We&#8217;re going to be using <a href=\\\"http:\/\/opentsdb.net\/\\\">OpenTSDB<\/a> as the backend data store for Bosun, due to the complexity of installing OpenTSDB I&#8217;m not going to be covering the installation here but if you want to get something working quickly <a href=\\\"https:\/\/hub.docker.com\/r\/tomaustin\/opentsdb\\\">I do have a Docker image which you can use,<\/a> this image is a tweaked version of the <a href=\\\"https:\/\/hub.docker.com\/r\/petergrace\/opentsdb-docker\\\">image provided by Peter Grace<\/a> with the following configuration additions which allow <a href=\\\"https:\/\/github.com\/StackExchange\/BosunReporter\\\">BosunReporter<\/a> to send data to it:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>tsd.http.request.enable_chunked=true\\ntsd.http.request.max_chunk=33554432<\/code><\/pre>\\n\\n\\n\\n<p>I also have a tutorial showing how to setup an OpenTSDB server in Azure using HDInsight which can be found <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/12\/setting-up-opentsdb-in-azure-using-hdinsight-and-hbase\/\\\">here<\/a>.<\/p>\\n\\n\\n\\n<p>Now that we have OpenTSDB setup let&#8217;s get down to installing Bosun. I am going to be using Ubuntu 18.04 LTS but the steps should work on any Linux distro.<\/p>\\n\\n\\n\\n<p><strong>Install Go<\/strong><\/p>\\n\\n\\n\\n<p>Bosun requires <a href=\\\"https:\/\/github.com\/golang\/go\/issues?q=milestone%3AGo1.11.2\\\">version 1.11.2<\/a> of <a href=\\\"https:\/\/golang.org\/\\\">Go<\/a> to run so the first thing we need is download that version and install it. SSH into your Linux server and run the following commands: <\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>curl -O https:\/\/dl.google.com\/go\/go1.11.2.linux-amd64.tar.gz<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>tar -xvf go1.11.2.linux-amd64.tar.gz   <\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo mv go \/usr\/local<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano  ~\/.profile<\/code><\/pre>\\n\\n\\n\\n<p>Add the following to the end of the file then save and exit (ctrl+o, enter, ctrl+x)<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>export GOPATH=$HOME\/work\\nexport PATH=$PATH:\/usr\/local\/go\/bin:$GOPATH\/bin\\ufeff<\/code><\/pre>\\n\\n\\n\\n<p>One last command now before Go should be installed:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>source ~\/.profile<\/code><\/pre>\\n\\n\\n\\n<p>To check everything worked correctly we can run &#8216;go version&#8217; and check the response:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>go version<\/code><\/pre>\\n\\n\\n\\n<p>And we should get:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>go version go1.11.2 linux\/amd64<\/code><\/pre>\\n\\n\\n\\n<p><strong>Install Supervisor<\/strong><\/p>\\n\\n\\n\\n<p>We&#8217;re going to use <a href=\\\"http:\/\/supervisord.org\/\\\">Supervisor <\/a>to monitor and control the Bosun process so we need to install that using the following command:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo apt-get install supervisor<\/code><\/pre>\\n\\n\\n\\n<p><strong>Pull Bosun from Github and configure<\/strong><\/p>\\n\\n\\n\\n<p>Now that the pre-requisites are taken care of we can finally get down to installing Bosun. We&#8217;ll start by creating a directory for Bosun and then pull the latest release from Github before setting up the configuration files.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo mkdir -m 777 \/bosun<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo wget -O \/bosun\/bosun https:\/\/github.com\/bosun-monitor\/bosun\/releases\/download\/0.8.0-preview\/bosun-linux-amd64<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo chmod +x \/bosun\/bosun<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo mkdir -m 777 \/data<\/code><\/pre>\\n\\n\\n\\n<p>Now we need to create our bosun.toml configuration file, this is where the connection strings for OpenTSDB need to go and any other config we want to specify<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/data\/bosun.toml<\/code><\/pre>\\n\\n\\n\\n<p><a href=\\\"https:\/\/gist.github.com\/tomaustin700\/3b26613f09aca5a1037ba64ddabe6cfe\\\">Here is a sample bosun.toml file<\/a>, pay attention to the OpenTSDBConf section as you will have to specify the address of your OpenTSDB instance. I&#8217;d also recommend using <a href=\\\"https:\/\/redis.io\/\\\">Redis<\/a> instead of Ledis in a production environment so set the RedisHost in DBConf to your Redis server. Once you are happy with your configuration save and exit.<\/p>\\n\\n\\n\\n<p>Now we just need to create the bosunrules.conf file where our rules will be stored. We can create this as a blank file and then add configuration later through the Bosun UI.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/data\/bosunrules.conf<\/code><\/pre>\\n\\n\\n\\n<p>Just save and exit without specifying anything.<\/p>\\n\\n\\n\\n<p><strong>Create a supervisor\\nfile to run Bosun<\/strong><\/p>\\n\\n\\n\\n<p>Now we need to configure supervisor to run Bosun, this is just a case of creating a config file for Bosun specifying a few paths.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/etc\/supervisor\/conf.d\/bosun.conf<\/code><\/pre>\\n\\n\\n\\n<p>The <a href=\\\"https:\/\/gist.github.com\/tomaustin700\/17a2371b4a2f6ca26375a1f7a4df5e9d\\\">following configuration<\/a> should work if you have followed along exactly.<\/p>\\n\\n\\n\\n<p>Now we just need to inform supervisor that we have a new configuration and hopefully Bosun will start.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo supervisorctl reread<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo supervisorctl update<\/code><\/pre>\\n\\n\\n\\n<p>You can check Bosun is running by running the following command, it should respond with &#8216;bosun RUNNING&#8217; along with some uptime data and the pid. <\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo supervisorctl<\/code><\/pre>\\n\\n\\n\\n<p><a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\\\">Part 2 of this series<\/a> will cover installing <a href=\\\"https:\/\/godoc.org\/bosun.org\/cmd\/tsdbrelay\\\">TSDBRelay<\/a>. Instead of directly sending data to Bosun we can send our data through TSDBRelay which can forward the data to opentsdb and then also to Bosun for indexing, this get&#8217;s Bosun out of the &#8216;critical path&#8217; and allow us to keep collecting data in the event Bosun goes down.<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p> Parts 1, 2, 3 and 4 of this series can be found at the following locations: <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\">Part 1<\/a>, <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\">Part 2<\/a>, <a href=\"http:\/\/tomaustin.xyz\/2019\/06\/01\/installing-bosun-in-a-production-environment-part-3\/\">Part 3<\/a> and <a href=\"http:\/\/tomaustin.xyz\/2019\/06\/08\/installing-bosun-in-a-production-environment-part-4\/\">Part 4<\/a>.<\/p>\n\n\n\n<p>Whenever I&#8217;ve written about <a href=\"https:\/\/bosun.org\/\">Bosun<\/a> in the past I&#8217;ve always used the <a href=\"https:\/\/hub.docker.com\/r\/stackexchange\/bosun\">official Bosun Docker image provided by Stack Exchange<\/a>, this has been fine for demonstrations and examples however what if we wanted to run Bosun in a production environment? Stack Exchange recommend against using the Docker image in production so this will be the first article in a series covering how to install and configure Bosun in a production environment. <\/p>\n\n\n\n<p>We&#8217;re going to be using <a href=\"http:\/\/opentsdb.net\/\">OpenTSDB<\/a> as the backend data store for Bosun, due to the complexity of installing OpenTSDB I&#8217;m not going to be covering the installation here but if you want to get something working quickly <a href=\"https:\/\/hub.docker.com\/r\/tomaustin\/opentsdb\">I do have a Docker image which you can use,<\/a> this image is a tweaked version of the <a href=\"https:\/\/hub.docker.com\/r\/petergrace\/opentsdb-docker\">image provided by Peter Grace<\/a> with the following configuration additions which allow <a href=\"https:\/\/github.com\/StackExchange\/BosunReporter\">BosunReporter<\/a> to send data to it:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>tsd.http.request.enable_chunked=true\ntsd.http.request.max_chunk=33554432<\/code><\/pre>\n\n\n\n<p>I also have a tutorial showing how to setup an OpenTSDB server in Azure using HDInsight which can be found <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/12\/setting-up-opentsdb-in-azure-using-hdinsight-and-hbase\/\">here<\/a>.<\/p>\n\n\n\n<p>Now that we have OpenTSDB setup let&#8217;s get down to installing Bosun. I am going to be using Ubuntu 18.04 LTS but the steps should work on any Linux distro.<\/p>\n\n\n\n<p><strong>Install Go<\/strong><\/p>\n\n\n\n<p>Bosun requires <a href=\"https:\/\/github.com\/golang\/go\/issues?q=milestone%3AGo1.11.2\">version 1.11.2<\/a> of <a href=\"https:\/\/golang.org\/\">Go<\/a> to run so the first thing we need is download that version and install it. SSH into your Linux server and run the following commands: <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -O https:\/\/dl.google.com\/go\/go1.11.2.linux-amd64.tar.gz<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>tar -xvf go1.11.2.linux-amd64.tar.gz   <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo mv go \/usr\/local<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano  ~\/.profile<\/code><\/pre>\n\n\n\n<p>Add the following to the end of the file then save and exit (ctrl+o, enter, ctrl+x)<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>export GOPATH=$HOME\/work\nexport PATH=$PATH:\/usr\/local\/go\/bin:$GOPATH\/bin\ufeff<\/code><\/pre>\n\n\n\n<p>One last command now before Go should be installed:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>source ~\/.profile<\/code><\/pre>\n\n\n\n<p>To check everything worked correctly we can run &#8216;go version&#8217; and check the response:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>go version<\/code><\/pre>\n\n\n\n<p>And we should get:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>go version go1.11.2 linux\/amd64<\/code><\/pre>\n\n\n\n<p><strong>Install Supervisor<\/strong><\/p>\n\n\n\n<p>We&#8217;re going to use <a href=\"http:\/\/supervisord.org\/\">Supervisor <\/a>to monitor and control the Bosun process so we need to install that using the following command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install supervisor<\/code><\/pre>\n\n\n\n<p><strong>Pull Bosun from Github and configure<\/strong><\/p>\n\n\n\n<p>Now that the pre-requisites are taken care of we can finally get down to installing Bosun. We&#8217;ll start by creating a directory for Bosun and then pull the latest release from Github before setting up the configuration files.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo mkdir -m 777 \/bosun<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo wget -O \/bosun\/bosun https:\/\/github.com\/bosun-monitor\/bosun\/releases\/download\/0.8.0-preview\/bosun-linux-amd64<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo chmod +x \/bosun\/bosun<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo mkdir -m 777 \/data<\/code><\/pre>\n\n\n\n<p>Now we need to create our bosun.toml configuration file, this is where the connection strings for OpenTSDB need to go and any other config we want to specify<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/data\/bosun.toml<\/code><\/pre>\n\n\n\n<p><a href=\"https:\/\/gist.github.com\/tomaustin700\/3b26613f09aca5a1037ba64ddabe6cfe\">Here is a sample bosun.toml file<\/a>, pay attention to the OpenTSDBConf section as you will have to specify the address of your OpenTSDB instance. I&#8217;d also recommend using <a href=\"https:\/\/redis.io\/\">Redis<\/a> instead of Ledis in a production environment so set the RedisHost in DBConf to your Redis server. Once you are happy with your configuration save and exit.<\/p>\n\n\n\n<p>Now we just need to create the bosunrules.conf file where our rules will be stored. We can create this as a blank file and then add configuration later through the Bosun UI.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/data\/bosunrules.conf<\/code><\/pre>\n\n\n\n<p>Just save and exit without specifying anything.<\/p>\n\n\n\n<p><strong>Create a supervisor\nfile to run Bosun<\/strong><\/p>\n\n\n\n<p>Now we need to configure supervisor to run Bosun, this is just a case of creating a config file for Bosun specifying a few paths.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/etc\/supervisor\/conf.d\/bosun.conf<\/code><\/pre>\n\n\n\n<p>The <a href=\"https:\/\/gist.github.com\/tomaustin700\/17a2371b4a2f6ca26375a1f7a4df5e9d\">following configuration<\/a> should work if you have followed along exactly.<\/p>\n\n\n\n<p>Now we just need to inform supervisor that we have a new configuration and hopefully Bosun will start.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo supervisorctl reread<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo supervisorctl update<\/code><\/pre>\n\n\n\n<p>You can check Bosun is running by running the following command, it should respond with &#8216;bosun RUNNING&#8217; along with some uptime data and the pid. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo supervisorctl<\/code><\/pre>\n\n\n\n<p><a href=\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\">Part 2 of this series<\/a> will cover installing <a href=\"https:\/\/godoc.org\/bosun.org\/cmd\/tsdbrelay\">TSDBRelay<\/a>. Instead of directly sending data to Bosun we can send our data through TSDBRelay which can forward the data to opentsdb and then also to Bosun for indexing, this get&#8217;s Bosun out of the &#8216;critical path&#8217; and allow us to keep collecting data in the event Bosun goes down.<\/p>\n","feature_image":"/content/images/wordpress\/2019\/06\/bosun.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 05 May 2019 14:45:06 +0000","created_by":1,"updated_at":"Sun, 29 Mar 2020 15:27:40 +0000","updated_by":1,"published_at":"Sun, 05 May 2019 14:45:06 +0000","published_by":1},{"id":312,"title":"Installing Bosun in a Production Environment - Part 2","slug":"installing-bosun-in-a-production-environment-part-2","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>Parts 1, 2, 3 and 4 of this series can be found at the following locations: <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\\\">Part 1<\/a>, <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\\\">Part 2<\/a>, <a href=\\\"http:\/\/tomaustin.xyz\/2019\/06\/01\/installing-bosun-in-a-production-environment-part-3\/\\\">Part 3<\/a> and <a href=\\\"http:\/\/tomaustin.xyz\/2019\/06\/08\/installing-bosun-in-a-production-environment-part-4\/\\\">Part 4<\/a>.<\/p>\\n\\n\\n\\n<p>This is the second article in this series covering how to install <a href=\\\"https:\/\/bosun.org\/\\\">Bosun<\/a> in a production environment. The first article can be found <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\\\">here<\/a> and covers the installation and configuration of Bosun, this article will cover installing <a href=\\\"https:\/\/godoc.org\/bosun.org\/cmd\/tsdbrelay\\\">TSDBRelay<\/a>.  Instead of directly sending data to Bosun we can send our data through TSDBRelay which can forward the data to OpenTSDB and then also to Bosun for indexing, this get&#8217;s Bosun out of the &#8216;critical path&#8217; and allow us to keep collecting data in the event Bosun goes down. <\/p>\\n\\n\\n\\n<p>A lot of these steps will be very similar to the steps we took to install Bosun so we will start with an Ubuntu 18.04 server before installing go and then grabbing the latest version of TSDBRelay.<\/p>\\n\\n\\n\\n<p><strong>Install Go<\/strong><\/p>\\n\\n\\n\\n<p>TSDBRelay requires <a href=\\\"https:\/\/github.com\/golang\/go\/issues?q=milestone%3AGo1.11.2\\\">version 1.11.2<\/a> of <a href=\\\"https:\/\/golang.org\/\\\">Go<\/a> to run so the first thing we need is download that version and install it. SSH into your Linux server and run the following commands: <\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>curl -O https:\/\/dl.google.com\/go\/go1.11.2.linux-amd64.tar.gz<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>tar -xvf go1.11.2.linux-amd64.tar.gz   <\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo mv go \/usr\/local<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano  ~\/.profile<\/code><\/pre>\\n\\n\\n\\n<p>Add the following to the end of the file then save and exit (ctrl+o, enter, ctrl+x)<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>export GOPATH=$HOME\/work\\nexport PATH=$PATH:\/usr\/local\/go\/bin:$GOPATH\/bin\\ufeff<\/code><\/pre>\\n\\n\\n\\n<p>One last command now before GO should be installed:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>source ~\/.profile<\/code><\/pre>\\n\\n\\n\\n<p>To check everything worked correctly we can run &#8216;go version&#8217; and check the response:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>go version<\/code><\/pre>\\n\\n\\n\\n<p>And we should get:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>go version go1.11.2 linux\/amd64<\/code><\/pre>\\n\\n\\n\\n<p><strong>Install Supervisor<\/strong><\/p>\\n\\n\\n\\n<p>We&#8217;re going to use <a href=\\\"http:\/\/supervisord.org\/\\\">Supervisor <\/a>to monitor and control the TSBDRelay process so we need to install that using the following command:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo apt-get install supervisor<\/code><\/pre>\\n\\n\\n\\n<p><strong>Pull TSDBRelay from Github<\/strong><\/p>\\n\\n\\n\\n<p>Let&#8217;s create a directory for TSDBRelay and then use wget to pull the latest release from github.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo mkdir -m 777 \/tsdbrelay<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo wget -O \/tsdbrelay\/tsdbrelay https:\/\/github.com\/bosun-monitor\/bosun\/releases\/download\/0.8.0-preview\/tsdbrelay-linux-amd64<\/code><\/pre>\\n\\n\\n\\n<p>Now we can use <a href=\\\"https:\/\/www.poftut.com\/chmod-x-command-linux-unix\/\\\">chmod<\/a> to mark tsdbrelay as executable.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo chmod +x \/tsdbrelay\/tsdbrelay<\/code><\/pre>\\n\\n\\n\\n<p> <strong>Create a Supervisor file to run TSDBRelay<\/strong><\/p>\\n\\n\\n\\n<p>Like with Bosun we need to create a supervisor config file to run TSDBRelay, this config file will also contain the parameters to tell TSDBRelay where our Bosun and OpenTSDB servers are.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/etc\/supervisor\/conf.d\/tsdbrelay.conf<\/code><\/pre>\\n\\n\\n\\n<p><a href=\\\"https:\/\/gist.github.com\/tomaustin700\/d0d3fd6cf070281117c95260d468fb2d\\\">Here<\/a> is a basic config file for you to use, substitute bosunip, opentsdbip and redisip with the IP&#8217;s of your servers (you can also use url&#8217;s if you want), this file also tells TSDBRelay to listen on port 5252 so change that if you wish. Save and exit.<\/p>\\n\\n\\n\\n<p>Now let&#8217;s tell supervisor to reread and update and that should be it!<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo supervisorctl reread<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo supervisorctl update<\/code><\/pre>\\n\\n\\n\\n<p>All data should now be able to be sent through TSDBRelay instead of directly to our Bosun server. This is a fairly basic configuration but TSDBRelay can also do normalisation, more info on that can be found <a href=\\\"https:\/\/riptutorial.com\/bosun\/example\/2665\/tsdbrelay-systemd-unit-file\\\">here<\/a>.<\/p>\\n\\n\\n\\n<p><a href=\\\"http:\/\/tomaustin.xyz\/2019\/06\/01\/installing-bosun-in-a-production-environment-part-3\/\\\">The next article<\/a> will cover running multiple TSDBRelay instances behind a HAProxy load balancer.<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>Parts 1, 2, 3 and 4 of this series can be found at the following locations: <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\">Part 1<\/a>, <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\">Part 2<\/a>, <a href=\"http:\/\/tomaustin.xyz\/2019\/06\/01\/installing-bosun-in-a-production-environment-part-3\/\">Part 3<\/a> and <a href=\"http:\/\/tomaustin.xyz\/2019\/06\/08\/installing-bosun-in-a-production-environment-part-4\/\">Part 4<\/a>.<\/p>\n\n\n\n<p>This is the second article in this series covering how to install <a href=\"https:\/\/bosun.org\/\">Bosun<\/a> in a production environment. The first article can be found <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\">here<\/a> and covers the installation and configuration of Bosun, this article will cover installing <a href=\"https:\/\/godoc.org\/bosun.org\/cmd\/tsdbrelay\">TSDBRelay<\/a>.  Instead of directly sending data to Bosun we can send our data through TSDBRelay which can forward the data to OpenTSDB and then also to Bosun for indexing, this get&#8217;s Bosun out of the &#8216;critical path&#8217; and allow us to keep collecting data in the event Bosun goes down. <\/p>\n\n\n\n<p>A lot of these steps will be very similar to the steps we took to install Bosun so we will start with an Ubuntu 18.04 server before installing go and then grabbing the latest version of TSDBRelay.<\/p>\n\n\n\n<p><strong>Install Go<\/strong><\/p>\n\n\n\n<p>TSDBRelay requires <a href=\"https:\/\/github.com\/golang\/go\/issues?q=milestone%3AGo1.11.2\">version 1.11.2<\/a> of <a href=\"https:\/\/golang.org\/\">Go<\/a> to run so the first thing we need is download that version and install it. SSH into your Linux server and run the following commands: <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -O https:\/\/dl.google.com\/go\/go1.11.2.linux-amd64.tar.gz<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>tar -xvf go1.11.2.linux-amd64.tar.gz   <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo mv go \/usr\/local<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano  ~\/.profile<\/code><\/pre>\n\n\n\n<p>Add the following to the end of the file then save and exit (ctrl+o, enter, ctrl+x)<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>export GOPATH=$HOME\/work\nexport PATH=$PATH:\/usr\/local\/go\/bin:$GOPATH\/bin\ufeff<\/code><\/pre>\n\n\n\n<p>One last command now before GO should be installed:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>source ~\/.profile<\/code><\/pre>\n\n\n\n<p>To check everything worked correctly we can run &#8216;go version&#8217; and check the response:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>go version<\/code><\/pre>\n\n\n\n<p>And we should get:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>go version go1.11.2 linux\/amd64<\/code><\/pre>\n\n\n\n<p><strong>Install Supervisor<\/strong><\/p>\n\n\n\n<p>We&#8217;re going to use <a href=\"http:\/\/supervisord.org\/\">Supervisor <\/a>to monitor and control the TSBDRelay process so we need to install that using the following command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install supervisor<\/code><\/pre>\n\n\n\n<p><strong>Pull TSDBRelay from Github<\/strong><\/p>\n\n\n\n<p>Let&#8217;s create a directory for TSDBRelay and then use wget to pull the latest release from github.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo mkdir -m 777 \/tsdbrelay<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo wget -O \/tsdbrelay\/tsdbrelay https:\/\/github.com\/bosun-monitor\/bosun\/releases\/download\/0.8.0-preview\/tsdbrelay-linux-amd64<\/code><\/pre>\n\n\n\n<p>Now we can use <a href=\"https:\/\/www.poftut.com\/chmod-x-command-linux-unix\/\">chmod<\/a> to mark tsdbrelay as executable.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo chmod +x \/tsdbrelay\/tsdbrelay<\/code><\/pre>\n\n\n\n<p> <strong>Create a Supervisor file to run TSDBRelay<\/strong><\/p>\n\n\n\n<p>Like with Bosun we need to create a supervisor config file to run TSDBRelay, this config file will also contain the parameters to tell TSDBRelay where our Bosun and OpenTSDB servers are.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/etc\/supervisor\/conf.d\/tsdbrelay.conf<\/code><\/pre>\n\n\n\n<p><a href=\"https:\/\/gist.github.com\/tomaustin700\/d0d3fd6cf070281117c95260d468fb2d\">Here<\/a> is a basic config file for you to use, substitute bosunip, opentsdbip and redisip with the IP&#8217;s of your servers (you can also use url&#8217;s if you want), this file also tells TSDBRelay to listen on port 5252 so change that if you wish. Save and exit.<\/p>\n\n\n\n<p>Now let&#8217;s tell supervisor to reread and update and that should be it!<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo supervisorctl reread<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo supervisorctl update<\/code><\/pre>\n\n\n\n<p>All data should now be able to be sent through TSDBRelay instead of directly to our Bosun server. This is a fairly basic configuration but TSDBRelay can also do normalisation, more info on that can be found <a href=\"https:\/\/riptutorial.com\/bosun\/example\/2665\/tsdbrelay-systemd-unit-file\">here<\/a>.<\/p>\n\n\n\n<p><a href=\"http:\/\/tomaustin.xyz\/2019\/06\/01\/installing-bosun-in-a-production-environment-part-3\/\">The next article<\/a> will cover running multiple TSDBRelay instances behind a HAProxy load balancer.<\/p>\n","feature_image":"/content/images/wordpress\/2019\/06\/bosun.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 11 May 2019 18:06:04 +0000","created_by":1,"updated_at":"Sun, 29 Mar 2020 15:27:28 +0000","updated_by":1,"published_at":"Sat, 11 May 2019 18:06:04 +0000","published_by":1},{"id":298,"title":"Using HAProxy as a reverse proxy for Azure DevOps Server","slug":"using-haproxy-as-a-reverse-proxy-for-azure-devops-server","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>I recently had the need to allow access to an on-premise <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/server\/\\\">Azure Devops Server<\/a> instance over the internet. This had been attempted in the past using <a href=\\\"https:\/\/httpd.apache.org\/\\\">apache<\/a> as the reverse proxy but due to ADS using NTLM Authentication ADS (or TFS as it was at the time) would constantly prompt for credentials without really getting anywhere. After a bit of research it looked like <a href=\\\"http:\/\/www.haproxy.org\/\\\">HAProxy<\/a> might help with this so I decided to spin up a lab environment in Azure to test it out.<\/p>\\n\\n\\n\\n<p>Before we start I would heavily suggest you don&#8217;t just reverse proxy ADS, ADS provides no 2 factor authentication capabilities so you&#8217;re going to be opening yourself up to credential stuffing and a whole host of other attacks by making it publicly accessible. Instead you probably want to be looking at migrating to <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/\\\">Azure DevOps<\/a>.<\/p>\\n\\n\\n\\n<p>This tutorial assumes you already have Azure DevOps Server installed and configured. <\/p>\\n\\n\\n\\n<p>There isn&#8217;t really a great deal to this so the first thing to do is create yourself a HAProxy server, I used Ubuntu 18.04 and then installed HAProxy.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo apt-get install haproxy<\/code><\/pre>\\n\\n\\n\\n<p>Now lets open up the HAProxy config file using nano and get to work!<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/etc\/haproxy\/haproxy.cfg<\/code><\/pre>\\n\\n\\n\\n<p>Below the defaults we need to add a backend to tell HAProxy where to send our traffic.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>\\nbackend backend_tfs\\n    server static adsip:80 check maxconn 3\\n    mode http\\n    balance roundrobin\\n    option http-keep-alive\\n    option prefer-last-server\\n    timeout server 30s\\n    timeout connect 4s\\n<\/code><\/pre>\\n\\n\\n\\n<p>Substitute &#8216;adsip&#8217; with your internal ADS\/TFS IP address. Now let&#8217;s declare the frontend.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>frontend frontend_tfs\\n    bind :80 name frontend_tfs\\n    mode http\\n    option http-keep-alive\\n    timeout client 30s\\n    default_backend backend_tfs\\n<\/code><\/pre>\\n\\n\\n\\n<p>The options which are doing the magic here are <strong>http-keep-alive<\/strong> and <strong>prefer-last-server<\/strong>. Save, exit and reload HAProxy and you&#8217;re all done!<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo service haproxy restart<\/code><\/pre>\\n\\n\\n\\n<p>If you want to try this for yourself in Azure <a href=\\\"https:\/\/gist.github.com\/tomaustin700\/55e0ad640f58c0dde4d809e18fe6c8ab\\\">here<\/a> is a resource template which will create vm&#8217;s for a domain controller, ads instance and HAProxy. The template also includes a vm for apache in case you want to see what happens when you try and use apache as the reverse proxy.<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>I recently had the need to allow access to an on-premise <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/server\/\">Azure Devops Server<\/a> instance over the internet. This had been attempted in the past using <a href=\"https:\/\/httpd.apache.org\/\">apache<\/a> as the reverse proxy but due to ADS using NTLM Authentication ADS (or TFS as it was at the time) would constantly prompt for credentials without really getting anywhere. After a bit of research it looked like <a href=\"http:\/\/www.haproxy.org\/\">HAProxy<\/a> might help with this so I decided to spin up a lab environment in Azure to test it out.<\/p>\n\n\n\n<p>Before we start I would heavily suggest you don&#8217;t just reverse proxy ADS, ADS provides no 2 factor authentication capabilities so you&#8217;re going to be opening yourself up to credential stuffing and a whole host of other attacks by making it publicly accessible. Instead you probably want to be looking at migrating to <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/\">Azure DevOps<\/a>.<\/p>\n\n\n\n<p>This tutorial assumes you already have Azure DevOps Server installed and configured. <\/p>\n\n\n\n<p>There isn&#8217;t really a great deal to this so the first thing to do is create yourself a HAProxy server, I used Ubuntu 18.04 and then installed HAProxy.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install haproxy<\/code><\/pre>\n\n\n\n<p>Now lets open up the HAProxy config file using nano and get to work!<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/etc\/haproxy\/haproxy.cfg<\/code><\/pre>\n\n\n\n<p>Below the defaults we need to add a backend to tell HAProxy where to send our traffic.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nbackend backend_tfs\n    server static adsip:80 check maxconn 3\n    mode http\n    balance roundrobin\n    option http-keep-alive\n    option prefer-last-server\n    timeout server 30s\n    timeout connect 4s\n<\/code><\/pre>\n\n\n\n<p>Substitute &#8216;adsip&#8217; with your internal ADS\/TFS IP address. Now let&#8217;s declare the frontend.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>frontend frontend_tfs\n    bind :80 name frontend_tfs\n    mode http\n    option http-keep-alive\n    timeout client 30s\n    default_backend backend_tfs\n<\/code><\/pre>\n\n\n\n<p>The options which are doing the magic here are <strong>http-keep-alive<\/strong> and <strong>prefer-last-server<\/strong>. Save, exit and reload HAProxy and you&#8217;re all done!<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo service haproxy restart<\/code><\/pre>\n\n\n\n<p>If you want to try this for yourself in Azure <a href=\"https:\/\/gist.github.com\/tomaustin700\/55e0ad640f58c0dde4d809e18fe6c8ab\">here<\/a> is a resource template which will create vm&#8217;s for a domain controller, ads instance and HAProxy. The template also includes a vm for apache in case you want to see what happens when you try and use apache as the reverse proxy.<\/p>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 11 May 2019 18:29:32 +0000","created_by":1,"updated_at":"Sat, 01 Jun 2019 16:45:33 +0000","updated_by":1,"published_at":"Sat, 11 May 2019 18:29:32 +0000","published_by":1},{"id":320,"title":"Setting up OpenTSDB in Azure using HDInsight and Hbase","slug":"setting-up-opentsdb-in-azure-using-hdinsight-and-hbase","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>This article will guide you through the steps required to setup <a href=\\\"http:\/\/opentsdb.net\/\\\">OpenTSDB<\/a> in Azure, we are going to be using <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/hdinsight\/\\\">Azure HDInsight<\/a> to host our <a href=\\\"https:\/\/hbase.apache.org\/\\\">Hbase<\/a> cluster and then setup OpenTSDB to connect to the cluster.<\/p>\\n\\n\\n\\n<p>The first thing we need to do is open the <a href=\\\"https:\/\/portal.azure.com\/\\\">Azure portal<\/a> and navigate to resource groups, once there create a new resource group for OpenTSDB.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"305\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image.png?resize=640%2C305\\\" alt=\\\"\\\" class=\\\"wp-image-326\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image.png?w=718 718w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image.png?resize=300%2C143 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Now we need to create a virtual network for Hbase and OpenTSDB to talk to each other. Navigate to Virtual networks in azure and hit &#8216;Add&#8217;, set the name for your network and assign it to the resource group. All of the other settings can be left at default values.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-1.png?resize=249%2C546\\\" alt=\\\"\\\" class=\\\"wp-image-327\\\" width=\\\"249\\\" height=\\\"546\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-1.png?w=321 321w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-1.png?resize=137%2C300 137w\\\" sizes=\\\"(max-width: 249px) 100vw, 249px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Once the virtual network has been created we can get to setting up our Hbase cluster. Open &#8216;HDInsight clusters&#8217; in Azure and press &#8216;Add&#8217;, give your cluster a name, set the cluster login password, assign it to the resource group we previously created and set the location. Click &#8216;Cluster type&#8217; and set this to Hbase before pressing &#8216;Select&#8217; at the bottom.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-3.png?resize=580%2C251\\\" alt=\\\"\\\" class=\\\"wp-image-329\\\" width=\\\"580\\\" height=\\\"251\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-3.png?w=889 889w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-3.png?resize=300%2C130 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-3.png?resize=768%2C333 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-3.png?resize=720%2C312 720w\\\" sizes=\\\"(max-width: 580px) 100vw, 580px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Before hitting &#8216;Next&#8217; toggle the wizard mode from &#8216;Quick create&#8217; to &#8216;Custom (size, settings, apps)&#8217;, this will allow us to connect Hbase to our virtual network.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter\\\"><img loading=\\\"lazy\\\" width=\\\"305\\\" height=\\\"95\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-2.png?resize=305%2C95\\\" alt=\\\"\\\" class=\\\"wp-image-328\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-2.png?w=305 305w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-2.png?resize=300%2C93 300w\\\" sizes=\\\"(max-width: 305px) 100vw, 305px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Press &#8216;Next&#8217; and you should now be on the &#8216;Security + networking&#8217; page, under &#8216;Virtual network&#8217; select the network we previously created. Without setting this your Hbase cluster and OpenTSDB will not be able to communicate.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter\\\"><img loading=\\\"lazy\\\" width=\\\"322\\\" height=\\\"191\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-4.png?resize=322%2C191\\\" alt=\\\"\\\" class=\\\"wp-image-331\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-4.png?w=322 322w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-4.png?resize=300%2C178 300w\\\" sizes=\\\"(max-width: 322px) 100vw, 322px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Proceed onto the &#8216;Storage&#8217; page and create a new storage account for Hbase. One thing to be aware of is that Azure won&#8217;t check that there isn&#8217;t already a Storage account with the name you specify and then will fail to deploy the cluster later on. Name it something unique before pressing &#8216;Next&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter\\\"><img loading=\\\"lazy\\\" width=\\\"291\\\" height=\\\"237\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-5.png?resize=291%2C237\\\" alt=\\\"\\\" class=\\\"wp-image-332\\\" data-recalc-dims=\\\"1\\\"\/><\/figure><\/div>\\n\\n\\n\\n<p>You don&#8217;t need to set anything on the &#8216;Applications&#8217; page so just press &#8216;Next&#8217;. Once you are on the &#8216;Cluster size&#8217; page set the cluster to the specifications you require before moving onto the &#8216;Script actions&#8217; page.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-6.png?resize=288%2C315\\\" alt=\\\"\\\" class=\\\"wp-image-333\\\" width=\\\"288\\\" height=\\\"315\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-6.png?w=318 318w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-6.png?resize=274%2C300 274w\\\" sizes=\\\"(max-width: 288px) 100vw, 288px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>You don&#8217;t need any script actions so move onto the summary. Check everything is as you configured (double check the virtual network is set correctly) and hit &#8216;Create&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"542\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-7.png?resize=640%2C542\\\" alt=\\\"\\\" class=\\\"wp-image-334\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-7.png?w=783 783w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-7.png?resize=300%2C254 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-7.png?resize=768%2C650 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-7.png?resize=720%2C610 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>It will take Azure about 20 minutes to build and configure the cluster so while it is doing that we can move onto creating our OpenTSDB server and doing some basic configuration.<\/p>\\n\\n\\n\\n<p>Create a new virtual machine in the resource group. I&#8217;m going to be using Ubuntu 18.04 LTS for my image and Standard B1ms for my vm size but these can be set to your liking. Make sure the virtual network is set to network we previously created, if you are wanting to configure OpenTSDB outside of that network then add inbound port rules for 22 (SSH) and 4242 (OpenTSDB).<\/p>\\n\\n\\n\\n<p>Once Azure has created our VM SSH into it, download the OpenTSDB package and install OpenTSDB.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>wget \\\"https:\/\/github.com\/OpenTSDB\/opentsdb\/releases\/download\/v2.4.0\/opentsdb-2.4.0_all.deb\\\"<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo dpkg -i  opentsdb-2.4.0_all.deb <\/code><\/pre>\\n\\n\\n\\n<p>Before starting OpenTSDB we need to install some pre-requisites and update the OpenTSDB config file. Let&#8217;s start by installing gnuplot and the Java runtime environment.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo apt-get update<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo apt-get install -y gnuplot <\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo apt install -y default-jre <\/code><\/pre>\\n\\n\\n\\n<p>Once that&#8217;s finished we need to edit the opentsdb.conf file and set a few things up.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/etc\/opentsdb\/opentsdb.conf<\/code><\/pre>\\n\\n\\n\\n<p>Before we set anything in here we need to get the IP address of our zookeeper instances. Hopefully by now Azure has created our Hbase cluster so open HDInsight clusters in Azure and click on your cluster. In the &#8216;Overview&#8217; page there should be a url for your cluster, click it and login. <\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"247\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-9.png?resize=640%2C247\\\" alt=\\\"\\\" class=\\\"wp-image-338\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-9.png?w=695 695w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-9.png?resize=300%2C116 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Once logged in you should be at the Ambari dashboard. <a href=\\\"https:\/\/ambari.apache.org\/\\\">Ambari<\/a> is a tool by apache and is used to monitor and manage our cluster. Click &#8216;Hosts&#8217; at the top. Don&#8217;t worry if you see some red exclamation marks, Azure probably hasn&#8217;t finished its configuration yet. We should now see our zookeeper instances listed at the bottom along with their IP addresses.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"636\\\" height=\\\"327\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-10.png?resize=636%2C327\\\" alt=\\\"\\\" class=\\\"wp-image-339\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-10.png?w=636 636w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-10.png?resize=300%2C154 300w\\\" sizes=\\\"(max-width: 636px) 100vw, 636px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Go back to your OpenTSDB server and enter those IP Addresses as a comma separated list next to tsd.storage.hbase.zk_quorum (make sure you uncomment the line by removing the #).<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"614\\\" height=\\\"67\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-11.png?resize=614%2C67\\\" alt=\\\"\\\" class=\\\"wp-image-341\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-11.png?w=614 614w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-11.png?resize=300%2C33 300w\\\" sizes=\\\"(max-width: 614px) 100vw, 614px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Uncomment the tsd.storage.hbase.zk_basedir line and set this to \/hbase-unsecure.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"54\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-12.png?resize=640%2C54\\\" alt=\\\"\\\" class=\\\"wp-image-342\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-12.png?w=678 678w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-12.png?resize=300%2C25 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>You can also uncomment tsd.core.auto_create_metrics and set it to true if you want to turn on autometrics.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"619\\\" height=\\\"81\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-13.png?resize=619%2C81\\\" alt=\\\"\\\" class=\\\"wp-image-343\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-13.png?w=619 619w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-13.png?resize=300%2C39 300w\\\" sizes=\\\"(max-width: 619px) 100vw, 619px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Save and exit (ctrl+o, enter, ctrl+x).<\/p>\\n\\n\\n\\n<p>Before starting OpenTSDB we need to SSH into our Hbase cluster and create a few tables for OpenTSDB to use. Go back to Azure and select the Hbase cluster, under &#8216;Settings&#8217; select &#8216;SSH + Cluster login&#8217; and set the &#8216;Hostname&#8217; field to the only available option. SSH into the cluster using the endpoint provided. Once logged in run the following command to get to the Hbase shell.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>hbase shell<\/code><\/pre>\\n\\n\\n\\n<p>After a few seconds you should be at the Hbase shell.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"636\\\" height=\\\"397\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-14.png?resize=636%2C397\\\" alt=\\\"\\\" class=\\\"wp-image-346\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-14.png?w=636 636w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-14.png?resize=300%2C187 300w\\\" sizes=\\\"(max-width: 636px) 100vw, 636px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Run the following commands to create the tables for OpenTSDB.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>create 'tsdb-uid',\\n  {NAME => 'id', COMPRESSION => 'NONE', BLOOMFILTER => 'ROW'},\\n  {NAME => 'name', COMPRESSION => 'NONE', BLOOMFILTER => 'ROW'}<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>create 'tsdb',\\n  {NAME => 't', VERSIONS => 1, COMPRESSION => 'NONE', BLOOMFILTER => 'ROW'}<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>create 'tsdb-tree',\\n  {NAME => 't', VERSIONS => 1, COMPRESSION => 'NONE', BLOOMFILTER => 'ROW'}<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>create 'tsdb-meta',\\n  {NAME => 'name', COMPRESSION => 'NONE', BLOOMFILTER => 'ROW'}<\/code><\/pre>\\n\\n\\n\\n<p>Once done you can use the list command to check all your tables were created successfully.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>list<\/code><\/pre>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"586\\\" height=\\\"186\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-15.png?resize=586%2C186\\\" alt=\\\"\\\" class=\\\"wp-image-347\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-15.png?w=586 586w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-15.png?resize=300%2C95 300w\\\" sizes=\\\"(max-width: 586px) 100vw, 586px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Now go back to your OpenTSDB server and start OpenTSDB.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo service opentsdb start<\/code><\/pre>\\n\\n\\n\\n<p>You can check everything started correctly by tailing the opentsdb log file.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>tail \/var\/log\/opentsdb\/opentsdb.log<\/code><\/pre>\\n\\n\\n\\n<p>You should see a &#8216;Ready to serve on&#8230;&#8217; message if everything has gone to plan.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"139\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-16.png?resize=640%2C139\\\" alt=\\\"\\\" class=\\\"wp-image-348\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-16.png?w=844 844w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-16.png?resize=300%2C65 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-16.png?resize=768%2C167 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-16.png?resize=720%2C156 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>You should now be able to navigate to your OpenTSDB instance on port 4242!<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"1044\\\" height=\\\"359\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-17.png?fit=640%2C220&amp;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-349\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-17.png?w=1044 1044w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-17.png?resize=300%2C103 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-17.png?resize=768%2C264 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-17.png?resize=1024%2C352 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-17.png?resize=720%2C248 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" \/><\/figure>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>This article will guide you through the steps required to setup <a href=\"http:\/\/opentsdb.net\/\">OpenTSDB<\/a> in Azure, we are going to be using <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/hdinsight\/\">Azure HDInsight<\/a> to host our <a href=\"https:\/\/hbase.apache.org\/\">Hbase<\/a> cluster and then setup OpenTSDB to connect to the cluster.<\/p>\n\n\n\n<p>The first thing we need to do is open the <a href=\"https:\/\/portal.azure.com\/\">Azure portal<\/a> and navigate to resource groups, once there create a new resource group for OpenTSDB.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"305\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image.png?resize=640%2C305\" alt=\" class=\"wp-image-326\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image.png?w=718 718w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image.png?resize=300%2C143 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Now we need to create a virtual network for Hbase and OpenTSDB to talk to each other. Navigate to Virtual networks in azure and hit &#8216;Add&#8217;, set the name for your network and assign it to the resource group. All of the other settings can be left at default values.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-1.png?resize=249%2C546\" alt=\" class=\"wp-image-327\" width=\"249\" height=\"546\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-1.png?w=321 321w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-1.png?resize=137%2C300 137w\" sizes=\"(max-width: 249px) 100vw, 249px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Once the virtual network has been created we can get to setting up our Hbase cluster. Open &#8216;HDInsight clusters&#8217; in Azure and press &#8216;Add&#8217;, give your cluster a name, set the cluster login password, assign it to the resource group we previously created and set the location. Click &#8216;Cluster type&#8217; and set this to Hbase before pressing &#8216;Select&#8217; at the bottom.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-3.png?resize=580%2C251\" alt=\" class=\"wp-image-329\" width=\"580\" height=\"251\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-3.png?w=889 889w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-3.png?resize=300%2C130 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-3.png?resize=768%2C333 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-3.png?resize=720%2C312 720w\" sizes=\"(max-width: 580px) 100vw, 580px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Before hitting &#8216;Next&#8217; toggle the wizard mode from &#8216;Quick create&#8217; to &#8216;Custom (size, settings, apps)&#8217;, this will allow us to connect Hbase to our virtual network.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"305\" height=\"95\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-2.png?resize=305%2C95\" alt=\" class=\"wp-image-328\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-2.png?w=305 305w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-2.png?resize=300%2C93 300w\" sizes=\"(max-width: 305px) 100vw, 305px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Press &#8216;Next&#8217; and you should now be on the &#8216;Security + networking&#8217; page, under &#8216;Virtual network&#8217; select the network we previously created. Without setting this your Hbase cluster and OpenTSDB will not be able to communicate.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"322\" height=\"191\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-4.png?resize=322%2C191\" alt=\" class=\"wp-image-331\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-4.png?w=322 322w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-4.png?resize=300%2C178 300w\" sizes=\"(max-width: 322px) 100vw, 322px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Proceed onto the &#8216;Storage&#8217; page and create a new storage account for Hbase. One thing to be aware of is that Azure won&#8217;t check that there isn&#8217;t already a Storage account with the name you specify and then will fail to deploy the cluster later on. Name it something unique before pressing &#8216;Next&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"291\" height=\"237\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-5.png?resize=291%2C237\" alt=\" class=\"wp-image-332\" data-recalc-dims=\"1\"\/><\/figure><\/div>\n\n\n\n<p>You don&#8217;t need to set anything on the &#8216;Applications&#8217; page so just press &#8216;Next&#8217;. Once you are on the &#8216;Cluster size&#8217; page set the cluster to the specifications you require before moving onto the &#8216;Script actions&#8217; page.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-6.png?resize=288%2C315\" alt=\" class=\"wp-image-333\" width=\"288\" height=\"315\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-6.png?w=318 318w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-6.png?resize=274%2C300 274w\" sizes=\"(max-width: 288px) 100vw, 288px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>You don&#8217;t need any script actions so move onto the summary. Check everything is as you configured (double check the virtual network is set correctly) and hit &#8216;Create&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"640\" height=\"542\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-7.png?resize=640%2C542\" alt=\" class=\"wp-image-334\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-7.png?w=783 783w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-7.png?resize=300%2C254 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-7.png?resize=768%2C650 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-7.png?resize=720%2C610 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>It will take Azure about 20 minutes to build and configure the cluster so while it is doing that we can move onto creating our OpenTSDB server and doing some basic configuration.<\/p>\n\n\n\n<p>Create a new virtual machine in the resource group. I&#8217;m going to be using Ubuntu 18.04 LTS for my image and Standard B1ms for my vm size but these can be set to your liking. Make sure the virtual network is set to network we previously created, if you are wanting to configure OpenTSDB outside of that network then add inbound port rules for 22 (SSH) and 4242 (OpenTSDB).<\/p>\n\n\n\n<p>Once Azure has created our VM SSH into it, download the OpenTSDB package and install OpenTSDB.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>wget \"https:\/\/github.com\/OpenTSDB\/opentsdb\/releases\/download\/v2.4.0\/opentsdb-2.4.0_all.deb\"<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo dpkg -i  opentsdb-2.4.0_all.deb <\/code><\/pre>\n\n\n\n<p>Before starting OpenTSDB we need to install some pre-requisites and update the OpenTSDB config file. Let&#8217;s start by installing gnuplot and the Java runtime environment.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get update<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install -y gnuplot <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt install -y default-jre <\/code><\/pre>\n\n\n\n<p>Once that&#8217;s finished we need to edit the opentsdb.conf file and set a few things up.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/etc\/opentsdb\/opentsdb.conf<\/code><\/pre>\n\n\n\n<p>Before we set anything in here we need to get the IP address of our zookeeper instances. Hopefully by now Azure has created our Hbase cluster so open HDInsight clusters in Azure and click on your cluster. In the &#8216;Overview&#8217; page there should be a url for your cluster, click it and login. <\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"247\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-9.png?resize=640%2C247\" alt=\" class=\"wp-image-338\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-9.png?w=695 695w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-9.png?resize=300%2C116 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Once logged in you should be at the Ambari dashboard. <a href=\"https:\/\/ambari.apache.org\/\">Ambari<\/a> is a tool by apache and is used to monitor and manage our cluster. Click &#8216;Hosts&#8217; at the top. Don&#8217;t worry if you see some red exclamation marks, Azure probably hasn&#8217;t finished its configuration yet. We should now see our zookeeper instances listed at the bottom along with their IP addresses.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"636\" height=\"327\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-10.png?resize=636%2C327\" alt=\" class=\"wp-image-339\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-10.png?w=636 636w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-10.png?resize=300%2C154 300w\" sizes=\"(max-width: 636px) 100vw, 636px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Go back to your OpenTSDB server and enter those IP Addresses as a comma separated list next to tsd.storage.hbase.zk_quorum (make sure you uncomment the line by removing the #).<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"614\" height=\"67\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-11.png?resize=614%2C67\" alt=\" class=\"wp-image-341\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-11.png?w=614 614w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-11.png?resize=300%2C33 300w\" sizes=\"(max-width: 614px) 100vw, 614px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Uncomment the tsd.storage.hbase.zk_basedir line and set this to \/hbase-unsecure.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"54\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-12.png?resize=640%2C54\" alt=\" class=\"wp-image-342\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-12.png?w=678 678w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-12.png?resize=300%2C25 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>You can also uncomment tsd.core.auto_create_metrics and set it to true if you want to turn on autometrics.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"619\" height=\"81\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-13.png?resize=619%2C81\" alt=\" class=\"wp-image-343\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-13.png?w=619 619w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-13.png?resize=300%2C39 300w\" sizes=\"(max-width: 619px) 100vw, 619px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Save and exit (ctrl+o, enter, ctrl+x).<\/p>\n\n\n\n<p>Before starting OpenTSDB we need to SSH into our Hbase cluster and create a few tables for OpenTSDB to use. Go back to Azure and select the Hbase cluster, under &#8216;Settings&#8217; select &#8216;SSH + Cluster login&#8217; and set the &#8216;Hostname&#8217; field to the only available option. SSH into the cluster using the endpoint provided. Once logged in run the following command to get to the Hbase shell.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>hbase shell<\/code><\/pre>\n\n\n\n<p>After a few seconds you should be at the Hbase shell.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"636\" height=\"397\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-14.png?resize=636%2C397\" alt=\" class=\"wp-image-346\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-14.png?w=636 636w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-14.png?resize=300%2C187 300w\" sizes=\"(max-width: 636px) 100vw, 636px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Run the following commands to create the tables for OpenTSDB.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>create 'tsdb-uid',\n  {NAME => 'id', COMPRESSION => 'NONE', BLOOMFILTER => 'ROW'},\n  {NAME => 'name', COMPRESSION => 'NONE', BLOOMFILTER => 'ROW'}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>create 'tsdb',\n  {NAME => 't', VERSIONS => 1, COMPRESSION => 'NONE', BLOOMFILTER => 'ROW'}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>create 'tsdb-tree',\n  {NAME => 't', VERSIONS => 1, COMPRESSION => 'NONE', BLOOMFILTER => 'ROW'}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>create 'tsdb-meta',\n  {NAME => 'name', COMPRESSION => 'NONE', BLOOMFILTER => 'ROW'}<\/code><\/pre>\n\n\n\n<p>Once done you can use the list command to check all your tables were created successfully.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>list<\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"586\" height=\"186\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-15.png?resize=586%2C186\" alt=\" class=\"wp-image-347\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-15.png?w=586 586w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-15.png?resize=300%2C95 300w\" sizes=\"(max-width: 586px) 100vw, 586px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Now go back to your OpenTSDB server and start OpenTSDB.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo service opentsdb start<\/code><\/pre>\n\n\n\n<p>You can check everything started correctly by tailing the opentsdb log file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>tail \/var\/log\/opentsdb\/opentsdb.log<\/code><\/pre>\n\n\n\n<p>You should see a &#8216;Ready to serve on&#8230;&#8217; message if everything has gone to plan.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"139\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-16.png?resize=640%2C139\" alt=\" class=\"wp-image-348\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-16.png?w=844 844w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-16.png?resize=300%2C65 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-16.png?resize=768%2C167 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-16.png?resize=720%2C156 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>You should now be able to navigate to your OpenTSDB instance on port 4242!<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1044\" height=\"359\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-17.png?fit=640%2C220&amp;ssl=1\" alt=\" class=\"wp-image-349\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-17.png?w=1044 1044w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-17.png?resize=300%2C103 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-17.png?resize=768%2C264 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-17.png?resize=1024%2C352 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-17.png?resize=720%2C248 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" \/><\/figure>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 12 May 2019 15:52:51 +0000","created_by":1,"updated_at":"Fri, 01 May 2020 13:26:32 +0000","updated_by":1,"published_at":"Sun, 12 May 2019 15:52:51 +0000","published_by":1},{"id":359,"title":"Deploying a website to Azure Kubernetes Service (AKS) using Azure DevOps","slug":"deploying-a-website-to-azure-kubernetes-service-aks-using-azure-devops","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>In this series we will be exploring how to set up a CI\/CD pipeline to deploy websites and services to <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/kubernetes-service\/\\\">Azure Kubernetes Service<\/a> using <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/\\\">Azure DevOps<\/a>. I&#8217;m going to be using <a href=\\\"https:\/\/visualstudio.microsoft.com\/vs\/\\\">Visual Studio 2019<\/a> with the Azure Development workload, you&#8217;re also going to need the <a href=\\\"https:\/\/docs.microsoft.com\/en-us\/cli\/azure\/install-azure-cli-windows?view=azure-cli-latest\\\">Azure CLI<\/a> and <a href=\\\"https:\/\/kubernetes.io\/docs\/tasks\/tools\/install-kubectl\/#install-kubectl-on-windows\\\">kubectl<\/a> for future articles in this series. This first article will guide you through deploying a basic website to AKS using Azure DevOps pipelines. You won&#8217;t need to be overly familiar with Kubernetes to follow this however a basic understanding might help. <\/p>\\n\\n\\n\\n<p>Let&#8217;s start by navigating to the Azure portal and creating a new AKS cluster (Kubernetes services &gt; Add). Create a new Resource Group for your cluster, fill in the mandatory fields and set the node size and count.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"520\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-18.png?resize=640%2C520\\\" alt=\\\"\\\" class=\\\"wp-image-366\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-18.png?w=774 774w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-18.png?resize=300%2C244 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-18.png?resize=768%2C624 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-18.png?resize=720%2C585 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Hit &#8216;Next&#8217; until you are at the Networking page. I&#8217;m going to turn on HTTP application routing as it makes things slightly easier to get setup and test (a future article will replace this setting with our own ingress controller).<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"511\\\" height=\\\"278\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-19.png?resize=511%2C278\\\" alt=\\\"\\\" class=\\\"wp-image-367\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-19.png?w=511 511w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-19.png?resize=300%2C163 300w\\\" sizes=\\\"(max-width: 511px) 100vw, 511px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Hit &#8216;Review and create&#8217; and let Azure run its validation (sometimes validation will fail for no reason so if this happens just press &#8216;Previous&#8217; and then &#8216;Review and create&#8217; again). Once validation has passed finally press &#8216;Create&#8217;. It will take about 10 mins for Azure to provision everything so whilst that is going on let&#8217;s get started with Visual Studio.<\/p>\\n\\n\\n\\n<p>Open up Visual Studio, select &#8216;Create a new project&#8217; and then select the &#8216;ASP.NET Core Web Application&#8217; template.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"615\\\" height=\\\"307\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-20.png?resize=615%2C307\\\" alt=\\\"\\\" class=\\\"wp-image-369\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-20.png?w=615 615w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-20.png?resize=300%2C150 300w\\\" sizes=\\\"(max-width: 615px) 100vw, 615px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Give your project a name and press &#8216;Create&#8217;. On the next page select &#8216;Web Application&#8217; and also enable docker support for Linux.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"116\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-21.png?resize=640%2C116\\\" alt=\\\"\\\" class=\\\"wp-image-370\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-21.png?w=978 978w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-21.png?resize=300%2C55 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-21.png?resize=768%2C140 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-21.png?resize=720%2C131 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>After the project has been created we will have a very basic web application. Feel free to press F5 and see what it looks like. One thing to note is that Visual Studio has generated us a Dockerfile which will be used to run our website in a containerised form.<\/p>\\n\\n\\n\\n<p>Next right click on the application, press &#8216;Add&#8217; and select &#8216;Container Orchestration Support&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-22.png?resize=339%2C351\\\" alt=\\\"\\\" class=\\\"wp-image-372\\\" width=\\\"339\\\" height=\\\"351\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-22.png?w=602 602w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-22.png?resize=290%2C300 290w\\\" sizes=\\\"(max-width: 339px) 100vw, 339px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>When prompted make sure the container orchestrator is set to &#8216;Kubernetes\/Helm&#8217;. Visual Studio will now generate us a helm chart which will allow us to deploy our application to our Kubernetes cluster. We should now have a folder in the solution called &#8216;charts&#8217;, this contains a collection of yaml files which describe our intended deployment. Let&#8217;s tweak a few of these!<\/p>\\n\\n\\n\\n<p>Open up values.yaml and set replicaCount to 2 (this will create two pods for our website) and set the image, imagePullSecrets, service and ingress sections to the following.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>image:\\n  repository: VALUE_TO_BE_OVERRIDDEN\\n  tag: latest\\n\\nimagePullSecrets: []\\n  # Optionally specify an array of imagePullSecrets.\\n  # Secrets must be manually created in the namespace.\\n  # ref: https:\/\/kubernetes.io\/docs\/concepts\/containers\/images\/#specifying-imagepullsecrets-on-a-pod\\n  #\\n  # This uses credentials from secret \\\"myRegistryKeySecretName\\\".\\n  # - name: myRegistryKeySecretName\\nservice:\\n  port: 80\\n\\ningress:\\n  enabled: false\\n  annotations:\\n    kubernetes.io\/ingress.class: addon-http-application-routing\\n  path: \/\\n  hostname: VALUE_TO_BE_OVERRIDDEN<\/code><\/pre>\\n\\n\\n\\n<p>A full copy of my values.yaml file can be found <a href=\\\"https:\/\/gist.github.com\/tomaustin700\/d75cb6b3746a160b8570886e54b97333\\\">here<\/a>. We are going to be overriding a lot of these values as part of our CI\/CD pipeline which is why some are set to &#8216;VALUE_TO_BE_OVERRIDDEN&#8217;. Next open up deployment.yaml and update the contents to match what I have <a href=\\\"https:\/\/gist.github.com\/tomaustin700\/bb18dbf1142b8b8b977b59bfecda8f7c\\\">here<\/a> &#8211; remember to replace &#8216;kuberwebsite&#8217; with your website name.<\/p>\\n\\n\\n\\n<p>ingress.yaml is pretty close to how we want it, I&#8217;d recommend changing the rules section to the following as it will pull the servicePort value from our values file (full copy <a href=\\\"https:\/\/gist.github.com\/tomaustin700\/66544ccc002b7c2a2b314b9309180b41\\\">here<\/a>).<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>rules:\\n  {{- range .Values.ingress.hosts }}\\n    - host: {{ . }}\\n      http:\\n        paths:\\n          - path: {{ $ingressPath }}\\n            backend:\\n              serviceName: {{ $fullName }}\\n              servicePort: http\\n  {{- end }}<\/code><\/pre>\\n\\n\\n\\n<p>We are now ready to push this code to Azure DevOps. At the bottom right of Visual Studio select &#8216;Add to Source Control&#8217; and then &#8216;Git&#8217;. When prompted press &#8216;Publish Git Repo&#8217; under &#8216;Azure DevOps&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter\\\"><img loading=\\\"lazy\\\" width=\\\"380\\\" height=\\\"142\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-23.png?resize=380%2C142\\\" alt=\\\"\\\" class=\\\"wp-image-374\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-23.png?w=380 380w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-23.png?resize=300%2C112 300w\\\" sizes=\\\"(max-width: 380px) 100vw, 380px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Select your organisation and give your repository a name, then press &#8216;Publish Repository&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter\\\"><img loading=\\\"lazy\\\" width=\\\"385\\\" height=\\\"237\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-24.png?resize=385%2C237\\\" alt=\\\"\\\" class=\\\"wp-image-375\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-24.png?w=385 385w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-24.png?resize=300%2C185 300w\\\" sizes=\\\"(max-width: 385px) 100vw, 385px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Once pushed we should be able to open up Azure DevOps and see our new project along with the code we just pushed.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"639\\\" height=\\\"327\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-25.png?resize=639%2C327\\\" alt=\\\"\\\" class=\\\"wp-image-376\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-25.png?w=639 639w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-25.png?resize=300%2C154 300w\\\" sizes=\\\"(max-width: 639px) 100vw, 639px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Before going any further let&#8217;s go back to Azure and check on our deployment. Hopefully the cluster will have been provisioned! <\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"249\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-26.png?resize=640%2C249\\\" alt=\\\"\\\" class=\\\"wp-image-377\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-26.png?w=818 818w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-26.png?resize=300%2C117 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-26.png?resize=768%2C299 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-26.png?resize=720%2C280 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Whilst we are in the Azure Portal let&#8217;s quickly make a &#8216;Container registry&#8217; to store our images. Give your registry a unique name and add it to our previously created resource group (I&#8217;ve also set my SKU to basic) before pressing &#8216;Create&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-27.png?resize=351%2C353\\\" alt=\\\"\\\" class=\\\"wp-image-378\\\" width=\\\"351\\\" height=\\\"353\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-27.png?w=397 397w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-27.png?resize=150%2C150 150w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-27.png?resize=298%2C300 298w\\\" sizes=\\\"(max-width: 351px) 100vw, 351px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Back to Azure DevOps now and let&#8217;s navigate to the Pipelines page. When you are there press the &#8216;Create Pipeline&#8217; button. We are going to be using the classic pipelines editor for this tutorial as its slightly easier to follow so let&#8217;s press &#8216;Use the classic editor&#8217; at the bottom.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter\\\"><img loading=\\\"lazy\\\" width=\\\"574\\\" height=\\\"129\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-28.png?resize=574%2C129\\\" alt=\\\"\\\" class=\\\"wp-image-380\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-28.png?w=574 574w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-28.png?resize=300%2C67 300w\\\" sizes=\\\"(max-width: 574px) 100vw, 574px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>On the next page leave everything at their default values and press &#8216;Continue&#8217;. When prompted to select a template let&#8217;s go with &#8216;Docker container&#8217;.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"602\\\" height=\\\"128\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-30.png?resize=602%2C128\\\" alt=\\\"\\\" class=\\\"wp-image-382\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-30.png?w=602 602w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-30.png?resize=300%2C64 300w\\\" sizes=\\\"(max-width: 602px) 100vw, 602px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Once at the Task page select &#8216;Build an image&#8217; &#8211; we need to set some configuration here! Start by setting the Task version to 1.* and then set your Azure subscription (if it&#8217;s not listed press &#8216;Manage&#8217;),  authorise it if you need to. Then select the Azure Container Registry we previously created, select the Dockerfile by pressing the &#8230; button and then set the &#8216;Image name&#8217; field to your container login server (this can be seen when you select the container registry in the Azure Portal) followed by a &#8216;\/&#8217;, your website name followed by :$(Build.BuildId). Finally un-tick &#8216;use default build context&#8217;. You should have something which looks like this:<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-33.png?resize=372%2C540\\\" alt=\\\"\\\" class=\\\"wp-image-386\\\" width=\\\"372\\\" height=\\\"540\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-33.png?w=486 486w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-33.png?resize=207%2C300 207w\\\" sizes=\\\"(max-width: 372px) 100vw, 372px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Now let&#8217;s configure the &#8216;Push an image&#8217; task. A lot of the fields can be set to the same values as the fields in the &#8216;Build an image&#8217; task so replicate the Azure subscription, Azure Container Registry and the Image Name. Make sure the command is set to push and you should be set.<\/p>\\n\\n\\n\\n<p>The final step is to add a new task to publish our Helm chart. Press the + button to add a new task and select &#8216;Publish Build Artifacts&#8217;. Once added select the task and change &#8216;Path to publish&#8217; to your charts directory and set the &#8216;Artifact name&#8217; field to &#8216;Helm&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-34.png?resize=407%2C309\\\" alt=\\\"\\\" class=\\\"wp-image-388\\\" width=\\\"407\\\" height=\\\"309\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-34.png?w=475 475w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-34.png?resize=300%2C228 300w\\\" sizes=\\\"(max-width: 407px) 100vw, 407px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Let&#8217;s quickly turn on continuous integration by navigating to the &#8216;Triggers&#8217; tab and toggling &#8216;Enable continuous integration&#8217;. This will instruct Azure DevOps to build and push our container whenever we push code changes to the repo.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-35.png?resize=504%2C270\\\" alt=\\\"\\\" class=\\\"wp-image-390\\\" width=\\\"504\\\" height=\\\"270\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-35.png?w=574 574w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-35.png?resize=300%2C160 300w\\\" sizes=\\\"(max-width: 504px) 100vw, 504px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>We can now give our pipeline a name and press &#8216;Save &amp; queue&#8217; to give it a test. Azure DevOps will now build our container and push it to our container registry. Hopefully we get a nice green tick showing everything has worked!<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"608\\\" height=\\\"221\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-36.png?resize=608%2C221\\\" alt=\\\"\\\" class=\\\"wp-image-392\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-36.png?w=608 608w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-36.png?resize=300%2C109 300w\\\" sizes=\\\"(max-width: 608px) 100vw, 608px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Now we need to configure a release pipeline to deploy our container to the Kubernetes cluster. Navigate to &#8216;Releases&#8217; and press &#8216;New pipeline&#8217;, when prompted to select a template just press &#8216;Empty job&#8217;. <\/p>\\n\\n\\n\\n<p>Let&#8217;s start by adding an artifact. Set the &#8216;Source&#8217; field to the build pipeline we previously created and press &#8216;Add&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-37.png?resize=344%2C429\\\" alt=\\\"\\\" class=\\\"wp-image-393\\\" width=\\\"344\\\" height=\\\"429\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-37.png?w=496 496w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-37.png?resize=240%2C300 240w\\\" sizes=\\\"(max-width: 344px) 100vw, 344px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Before we add any tasks let&#8217;s quickly set a continuous deployment trigger by clicking the lightning bolt symbol on our artifact and enabling the trigger.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter\\\"><img loading=\\\"lazy\\\" width=\\\"433\\\" height=\\\"194\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-45.png?resize=433%2C194\\\" alt=\\\"\\\" class=\\\"wp-image-408\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-45.png?w=433 433w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-45.png?resize=300%2C134 300w\\\" sizes=\\\"(max-width: 433px) 100vw, 433px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Under &#8216;Stage 1&#8217; press &#8216;1 job, 0 task&#8217; and then we can start adding some tasks. First we need to setup the Tiller environment so add the &#8216;Deploy to Kubernetes task&#8217;, set the &#8216;Service connection type&#8217; to &#8216;Azure Resource Manager&#8217; and select the correct subscription, resource group and Kubernetes cluster. Set namespace to &#8216;$(namespace)&#8217; &#8211; we will add a variable for it later on and set &#8216;Command&#8217; to apply. Now select &#8216;Use configuration&#8217; and set &#8216;Configuration type&#8217; to inline. Copy and paste <a href=\\\"https:\/\/gist.github.com\/tomaustin700\/c04a6fb95d548a935c771e1b9cdbc8c9\\\">this text<\/a> into the &#8216;Inline configuration&#8217; field. Hopefully you should have something which looks like this:<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-38.png?resize=421%2C648\\\" alt=\\\"\\\" class=\\\"wp-image-395\\\" width=\\\"421\\\" height=\\\"648\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-38.png?w=471 471w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-38.png?resize=195%2C300 195w\\\" sizes=\\\"(max-width: 421px) 100vw, 421px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-39.png?resize=397%2C368\\\" alt=\\\"\\\" class=\\\"wp-image-396\\\" width=\\\"397\\\" height=\\\"368\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-39.png?w=477 477w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-39.png?resize=300%2C278 300w\\\" sizes=\\\"(max-width: 397px) 100vw, 397px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Now we need to pull some secrets from Azure so add another &#8216;Deploy to Kubernetes&#8217; task and set the Kubernetes values to the same ones we set on the previous task. In the &#8216;Command&#8217; field set it to &#8216;get&#8217; and set &#8216;Arguments&#8217; to &#8216;service&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-40.png?resize=411%2C241\\\" alt=\\\"\\\" class=\\\"wp-image-398\\\" width=\\\"411\\\" height=\\\"241\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-40.png?w=492 492w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-40.png?resize=300%2C176 300w\\\" sizes=\\\"(max-width: 411px) 100vw, 411px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Now expand the &#8216;Secrets&#8217; section and select the subscription and registry, in the &#8216;Secret name&#8217; field type &#8216;$(dockerAuthSecretName)&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-41.png?resize=391%2C425\\\" alt=\\\"\\\" class=\\\"wp-image-400\\\" width=\\\"391\\\" height=\\\"425\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-41.png?w=466 466w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-41.png?resize=276%2C300 276w\\\" sizes=\\\"(max-width: 391px) 100vw, 391px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Before we add anymore tasks let&#8217;s quickly add the variables we have specified. Navigate to the &#8216;Variables&#8217; tab and add two variables; one for dockerAuthSecretName and one for namespace. Set &#8216;dockerAuthSecretName&#8217; to the name of your Kubernetes cluser followed by docker auth and set namespace to the name of your website.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-42.png?resize=565%2C152\\\" alt=\\\"\\\" class=\\\"wp-image-401\\\" width=\\\"565\\\" height=\\\"152\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-42.png?w=589 589w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-42.png?resize=300%2C81 300w\\\" sizes=\\\"(max-width: 565px) 100vw, 565px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Now let&#8217;s go back to the &#8216;Tasks&#8217; tab and the &#8216;Helm tool installer&#8217; task, leave everything at their default values. Now add two &#8216;Package and deploy helm charts&#8217; tasks.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-43.png?resize=488%2C322\\\" alt=\\\"\\\" class=\\\"wp-image-404\\\" width=\\\"488\\\" height=\\\"322\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-43.png?w=508 508w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-43.png?resize=300%2C198 300w\\\" sizes=\\\"(max-width: 488px) 100vw, 488px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>In the first task select your Azure subscription, resource group and Kubernetes cluster. Set the &#8216;Command&#8217; value to &#8216;init&#8217;, un-tick &#8216;Upgrade Tiller&#8217; and type the following in the Arguments box.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>--service-account tiller<\/code><\/pre>\\n\\n\\n\\n<p>You should have something which looks like this:<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-44.png?resize=366%2C441\\\" alt=\\\"\\\" class=\\\"wp-image-405\\\" width=\\\"366\\\" height=\\\"441\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-44.png?w=482 482w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-44.png?resize=249%2C300 249w\\\" sizes=\\\"(max-width: 366px) 100vw, 366px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Now expand the &#8216;Advanced group and set the &#8216;Tiller namespace&#8217; field to $(namespace).<\/p>\\n\\n\\n\\n<p>On the second Helm task set the subscription, resource group and cluster fields like we have previously set. Set Namespace to $(namespace), &#8216;Command&#8217; to &#8216;upgrade&#8217; and &#8216;Chart Type&#8217; to &#8216;File Path&#8217;. Now select your chart artifacts using the &#8230; button. Set &#8216;Release Name&#8217; to your website name. Now select &#8216;Install if release not present&#8217; and &#8216;Force&#8217; before typing the following into the &#8216;Arguments&#8217; box. Make sure you substitute the image.repository value with your own and set ingress.hostname to the HTTP application routing domain of your cluster (this can be found when you select your cluster in the Azure Portal).<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>--set image.repository=kubertutorial.azurecr.io\/kuberwebsite --set image.tag=$(Build.BuildId) --set service.port=80 --set ingress.enabled=true --set ingress.hostname=$(namespace).3bab45c18a7547e99d6c.westeurope.aksapp.io --set imagePullSecrets={$(dockerAuthSecretName)} --timeout 900<\/code><\/pre>\\n\\n\\n\\n<p>These arguments are overriding some of the values we have set previously in our values.yaml file. Now expand the &#8216;Advanced&#8217; group and set &#8216;Tiller namespace&#8217; to $(namespace). Now give your pipeline a name (I chose &#8216;CD&#8217;) and press &#8216;Release&#8217; &#8211; &#8216;Create release&#8217;. Now we wait patiently. Hopefully after a few minutes the release completes and we have a lot of green ticks!<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter\\\"><img loading=\\\"lazy\\\" width=\\\"568\\\" height=\\\"547\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-46.png?resize=568%2C547\\\" alt=\\\"\\\" class=\\\"wp-image-414\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-46.png?w=568 568w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-46.png?resize=300%2C289 300w\\\" sizes=\\\"(max-width: 568px) 100vw, 568px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>If we expand the &#8216;helm upgrade&#8217; section we should be able to see that we have two pods running with our container in and also the ingress hostname.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"309\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-47.png?resize=640%2C309\\\" alt=\\\"\\\" class=\\\"wp-image-416\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-47.png?w=653 653w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-47.png?resize=300%2C145 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>It will take a few minutes for DNS to start working but once it does you should be able to access your website by navigating to the ingress hostname using your browser.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"381\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-48.png?resize=640%2C381\\\" alt=\\\"\\\" class=\\\"wp-image-420\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-48.png?w=962 962w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-48.png?resize=300%2C179 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-48.png?resize=768%2C457 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-48.png?resize=720%2C429 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>All of the source code for this article can be found <a href=\\\"https:\/\/dev.azure.com\/tomaustin700\/_git\/kubertutorial\\\">here<\/a>. The next article in this series will guide you through deploying an api for your website and using kubectl to manage your cluster.<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>In this series we will be exploring how to set up a CI\/CD pipeline to deploy websites and services to <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/kubernetes-service\/\">Azure Kubernetes Service<\/a> using <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/\">Azure DevOps<\/a>. I&#8217;m going to be using <a href=\"https:\/\/visualstudio.microsoft.com\/vs\/\">Visual Studio 2019<\/a> with the Azure Development workload, you&#8217;re also going to need the <a href=\"https:\/\/docs.microsoft.com\/en-us\/cli\/azure\/install-azure-cli-windows?view=azure-cli-latest\">Azure CLI<\/a> and <a href=\"https:\/\/kubernetes.io\/docs\/tasks\/tools\/install-kubectl\/#install-kubectl-on-windows\">kubectl<\/a> for future articles in this series. This first article will guide you through deploying a basic website to AKS using Azure DevOps pipelines. You won&#8217;t need to be overly familiar with Kubernetes to follow this however a basic understanding might help. <\/p>\n\n\n\n<p>Let&#8217;s start by navigating to the Azure portal and creating a new AKS cluster (Kubernetes services &gt; Add). Create a new Resource Group for your cluster, fill in the mandatory fields and set the node size and count.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"520\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-18.png?resize=640%2C520\" alt=\" class=\"wp-image-366\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-18.png?w=774 774w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-18.png?resize=300%2C244 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-18.png?resize=768%2C624 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-18.png?resize=720%2C585 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Hit &#8216;Next&#8217; until you are at the Networking page. I&#8217;m going to turn on HTTP application routing as it makes things slightly easier to get setup and test (a future article will replace this setting with our own ingress controller).<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"511\" height=\"278\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-19.png?resize=511%2C278\" alt=\" class=\"wp-image-367\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-19.png?w=511 511w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-19.png?resize=300%2C163 300w\" sizes=\"(max-width: 511px) 100vw, 511px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Hit &#8216;Review and create&#8217; and let Azure run its validation (sometimes validation will fail for no reason so if this happens just press &#8216;Previous&#8217; and then &#8216;Review and create&#8217; again). Once validation has passed finally press &#8216;Create&#8217;. It will take about 10 mins for Azure to provision everything so whilst that is going on let&#8217;s get started with Visual Studio.<\/p>\n\n\n\n<p>Open up Visual Studio, select &#8216;Create a new project&#8217; and then select the &#8216;ASP.NET Core Web Application&#8217; template.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"615\" height=\"307\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-20.png?resize=615%2C307\" alt=\" class=\"wp-image-369\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-20.png?w=615 615w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-20.png?resize=300%2C150 300w\" sizes=\"(max-width: 615px) 100vw, 615px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Give your project a name and press &#8216;Create&#8217;. On the next page select &#8216;Web Application&#8217; and also enable docker support for Linux.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"116\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-21.png?resize=640%2C116\" alt=\" class=\"wp-image-370\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-21.png?w=978 978w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-21.png?resize=300%2C55 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-21.png?resize=768%2C140 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-21.png?resize=720%2C131 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>After the project has been created we will have a very basic web application. Feel free to press F5 and see what it looks like. One thing to note is that Visual Studio has generated us a Dockerfile which will be used to run our website in a containerised form.<\/p>\n\n\n\n<p>Next right click on the application, press &#8216;Add&#8217; and select &#8216;Container Orchestration Support&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-22.png?resize=339%2C351\" alt=\" class=\"wp-image-372\" width=\"339\" height=\"351\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-22.png?w=602 602w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-22.png?resize=290%2C300 290w\" sizes=\"(max-width: 339px) 100vw, 339px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>When prompted make sure the container orchestrator is set to &#8216;Kubernetes\/Helm&#8217;. Visual Studio will now generate us a helm chart which will allow us to deploy our application to our Kubernetes cluster. We should now have a folder in the solution called &#8216;charts&#8217;, this contains a collection of yaml files which describe our intended deployment. Let&#8217;s tweak a few of these!<\/p>\n\n\n\n<p>Open up values.yaml and set replicaCount to 2 (this will create two pods for our website) and set the image, imagePullSecrets, service and ingress sections to the following.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>image:\n  repository: VALUE_TO_BE_OVERRIDDEN\n  tag: latest\n\nimagePullSecrets: []\n  # Optionally specify an array of imagePullSecrets.\n  # Secrets must be manually created in the namespace.\n  # ref: https:\/\/kubernetes.io\/docs\/concepts\/containers\/images\/#specifying-imagepullsecrets-on-a-pod\n  #\n  # This uses credentials from secret \"myRegistryKeySecretName\".\n  # - name: myRegistryKeySecretName\nservice:\n  port: 80\n\ningress:\n  enabled: false\n  annotations:\n    kubernetes.io\/ingress.class: addon-http-application-routing\n  path: \/\n  hostname: VALUE_TO_BE_OVERRIDDEN<\/code><\/pre>\n\n\n\n<p>A full copy of my values.yaml file can be found <a href=\"https:\/\/gist.github.com\/tomaustin700\/d75cb6b3746a160b8570886e54b97333\">here<\/a>. We are going to be overriding a lot of these values as part of our CI\/CD pipeline which is why some are set to &#8216;VALUE_TO_BE_OVERRIDDEN&#8217;. Next open up deployment.yaml and update the contents to match what I have <a href=\"https:\/\/gist.github.com\/tomaustin700\/bb18dbf1142b8b8b977b59bfecda8f7c\">here<\/a> &#8211; remember to replace &#8216;kuberwebsite&#8217; with your website name.<\/p>\n\n\n\n<p>ingress.yaml is pretty close to how we want it, I&#8217;d recommend changing the rules section to the following as it will pull the servicePort value from our values file (full copy <a href=\"https:\/\/gist.github.com\/tomaustin700\/66544ccc002b7c2a2b314b9309180b41\">here<\/a>).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>rules:\n  {{- range .Values.ingress.hosts }}\n    - host: {{ . }}\n      http:\n        paths:\n          - path: {{ $ingressPath }}\n            backend:\n              serviceName: {{ $fullName }}\n              servicePort: http\n  {{- end }}<\/code><\/pre>\n\n\n\n<p>We are now ready to push this code to Azure DevOps. At the bottom right of Visual Studio select &#8216;Add to Source Control&#8217; and then &#8216;Git&#8217;. When prompted press &#8216;Publish Git Repo&#8217; under &#8216;Azure DevOps&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"380\" height=\"142\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-23.png?resize=380%2C142\" alt=\" class=\"wp-image-374\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-23.png?w=380 380w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-23.png?resize=300%2C112 300w\" sizes=\"(max-width: 380px) 100vw, 380px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Select your organisation and give your repository a name, then press &#8216;Publish Repository&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"385\" height=\"237\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-24.png?resize=385%2C237\" alt=\" class=\"wp-image-375\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-24.png?w=385 385w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-24.png?resize=300%2C185 300w\" sizes=\"(max-width: 385px) 100vw, 385px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Once pushed we should be able to open up Azure DevOps and see our new project along with the code we just pushed.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"639\" height=\"327\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-25.png?resize=639%2C327\" alt=\" class=\"wp-image-376\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-25.png?w=639 639w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-25.png?resize=300%2C154 300w\" sizes=\"(max-width: 639px) 100vw, 639px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Before going any further let&#8217;s go back to Azure and check on our deployment. Hopefully the cluster will have been provisioned! <\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"249\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-26.png?resize=640%2C249\" alt=\" class=\"wp-image-377\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-26.png?w=818 818w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-26.png?resize=300%2C117 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-26.png?resize=768%2C299 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-26.png?resize=720%2C280 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Whilst we are in the Azure Portal let&#8217;s quickly make a &#8216;Container registry&#8217; to store our images. Give your registry a unique name and add it to our previously created resource group (I&#8217;ve also set my SKU to basic) before pressing &#8216;Create&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-27.png?resize=351%2C353\" alt=\" class=\"wp-image-378\" width=\"351\" height=\"353\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-27.png?w=397 397w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-27.png?resize=150%2C150 150w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-27.png?resize=298%2C300 298w\" sizes=\"(max-width: 351px) 100vw, 351px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Back to Azure DevOps now and let&#8217;s navigate to the Pipelines page. When you are there press the &#8216;Create Pipeline&#8217; button. We are going to be using the classic pipelines editor for this tutorial as its slightly easier to follow so let&#8217;s press &#8216;Use the classic editor&#8217; at the bottom.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"574\" height=\"129\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-28.png?resize=574%2C129\" alt=\" class=\"wp-image-380\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-28.png?w=574 574w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-28.png?resize=300%2C67 300w\" sizes=\"(max-width: 574px) 100vw, 574px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>On the next page leave everything at their default values and press &#8216;Continue&#8217;. When prompted to select a template let&#8217;s go with &#8216;Docker container&#8217;.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"602\" height=\"128\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-30.png?resize=602%2C128\" alt=\" class=\"wp-image-382\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-30.png?w=602 602w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-30.png?resize=300%2C64 300w\" sizes=\"(max-width: 602px) 100vw, 602px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Once at the Task page select &#8216;Build an image&#8217; &#8211; we need to set some configuration here! Start by setting the Task version to 1.* and then set your Azure subscription (if it&#8217;s not listed press &#8216;Manage&#8217;),  authorise it if you need to. Then select the Azure Container Registry we previously created, select the Dockerfile by pressing the &#8230; button and then set the &#8216;Image name&#8217; field to your container login server (this can be seen when you select the container registry in the Azure Portal) followed by a &#8216;\/&#8217;, your website name followed by :$(Build.BuildId). Finally un-tick &#8216;use default build context&#8217;. You should have something which looks like this:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-33.png?resize=372%2C540\" alt=\" class=\"wp-image-386\" width=\"372\" height=\"540\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-33.png?w=486 486w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-33.png?resize=207%2C300 207w\" sizes=\"(max-width: 372px) 100vw, 372px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Now let&#8217;s configure the &#8216;Push an image&#8217; task. A lot of the fields can be set to the same values as the fields in the &#8216;Build an image&#8217; task so replicate the Azure subscription, Azure Container Registry and the Image Name. Make sure the command is set to push and you should be set.<\/p>\n\n\n\n<p>The final step is to add a new task to publish our Helm chart. Press the + button to add a new task and select &#8216;Publish Build Artifacts&#8217;. Once added select the task and change &#8216;Path to publish&#8217; to your charts directory and set the &#8216;Artifact name&#8217; field to &#8216;Helm&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-34.png?resize=407%2C309\" alt=\" class=\"wp-image-388\" width=\"407\" height=\"309\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-34.png?w=475 475w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-34.png?resize=300%2C228 300w\" sizes=\"(max-width: 407px) 100vw, 407px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Let&#8217;s quickly turn on continuous integration by navigating to the &#8216;Triggers&#8217; tab and toggling &#8216;Enable continuous integration&#8217;. This will instruct Azure DevOps to build and push our container whenever we push code changes to the repo.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-35.png?resize=504%2C270\" alt=\" class=\"wp-image-390\" width=\"504\" height=\"270\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-35.png?w=574 574w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-35.png?resize=300%2C160 300w\" sizes=\"(max-width: 504px) 100vw, 504px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>We can now give our pipeline a name and press &#8216;Save &amp; queue&#8217; to give it a test. Azure DevOps will now build our container and push it to our container registry. Hopefully we get a nice green tick showing everything has worked!<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"608\" height=\"221\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-36.png?resize=608%2C221\" alt=\" class=\"wp-image-392\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-36.png?w=608 608w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-36.png?resize=300%2C109 300w\" sizes=\"(max-width: 608px) 100vw, 608px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Now we need to configure a release pipeline to deploy our container to the Kubernetes cluster. Navigate to &#8216;Releases&#8217; and press &#8216;New pipeline&#8217;, when prompted to select a template just press &#8216;Empty job&#8217;. <\/p>\n\n\n\n<p>Let&#8217;s start by adding an artifact. Set the &#8216;Source&#8217; field to the build pipeline we previously created and press &#8216;Add&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-37.png?resize=344%2C429\" alt=\" class=\"wp-image-393\" width=\"344\" height=\"429\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-37.png?w=496 496w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-37.png?resize=240%2C300 240w\" sizes=\"(max-width: 344px) 100vw, 344px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Before we add any tasks let&#8217;s quickly set a continuous deployment trigger by clicking the lightning bolt symbol on our artifact and enabling the trigger.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"433\" height=\"194\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-45.png?resize=433%2C194\" alt=\" class=\"wp-image-408\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-45.png?w=433 433w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-45.png?resize=300%2C134 300w\" sizes=\"(max-width: 433px) 100vw, 433px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Under &#8216;Stage 1&#8217; press &#8216;1 job, 0 task&#8217; and then we can start adding some tasks. First we need to setup the Tiller environment so add the &#8216;Deploy to Kubernetes task&#8217;, set the &#8216;Service connection type&#8217; to &#8216;Azure Resource Manager&#8217; and select the correct subscription, resource group and Kubernetes cluster. Set namespace to &#8216;$(namespace)&#8217; &#8211; we will add a variable for it later on and set &#8216;Command&#8217; to apply. Now select &#8216;Use configuration&#8217; and set &#8216;Configuration type&#8217; to inline. Copy and paste <a href=\"https:\/\/gist.github.com\/tomaustin700\/c04a6fb95d548a935c771e1b9cdbc8c9\">this text<\/a> into the &#8216;Inline configuration&#8217; field. Hopefully you should have something which looks like this:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-38.png?resize=421%2C648\" alt=\" class=\"wp-image-395\" width=\"421\" height=\"648\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-38.png?w=471 471w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-38.png?resize=195%2C300 195w\" sizes=\"(max-width: 421px) 100vw, 421px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-39.png?resize=397%2C368\" alt=\" class=\"wp-image-396\" width=\"397\" height=\"368\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-39.png?w=477 477w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-39.png?resize=300%2C278 300w\" sizes=\"(max-width: 397px) 100vw, 397px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Now we need to pull some secrets from Azure so add another &#8216;Deploy to Kubernetes&#8217; task and set the Kubernetes values to the same ones we set on the previous task. In the &#8216;Command&#8217; field set it to &#8216;get&#8217; and set &#8216;Arguments&#8217; to &#8216;service&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-40.png?resize=411%2C241\" alt=\" class=\"wp-image-398\" width=\"411\" height=\"241\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-40.png?w=492 492w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-40.png?resize=300%2C176 300w\" sizes=\"(max-width: 411px) 100vw, 411px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Now expand the &#8216;Secrets&#8217; section and select the subscription and registry, in the &#8216;Secret name&#8217; field type &#8216;$(dockerAuthSecretName)&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-41.png?resize=391%2C425\" alt=\" class=\"wp-image-400\" width=\"391\" height=\"425\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-41.png?w=466 466w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-41.png?resize=276%2C300 276w\" sizes=\"(max-width: 391px) 100vw, 391px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Before we add anymore tasks let&#8217;s quickly add the variables we have specified. Navigate to the &#8216;Variables&#8217; tab and add two variables; one for dockerAuthSecretName and one for namespace. Set &#8216;dockerAuthSecretName&#8217; to the name of your Kubernetes cluser followed by docker auth and set namespace to the name of your website.<\/p>\n\n\n\n<figure class=\"wp-block-image is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-42.png?resize=565%2C152\" alt=\" class=\"wp-image-401\" width=\"565\" height=\"152\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-42.png?w=589 589w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-42.png?resize=300%2C81 300w\" sizes=\"(max-width: 565px) 100vw, 565px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Now let&#8217;s go back to the &#8216;Tasks&#8217; tab and the &#8216;Helm tool installer&#8217; task, leave everything at their default values. Now add two &#8216;Package and deploy helm charts&#8217; tasks.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-43.png?resize=488%2C322\" alt=\" class=\"wp-image-404\" width=\"488\" height=\"322\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-43.png?w=508 508w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-43.png?resize=300%2C198 300w\" sizes=\"(max-width: 488px) 100vw, 488px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>In the first task select your Azure subscription, resource group and Kubernetes cluster. Set the &#8216;Command&#8217; value to &#8216;init&#8217;, un-tick &#8216;Upgrade Tiller&#8217; and type the following in the Arguments box.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>--service-account tiller<\/code><\/pre>\n\n\n\n<p>You should have something which looks like this:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-44.png?resize=366%2C441\" alt=\" class=\"wp-image-405\" width=\"366\" height=\"441\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-44.png?w=482 482w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-44.png?resize=249%2C300 249w\" sizes=\"(max-width: 366px) 100vw, 366px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Now expand the &#8216;Advanced group and set the &#8216;Tiller namespace&#8217; field to $(namespace).<\/p>\n\n\n\n<p>On the second Helm task set the subscription, resource group and cluster fields like we have previously set. Set Namespace to $(namespace), &#8216;Command&#8217; to &#8216;upgrade&#8217; and &#8216;Chart Type&#8217; to &#8216;File Path&#8217;. Now select your chart artifacts using the &#8230; button. Set &#8216;Release Name&#8217; to your website name. Now select &#8216;Install if release not present&#8217; and &#8216;Force&#8217; before typing the following into the &#8216;Arguments&#8217; box. Make sure you substitute the image.repository value with your own and set ingress.hostname to the HTTP application routing domain of your cluster (this can be found when you select your cluster in the Azure Portal).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>--set image.repository=kubertutorial.azurecr.io\/kuberwebsite --set image.tag=$(Build.BuildId) --set service.port=80 --set ingress.enabled=true --set ingress.hostname=$(namespace).3bab45c18a7547e99d6c.westeurope.aksapp.io --set imagePullSecrets={$(dockerAuthSecretName)} --timeout 900<\/code><\/pre>\n\n\n\n<p>These arguments are overriding some of the values we have set previously in our values.yaml file. Now expand the &#8216;Advanced&#8217; group and set &#8216;Tiller namespace&#8217; to $(namespace). Now give your pipeline a name (I chose &#8216;CD&#8217;) and press &#8216;Release&#8217; &#8211; &#8216;Create release&#8217;. Now we wait patiently. Hopefully after a few minutes the release completes and we have a lot of green ticks!<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img loading=\"lazy\" width=\"568\" height=\"547\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-46.png?resize=568%2C547\" alt=\" class=\"wp-image-414\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-46.png?w=568 568w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-46.png?resize=300%2C289 300w\" sizes=\"(max-width: 568px) 100vw, 568px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>If we expand the &#8216;helm upgrade&#8217; section we should be able to see that we have two pods running with our container in and also the ingress hostname.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"309\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-47.png?resize=640%2C309\" alt=\" class=\"wp-image-416\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-47.png?w=653 653w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-47.png?resize=300%2C145 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>It will take a few minutes for DNS to start working but once it does you should be able to access your website by navigating to the ingress hostname using your browser.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"381\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-48.png?resize=640%2C381\" alt=\" class=\"wp-image-420\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-48.png?w=962 962w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-48.png?resize=300%2C179 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-48.png?resize=768%2C457 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-48.png?resize=720%2C429 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>All of the source code for this article can be found <a href=\"https:\/\/dev.azure.com\/tomaustin700\/_git\/kubertutorial\">here<\/a>. The next article in this series will guide you through deploying an api for your website and using kubectl to manage your cluster.<\/p>\n","feature_image":"/content/images/wordpress\/2019\/05\/aks.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 18 May 2019 18:27:45 +0000","created_by":1,"updated_at":"Mon, 20 May 2019 13:00:09 +0000","updated_by":1,"published_at":"Sat, 18 May 2019 18:27:45 +0000","published_by":1},{"id":427,"title":"Deploying an API to Azure Kubernetes Service (AKS) using Azure DevOps","slug":"deploying-an-api-to-azure-kubernetes-service-aks-using-azure-devops","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>This article is the second in a series exploring <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/kubernetes-service\/\\\">AKS<\/a> and how to leverage <a href=\\\"https:\/\/azure.microsoft.com\/en-us\/services\/devops\/\\\">Azure DevOps<\/a> to easily deploy and update services running inside AKS. The first article in the series can be found <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/18\/deploying-a-website-to-azure-kubernetes-service-aks-using-azure-devops\/\\\">here<\/a> and guided you through deploying a simple website to AKS, this article will show you how to do the same but with an API.<\/p>\\n\\n\\n\\n<p> I&#8217;m going to assume you already have a Kubernetes cluster running in Azure and you are already familiar with Azure DevOps pipelines, if not then please go back and read the first article which covers these steps in detail. <\/p>\\n\\n\\n\\n<p>Let&#8217;s start by opening Visual Studio and creating a new ASP.Net Core Web Application using the built in template.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-20.png?resize=512%2C255\\\" alt=\\\"\\\" class=\\\"wp-image-369\\\" width=\\\"512\\\" height=\\\"255\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-20.png?w=615 615w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-20.png?resize=300%2C150 300w\\\" sizes=\\\"(max-width: 512px) 100vw, 512px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>When prompted we are going to select API, make sure that &#8216;Enable Docker Support&#8217; is ticked and the mode is set to &#8216;Linux&#8217;. I&#8217;m going to leave Authentication set to &#8216;No Authentication&#8217; as this is just going to be a very basic API for the purposes of this tutorial.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"149\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-49.png?resize=640%2C149\\\" alt=\\\"\\\" class=\\\"wp-image-430\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-49.png?w=735 735w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-49.png?resize=300%2C70 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-49.png?resize=720%2C168 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Once created we should have a very basic API with a basic controller (ValuesController). Let&#8217;s right click on the project and add &#8216;Container Orchestrator Support&#8217;, make sure &#8216;Kubernetes\/Helm&#8217; is selected.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-22.png?resize=400%2C414\\\" alt=\\\"\\\" class=\\\"wp-image-372\\\" width=\\\"400\\\" height=\\\"414\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-22.png?w=602 602w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-22.png?resize=290%2C300 290w\\\" sizes=\\\"(max-width: 400px) 100vw, 400px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>So far this is identical to the process of adding a website, we&#8217;re even going to configure our helm files to be the same. The files generated by Visual Studio are a good starting point but I&#8217;d recommend using the basic yaml files I have put together (values.yaml can be found <a href=\\\"https:\/\/gist.github.com\/tomaustin700\/d75cb6b3746a160b8570886e54b97333\\\">here<\/a> and ingress.yaml <a href=\\\"https:\/\/gist.github.com\/tomaustin700\/66544ccc002b7c2a2b314b9309180b41\\\">here<\/a> &#8211; remember to replace website\/kuberwebsite with your API&#8217;s name), for deployment.yaml things are slightly different.<\/p>\\n\\n\\n\\n<p>Deployment.yaml contains definitions for two probes (readiness and liveness) which are used by Kubernetes to detect if everything is working correctly and if not trigger a restart of the container. We need to point these to our controller, if not Kubernetes will not get a response and the API will constantly be restarted. Update the probes to look like this:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>livenessProbe:\\n            httpGet:\\n              path: \/api\/values\\n              port: http\\n          readinessProbe:\\n            httpGet:\\n              path: \/api\/values\\n              port: http<\/code><\/pre>\\n\\n\\n\\n<p> If you are doing this for real I&#8217;d recommend creating a &#8216;health&#8217; controller which is dedicated to informing Kubernetes that everything is okay. The full copy of my deployment.yaml file can be found <a href=\\\"https:\/\/gist.github.com\/tomaustin700\/c5ae694a0065b2b0732bdf1437c35280\\\">here<\/a> (I&#8217;ve also declared some environment variables for Application Insights but you don&#8217;t need those). <\/p>\\n\\n\\n\\n<p>Once done push your code to Azure DevOps like we did in the previous tutorial and construct your pipelines identically (I&#8217;d even recommend just cloning the pipelines we made before and changing the repo and the environment variables). That should be it!<\/p>\\n\\n\\n\\n<p>We have been using HTTP application routing provided by Azure to access our website\/api but the next tutorial will focus on deploying our our <a href=\\\"https:\/\/www.nginx.com\/\\\">NGINX<\/a> Ingress controller which will leverage <a href=\\\"https:\/\/letsencrypt.org\/\\\">Let&#8217;s Encrypt<\/a> for HTTPS &#8211; this will all be declared in code and deployed using Azure DevOps (of course!).<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>This article is the second in a series exploring <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/kubernetes-service\/\">AKS<\/a> and how to leverage <a href=\"https:\/\/azure.microsoft.com\/en-us\/services\/devops\/\">Azure DevOps<\/a> to easily deploy and update services running inside AKS. The first article in the series can be found <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/18\/deploying-a-website-to-azure-kubernetes-service-aks-using-azure-devops\/\">here<\/a> and guided you through deploying a simple website to AKS, this article will show you how to do the same but with an API.<\/p>\n\n\n\n<p> I&#8217;m going to assume you already have a Kubernetes cluster running in Azure and you are already familiar with Azure DevOps pipelines, if not then please go back and read the first article which covers these steps in detail. <\/p>\n\n\n\n<p>Let&#8217;s start by opening Visual Studio and creating a new ASP.Net Core Web Application using the built in template.<\/p>\n\n\n\n<figure class=\"wp-block-image is-resized\"><img loading=\"lazy\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-20.png?resize=512%2C255\" alt=\" class=\"wp-image-369\" width=\"512\" height=\"255\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-20.png?w=615 615w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-20.png?resize=300%2C150 300w\" sizes=\"(max-width: 512px) 100vw, 512px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>When prompted we are going to select API, make sure that &#8216;Enable Docker Support&#8217; is ticked and the mode is set to &#8216;Linux&#8217;. I&#8217;m going to leave Authentication set to &#8216;No Authentication&#8217; as this is just going to be a very basic API for the purposes of this tutorial.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"640\" height=\"149\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-49.png?resize=640%2C149\" alt=\" class=\"wp-image-430\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-49.png?w=735 735w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-49.png?resize=300%2C70 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-49.png?resize=720%2C168 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Once created we should have a very basic API with a basic controller (ValuesController). Let&#8217;s right click on the project and add &#8216;Container Orchestrator Support&#8217;, make sure &#8216;Kubernetes\/Helm&#8217; is selected.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-22.png?resize=400%2C414\" alt=\" class=\"wp-image-372\" width=\"400\" height=\"414\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-22.png?w=602 602w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/05\/image-22.png?resize=290%2C300 290w\" sizes=\"(max-width: 400px) 100vw, 400px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>So far this is identical to the process of adding a website, we&#8217;re even going to configure our helm files to be the same. The files generated by Visual Studio are a good starting point but I&#8217;d recommend using the basic yaml files I have put together (values.yaml can be found <a href=\"https:\/\/gist.github.com\/tomaustin700\/d75cb6b3746a160b8570886e54b97333\">here<\/a> and ingress.yaml <a href=\"https:\/\/gist.github.com\/tomaustin700\/66544ccc002b7c2a2b314b9309180b41\">here<\/a> &#8211; remember to replace website\/kuberwebsite with your API&#8217;s name), for deployment.yaml things are slightly different.<\/p>\n\n\n\n<p>Deployment.yaml contains definitions for two probes (readiness and liveness) which are used by Kubernetes to detect if everything is working correctly and if not trigger a restart of the container. We need to point these to our controller, if not Kubernetes will not get a response and the API will constantly be restarted. Update the probes to look like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>livenessProbe:\n            httpGet:\n              path: \/api\/values\n              port: http\n          readinessProbe:\n            httpGet:\n              path: \/api\/values\n              port: http<\/code><\/pre>\n\n\n\n<p> If you are doing this for real I&#8217;d recommend creating a &#8216;health&#8217; controller which is dedicated to informing Kubernetes that everything is okay. The full copy of my deployment.yaml file can be found <a href=\"https:\/\/gist.github.com\/tomaustin700\/c5ae694a0065b2b0732bdf1437c35280\">here<\/a> (I&#8217;ve also declared some environment variables for Application Insights but you don&#8217;t need those). <\/p>\n\n\n\n<p>Once done push your code to Azure DevOps like we did in the previous tutorial and construct your pipelines identically (I&#8217;d even recommend just cloning the pipelines we made before and changing the repo and the environment variables). That should be it!<\/p>\n\n\n\n<p>We have been using HTTP application routing provided by Azure to access our website\/api but the next tutorial will focus on deploying our our <a href=\"https:\/\/www.nginx.com\/\">NGINX<\/a> Ingress controller which will leverage <a href=\"https:\/\/letsencrypt.org\/\">Let&#8217;s Encrypt<\/a> for HTTPS &#8211; this will all be declared in code and deployed using Azure DevOps (of course!).<\/p>\n","feature_image":"/content/images/wordpress\/2019\/05\/image-49.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 26 May 2019 13:59:21 +0000","created_by":1,"updated_at":"Sun, 29 Mar 2020 15:15:04 +0000","updated_by":1,"published_at":"Sun, 26 May 2019 13:59:21 +0000","published_by":1},{"id":358,"title":"Deploying an HTTPS Ingress Controller to Azure Kubernetes Service (AKS) using Azure DevOps","slug":"temp-slug-26","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>This is the third article in a series exploring deploying services to Azure Kubernetes Service using Azure DevOps. This article will cover deploying an HTTPS ingress controller to your AKS instance to act as a gateway between your services and the outside world.<\/p>\\n\\n\\n\\n<p>When we have deployed services to AKS in the past we have used &#8216;HTTP Application Routing&#8217; provided by Azure, this is good for getting things up and running quickly but we don&#8217;t want to use this in a production environment for a few reasons; firstly it does not support HTTPS (I&#8217;m sure I don&#8217;t need to go into the downsides of this) and secondly we get no control over how the routing is done. I&#8217;d recommend starting from scratch with your AKS instance <\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>This is the third article in a series exploring deploying services to Azure Kubernetes Service using Azure DevOps. This article will cover deploying an HTTPS ingress controller to your AKS instance to act as a gateway between your services and the outside world.<\/p>\n\n\n\n<p>When we have deployed services to AKS in the past we have used &#8216;HTTP Application Routing&#8217; provided by Azure, this is good for getting things up and running quickly but we don&#8217;t want to use this in a production environment for a few reasons; firstly it does not support HTTPS (I&#8217;m sure I don&#8217;t need to go into the downsides of this) and secondly we get no control over how the routing is done. I&#8217;d recommend starting from scratch with your AKS instance <\/p>\n","feature_image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 29 May 2019 12:51:55 +0000","created_by":1,"updated_at":"Wed, 29 May 2019 12:51:55 +0000","updated_by":1,"published_at":"","published_by":1},{"id":434,"title":"Installing Bosun in a Production Environment  - Part 3","slug":"installing-bosun-in-a-production-environment-part-3","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>Parts 1, 2, 3 and 4 of this series can be found at the following locations: <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\\\">Part 1<\/a>, <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\\\">Part 2<\/a>, <a href=\\\"http:\/\/tomaustin.xyz\/2019\/06\/01\/installing-bosun-in-a-production-environment-part-3\/\\\">Part 3<\/a> and <a href=\\\"http:\/\/tomaustin.xyz\/2019\/06\/08\/installing-bosun-in-a-production-environment-part-4\/\\\">Part 4<\/a>.<\/p>\\n\\n\\n\\n<p>This is the third article in this series covering how to install <a href=\\\"http:\/\/bosun.org\\\">Bosun<\/a> in a production environment. The first two articles covered the <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\\\">installation of Bosun<\/a> and then <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\\\">configuring TSDBRelay to relay and aggregate data<\/a> for us. This article is going to explore how we can load balance between multiple TSDBRelay instances with <a href=\\\"http:\/\/www.haproxy.org\/\\\">HAProxy<\/a>.<\/p>\\n\\n\\n\\n<p>Unfortunately Bosun does not support being ran in a load balanced configuration which is not great when we need high availability; <a href=\\\"https:\/\/twitter.com\/tomaustin700\/status\/1121780945634373633\\\">I have discussed this with Bosun&#8217;s creator Kyle Brandt<\/a> and there is also a <a href=\\\"https:\/\/github.com\/bosun-monitor\/bosun\/pull\/2345\\\">Pull Request<\/a> proposing changes to support a Bosun cluster but this is yet to be merged in. So what do we do if we don&#8217;t want to worry about Bosun being there when we send data? As discussed in the previous article we can utilise TSDBRelay to get Bosun out of the &#8216;crtical path&#8217; by forwarding the data directly to our OpenTSDB server however because our applications will send data to TSDBRelay instead of Bosun we need to make TSDBRelay highly available. Fortunately TSDBRelay does support being ran in a load balanced configuration so we are going to add a second (you can add as many as you wish) TSDBRelay instance and then use HAProxy to load balance between them.<\/p>\\n\\n\\n\\n<p><strong>Create second TSDBRelay instance<\/strong><\/p>\\n\\n\\n\\n<p>Let&#8217;s start by creating a second TSDBRelay instance! I&#8217;m not going to go into too much detail about how to do this as the process is covered in depth in the <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\\\">previous article<\/a>. The basic process is create an Ubuntu instance (or other distro of your liking), install Go 1.11.2, pull TSDBRelay from GitHub and finally install and configure Supervisor to run TSDBRelay. Ideally I&#8217;d recommend having at least three instances but you are really free to add as many as you want.<\/p>\\n\\n\\n\\n<p><strong>Install and Confiure HAProxy<\/strong><\/p>\\n\\n\\n\\n<p>Create a Linux VM using your distro of choice (as usual I am using Ubuntu 18.04), SSH into it and run apt-get update to make sure everything is up-to-date.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo apt-get update<\/code><\/pre>\\n\\n\\n\\n<p>Once done let&#8217;s install HAProxy<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo apt-get install haproxy<\/code><\/pre>\\n\\n\\n\\n<p> Once HAProxy is downloaded and installed we need to enable the init script, this will allow HAProxy to autostart. Run the following command to edit the script with Nano. <\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/etc\/default\/haproxy<\/code><\/pre>\\n\\n\\n\\n<p>Append Enabled=1 to the file and then save and close (ctrl+o, enter, ctrl+x).<\/p>\\n\\n\\n\\n<p>Now let&#8217;s open the config file using nano and start configuring our load balancer.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/etc\/haproxy\/haproxy.cfg<\/code><\/pre>\\n\\n\\n\\n<p>Firstly let&#8217;s set the default mode to tcp and option to tcplog. Update these in the &#8216;defaults&#8217; section.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>        mode    tcp\\n        option  tcplog<\/code><\/pre>\\n\\n\\n\\n<p>At the bottom of the file we are now going to add a frontend, this will instruct HAProxy what to listen and which backend to use. Append the following to the bottom of the config file.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>frontend tsdbrelay\\n   bind 0.0.0.0:5252\\n   default_backend tsdbrelay-backend\\n<\/code><\/pre>\\n\\n\\n\\n<p>This config is just telling HAProxy to listen on port 5252 and use the backend &#8216;tsdbrelay-backend&#8217; which we will now specify.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>backend tsdbrelay-backend\\n   balance roundrobin\\n   mode tcp\\n   server tsdbrelay1 10.0.0.8:5252 check\\n   server tsdbrelay2 10.0.0.10:5252 check<\/code><\/pre>\\n\\n\\n\\n<p>Set the tsdbrelay1 and 2 ip addresses and ports to the ip address and ports of your TSDBRelay instances, if you are using more than two instance then keep adding servers to the file until they are all specified.<\/p>\\n\\n\\n\\n<p>If your HAPRoxy instance is not externally facing then you could enable the stats dashboard by adding the following configuration to the configuration file, this is not really necessary but it&#8217;s nice to see what HAProxy is doing. Make sure you replace admin:pass with strong credentials.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>listen  stats\\n        bind :80\\n        mode            http\\n        log             global\\n\\n        maxconn 10\\n\\n        clitimeout      100s\\n        srvtimeout      100s\\n        contimeout      100s\\n        timeout queue   100s\\n\\n        stats enable\\n        stats hide-version\\n        stats refresh 30s\\n        stats show-node\\n        stats auth admin:pass\\n        stats uri  \/haproxy?stats\\n<\/code><\/pre>\\n\\n\\n\\n<p>A complete copy of my HAPRoxy configuration  file can be found <a href=\\\"https:\/\/gist.github.com\/tomaustin700\/5bcb731abb1427cf810be96a3175c772\\\">here<\/a>.<\/p>\\n\\n\\n\\n<p>Once you are happy with your configuration save and exit and then restart HAProxy<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo service haproxy restart<\/code><\/pre>\\n\\n\\n\\n<p>Now instead of sending data to TSDBRelay we can send data to HAProxy which will then load balance the data between our TSDBRelay instances.<\/p>\\n\\n\\n\\n<p>The<a href=\\\"http:\/\/tomaustin.xyz\/2019\/06\/08\/installing-bosun-in-a-production-environment-part-4\/\\\"> next and final article<\/a> will cover installing <a href=\\\"https:\/\/bosun.org\/scollector\/\\\">scollector<\/a> to gather data about our Bosun, TSDBRelay and HAProxy instances and then send that data to Bosun.<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>Parts 1, 2, 3 and 4 of this series can be found at the following locations: <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\">Part 1<\/a>, <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\">Part 2<\/a>, <a href=\"http:\/\/tomaustin.xyz\/2019\/06\/01\/installing-bosun-in-a-production-environment-part-3\/\">Part 3<\/a> and <a href=\"http:\/\/tomaustin.xyz\/2019\/06\/08\/installing-bosun-in-a-production-environment-part-4\/\">Part 4<\/a>.<\/p>\n\n\n\n<p>This is the third article in this series covering how to install <a href=\"http:\/\/bosun.org\">Bosun<\/a> in a production environment. The first two articles covered the <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\">installation of Bosun<\/a> and then <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\">configuring TSDBRelay to relay and aggregate data<\/a> for us. This article is going to explore how we can load balance between multiple TSDBRelay instances with <a href=\"http:\/\/www.haproxy.org\/\">HAProxy<\/a>.<\/p>\n\n\n\n<p>Unfortunately Bosun does not support being ran in a load balanced configuration which is not great when we need high availability; <a href=\"https:\/\/twitter.com\/tomaustin700\/status\/1121780945634373633\">I have discussed this with Bosun&#8217;s creator Kyle Brandt<\/a> and there is also a <a href=\"https:\/\/github.com\/bosun-monitor\/bosun\/pull\/2345\">Pull Request<\/a> proposing changes to support a Bosun cluster but this is yet to be merged in. So what do we do if we don&#8217;t want to worry about Bosun being there when we send data? As discussed in the previous article we can utilise TSDBRelay to get Bosun out of the &#8216;crtical path&#8217; by forwarding the data directly to our OpenTSDB server however because our applications will send data to TSDBRelay instead of Bosun we need to make TSDBRelay highly available. Fortunately TSDBRelay does support being ran in a load balanced configuration so we are going to add a second (you can add as many as you wish) TSDBRelay instance and then use HAProxy to load balance between them.<\/p>\n\n\n\n<p><strong>Create second TSDBRelay instance<\/strong><\/p>\n\n\n\n<p>Let&#8217;s start by creating a second TSDBRelay instance! I&#8217;m not going to go into too much detail about how to do this as the process is covered in depth in the <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\">previous article<\/a>. The basic process is create an Ubuntu instance (or other distro of your liking), install Go 1.11.2, pull TSDBRelay from GitHub and finally install and configure Supervisor to run TSDBRelay. Ideally I&#8217;d recommend having at least three instances but you are really free to add as many as you want.<\/p>\n\n\n\n<p><strong>Install and Confiure HAProxy<\/strong><\/p>\n\n\n\n<p>Create a Linux VM using your distro of choice (as usual I am using Ubuntu 18.04), SSH into it and run apt-get update to make sure everything is up-to-date.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get update<\/code><\/pre>\n\n\n\n<p>Once done let&#8217;s install HAProxy<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install haproxy<\/code><\/pre>\n\n\n\n<p> Once HAProxy is downloaded and installed we need to enable the init script, this will allow HAProxy to autostart. Run the following command to edit the script with Nano. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/etc\/default\/haproxy<\/code><\/pre>\n\n\n\n<p>Append Enabled=1 to the file and then save and close (ctrl+o, enter, ctrl+x).<\/p>\n\n\n\n<p>Now let&#8217;s open the config file using nano and start configuring our load balancer.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/etc\/haproxy\/haproxy.cfg<\/code><\/pre>\n\n\n\n<p>Firstly let&#8217;s set the default mode to tcp and option to tcplog. Update these in the &#8216;defaults&#8217; section.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>        mode    tcp\n        option  tcplog<\/code><\/pre>\n\n\n\n<p>At the bottom of the file we are now going to add a frontend, this will instruct HAProxy what to listen and which backend to use. Append the following to the bottom of the config file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>frontend tsdbrelay\n   bind 0.0.0.0:5252\n   default_backend tsdbrelay-backend\n<\/code><\/pre>\n\n\n\n<p>This config is just telling HAProxy to listen on port 5252 and use the backend &#8216;tsdbrelay-backend&#8217; which we will now specify.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>backend tsdbrelay-backend\n   balance roundrobin\n   mode tcp\n   server tsdbrelay1 10.0.0.8:5252 check\n   server tsdbrelay2 10.0.0.10:5252 check<\/code><\/pre>\n\n\n\n<p>Set the tsdbrelay1 and 2 ip addresses and ports to the ip address and ports of your TSDBRelay instances, if you are using more than two instance then keep adding servers to the file until they are all specified.<\/p>\n\n\n\n<p>If your HAPRoxy instance is not externally facing then you could enable the stats dashboard by adding the following configuration to the configuration file, this is not really necessary but it&#8217;s nice to see what HAProxy is doing. Make sure you replace admin:pass with strong credentials.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>listen  stats\n        bind :80\n        mode            http\n        log             global\n\n        maxconn 10\n\n        clitimeout      100s\n        srvtimeout      100s\n        contimeout      100s\n        timeout queue   100s\n\n        stats enable\n        stats hide-version\n        stats refresh 30s\n        stats show-node\n        stats auth admin:pass\n        stats uri  \/haproxy?stats\n<\/code><\/pre>\n\n\n\n<p>A complete copy of my HAPRoxy configuration  file can be found <a href=\"https:\/\/gist.github.com\/tomaustin700\/5bcb731abb1427cf810be96a3175c772\">here<\/a>.<\/p>\n\n\n\n<p>Once you are happy with your configuration save and exit and then restart HAProxy<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo service haproxy restart<\/code><\/pre>\n\n\n\n<p>Now instead of sending data to TSDBRelay we can send data to HAProxy which will then load balance the data between our TSDBRelay instances.<\/p>\n\n\n\n<p>The<a href=\"http:\/\/tomaustin.xyz\/2019\/06\/08\/installing-bosun-in-a-production-environment-part-4\/\"> next and final article<\/a> will cover installing <a href=\"https:\/\/bosun.org\/scollector\/\">scollector<\/a> to gather data about our Bosun, TSDBRelay and HAProxy instances and then send that data to Bosun.<\/p>\n","feature_image":"/content/images/wordpress\/2019\/06\/bosun.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 01 Jun 2019 15:42:56 +0000","created_by":1,"updated_at":"Sun, 29 Mar 2020 15:27:17 +0000","updated_by":1,"published_at":"Sat, 01 Jun 2019 15:42:56 +0000","published_by":1},{"id":446,"title":"Installing Bosun in a Production Environment - Part 4","slug":"installing-bosun-in-a-production-environment-part-4","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>Parts 1, 2 and 3 of this series can be found at the following locations: <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\\\">Part 1<\/a>, <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\\\">Part 2<\/a> and <a href=\\\"http:\/\/tomaustin.xyz\/2019\/06\/01\/installing-bosun-in-a-production-environment-part-3\/\\\">Part 3<\/a>.<\/p>\\n\\n\\n\\n<p>This is the final article in this series covering how to install <a href=\\\"https:\/\/bosun.org\/\\\">Bosun<\/a> in a production environment. The previous articles showed you how to <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\\\">install Bosun<\/a>, <a href=\\\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\\\">configure TSDBRelay to relay and aggregate data<\/a> and then run TSDBRelay in a load balanced configuration using <a href=\\\"http:\/\/tomaustin.xyz\/2019\/06\/01\/installing-bosun-in-a-production-environment-part-3\/\\\">HAProxy<\/a>. This final article will guide you through installing <a href=\\\"https:\/\/bosun.org\/scollector\/\\\">Scollector<\/a> on your servers to collect metrics for Bosun. Scollector is a metric collection agent and has collectors for Linux, Darwin and Windows. We are going to be installing it on our Bosun server as well as our TSDBRelay instances and our HAProxy instance. The installations steps will be identical on every server as all of our existing servers are Ubuntu 18.04 so I will only go through the process once but do make sure you install it on every server. If you do want to install Scollector on a Windows box I already have a tutorial showing how to do that <a href=\\\"http:\/\/tomaustin.xyz\/2018\/12\/13\/sending-windows-data-to-bosun-using-scollector\/\\\">here<\/a>.<\/p>\\n\\n\\n\\n<p>We are going to need to install GO and then Supervisor before we can install and configure Scollector and these steps are identical to those carried out in the first and second article so if you are wanting to install Scollector on a server which already has GO and Supervisor installed skip to the &#8216;Pull Scollector from Github&#8217; section.<\/p>\\n\\n\\n\\n<p><strong>Install GO<\/strong><\/p>\\n\\n\\n\\n<p>You will only need to install GO on your HAProxy instance as our Bosun and TSDBRelay servers already have GO installed.<\/p>\\n\\n\\n\\n<p>Scollector requires <a href=\\\"https:\/\/github.com\/golang\/go\/issues?q=milestone%3AGo1.11.2\\\">version 1.11.2<\/a> of <a href=\\\"https:\/\/golang.org\/\\\">Go<\/a> to run so the first thing we need is download that version and install it. If you have followed the steps to install Bosun and TSDBRelay you should be familiar with these commands by now. SSH into your HAProxy server and run the following commands:  <\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>curl -O https:\/\/dl.google.com\/go\/go1.11.2.linux-amd64.tar.gz<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>tar -xvf go1.11.2.linux-amd64.tar.gz   <\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo mv go \/usr\/local<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano  ~\/.profile<\/code><\/pre>\\n\\n\\n\\n<p> Add the following to the end of the file then save and exit (ctrl+o, enter, ctrl+x) <\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>export GOPATH=$HOME\/work\\nexport PATH=$PATH:\/usr\/local\/go\/bin:$GOPATH\/bin\\ufeff<\/code><\/pre>\\n\\n\\n\\n<p>One last command now before GO should be installed: <\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>source ~\/.profile<\/code><\/pre>\\n\\n\\n\\n<p>To check everything worked correctly we can run &#8216;go version&#8217; and check the response: <\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>go version<\/code><\/pre>\\n\\n\\n\\n<p>And we should get: <\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>go version go1.11.2 linux\/amd64<\/code><\/pre>\\n\\n\\n\\n<p>I<strong>nstall Supervisor<\/strong><\/p>\\n\\n\\n\\n<p>Like when we installed TSDBRelay we are going to use Supervisor to control the Scollector process. Install Supervisor with the following command:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo apt-get install supervisor<\/code><\/pre>\\n\\n\\n\\n<p><strong>Pull Scollector from Github<\/strong><\/p>\\n\\n\\n\\n<p>Like when we have previously pulled from Github we are going to start by creating a directory for Scollector before using Wget to download Scollector.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo mkdir -m 777 \/scollector<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo wget -O \/scollector\/scollector https:\/\/github.com\/bosun-monitor\/bosun\/releases\/download\/0.8.0-preview\/scollector-linux-amd64<\/code><\/pre>\\n\\n\\n\\n<p> Now we can use <a href=\\\"https:\/\/www.poftut.com\/chmod-x-command-linux-unix\/\\\">chmod<\/a> to mark Scollector as executable. <\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo chmod +x \/scollector\/scollector<\/code><\/pre>\\n\\n\\n\\n<p>Now we need to create our scollector.toml configuration file, normally you wont need to do this however if you are wanting to gather HAProxy metrics it is needed &#8211; skip this step if you are not requiring those.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/scollector\/scollector.toml<\/code><\/pre>\\n\\n\\n\\n<p>Enter the following into the file, this will instruct Scollector to gather HAProxy metrics.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>[[HAProxy]]\\n  User = \\\"admin\\\"\\n  Password = \\\"pass\\\"\\n  [[HAProxy.Instances]]\\n    Tier = \\\"1\\\"\\n    URL = \\\"http:\/\/0.0.0.0\/haproxy?stats;csv\\\"<\/code><\/pre>\\n\\n\\n\\n<p> <strong>Create a Supervisor file to run Scollector<\/strong><\/p>\\n\\n\\n\\n<p>Just like when we have previously used Supervisor to run Bosun and TSDBRelay we are going to create a configuration file to run Scollector.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/etc\/supervisor\/conf.d\/scollector.conf<\/code><\/pre>\\n\\n\\n\\n<p><a href=\\\"https:\/\/gist.github.com\/tomaustin700\/fd61d66ed6d2d5cd3b8f291b9e148320\\\">Here<\/a> is a basic config file for you to use. The ip address after -h is the address of our HAProxy instance (0.0.0.0 in this case as we are installing Scollector on the HAProxy server). You don&#8217;t need to specify the location of the scollector.toml file as it will be auto detected if it is in the same location as Scollector.<\/p>\\n\\n\\n\\n<p> Now let&#8217;s tell supervisor to reread and update <\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo supervisorctl reread<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo supervisorctl update<\/code><\/pre>\\n\\n\\n\\n<p>That should be it for HAProxy. If we navigate to Bosun we should see HAProxy under the list of hosts, if we then click on the server and navigate to &#8216;Available Metrics&#8217; we should see our HAProxy data.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image.png?resize=395%2C417\\\" alt=\\\"\\\" class=\\\"wp-image-458\\\" width=\\\"395\\\" height=\\\"417\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image.png?w=447 447w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image.png?resize=284%2C300 284w\\\" sizes=\\\"(max-width: 395px) 100vw, 395px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Now repeat these steps on your other servers. Remember that if you are only wanting system metrics and nothing bespoke you don&#8217;t need to specify the scollector.toml file.<\/p>\\n\\n\\n\\n<p>Once done you should now be able to see a whole host of metrics from all your servers within Bosun. You can now start creating expressions to view this data and add rules using the Rule Editor to alert you when things are going wrong.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-gallery columns-3 is-cropped aligncenter\\\"><ul class=\\\"blocks-gallery-grid\\\"><li class=\\\"blocks-gallery-item\\\"><figure><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"445\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-4.png?resize=640%2C445\\\" alt=\\\"\\\" data-id=\\\"469\\\" data-link=\\\"http:\/\/tomaustin.xyz\/?attachment_id=469\\\" class=\\\"wp-image-469\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-4.png?w=1201 1201w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-4.png?resize=300%2C209 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-4.png?resize=768%2C535 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-4.png?resize=1024%2C713 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-4.png?resize=720%2C501 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/li><li class=\\\"blocks-gallery-item\\\"><figure><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"449\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-3.png?resize=640%2C449\\\" alt=\\\"\\\" data-id=\\\"468\\\" data-link=\\\"http:\/\/tomaustin.xyz\/?attachment_id=468\\\" class=\\\"wp-image-468\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-3.png?w=1201 1201w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-3.png?resize=300%2C211 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-3.png?resize=768%2C539 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-3.png?resize=1024%2C719 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-3.png?resize=720%2C505 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/li><li class=\\\"blocks-gallery-item\\\"><figure><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"431\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-2.png?resize=640%2C431\\\" alt=\\\"\\\" data-id=\\\"467\\\" data-link=\\\"http:\/\/tomaustin.xyz\/?attachment_id=467\\\" class=\\\"wp-image-467\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-2.png?w=1203 1203w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-2.png?resize=300%2C202 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-2.png?resize=768%2C518 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-2.png?resize=1024%2C690 1024w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-2.png?resize=720%2C485 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/li><li class=\\\"blocks-gallery-item\\\"><figure><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"415\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-1.png?resize=640%2C415\\\" alt=\\\"\\\" data-id=\\\"466\\\" data-link=\\\"http:\/\/tomaustin.xyz\/?attachment_id=466\\\" class=\\\"wp-image-466\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-1.png?w=1208 1208w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-1.png?resize=300%2C195 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-1.png?resize=768%2C498 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-1.png?resize=1024%2C665 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-1.png?resize=720%2C467 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/li><\/ul><\/figure>\\n\\n\\n\\n<p>If you would like to build the entire environment in Azure <a href=\\\"http:\/\/tomaustin.xyz\/download\/463\/\\\">here<\/a> are the template files to allow you to do that easily. I hope this series helped you and if you need help or have any questions please leave a comment.<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>Parts 1, 2 and 3 of this series can be found at the following locations: <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\">Part 1<\/a>, <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\">Part 2<\/a> and <a href=\"http:\/\/tomaustin.xyz\/2019\/06\/01\/installing-bosun-in-a-production-environment-part-3\/\">Part 3<\/a>.<\/p>\n\n\n\n<p>This is the final article in this series covering how to install <a href=\"https:\/\/bosun.org\/\">Bosun<\/a> in a production environment. The previous articles showed you how to <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/05\/installing-bosun-in-a-production-environment\/\">install Bosun<\/a>, <a href=\"http:\/\/tomaustin.xyz\/2019\/05\/11\/installing-bosun-in-a-production-environment-part-2\/\">configure TSDBRelay to relay and aggregate data<\/a> and then run TSDBRelay in a load balanced configuration using <a href=\"http:\/\/tomaustin.xyz\/2019\/06\/01\/installing-bosun-in-a-production-environment-part-3\/\">HAProxy<\/a>. This final article will guide you through installing <a href=\"https:\/\/bosun.org\/scollector\/\">Scollector<\/a> on your servers to collect metrics for Bosun. Scollector is a metric collection agent and has collectors for Linux, Darwin and Windows. We are going to be installing it on our Bosun server as well as our TSDBRelay instances and our HAProxy instance. The installations steps will be identical on every server as all of our existing servers are Ubuntu 18.04 so I will only go through the process once but do make sure you install it on every server. If you do want to install Scollector on a Windows box I already have a tutorial showing how to do that <a href=\"http:\/\/tomaustin.xyz\/2018\/12\/13\/sending-windows-data-to-bosun-using-scollector\/\">here<\/a>.<\/p>\n\n\n\n<p>We are going to need to install GO and then Supervisor before we can install and configure Scollector and these steps are identical to those carried out in the first and second article so if you are wanting to install Scollector on a server which already has GO and Supervisor installed skip to the &#8216;Pull Scollector from Github&#8217; section.<\/p>\n\n\n\n<p><strong>Install GO<\/strong><\/p>\n\n\n\n<p>You will only need to install GO on your HAProxy instance as our Bosun and TSDBRelay servers already have GO installed.<\/p>\n\n\n\n<p>Scollector requires <a href=\"https:\/\/github.com\/golang\/go\/issues?q=milestone%3AGo1.11.2\">version 1.11.2<\/a> of <a href=\"https:\/\/golang.org\/\">Go<\/a> to run so the first thing we need is download that version and install it. If you have followed the steps to install Bosun and TSDBRelay you should be familiar with these commands by now. SSH into your HAProxy server and run the following commands:  <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>curl -O https:\/\/dl.google.com\/go\/go1.11.2.linux-amd64.tar.gz<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>tar -xvf go1.11.2.linux-amd64.tar.gz   <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo mv go \/usr\/local<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano  ~\/.profile<\/code><\/pre>\n\n\n\n<p> Add the following to the end of the file then save and exit (ctrl+o, enter, ctrl+x) <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>export GOPATH=$HOME\/work\nexport PATH=$PATH:\/usr\/local\/go\/bin:$GOPATH\/bin\ufeff<\/code><\/pre>\n\n\n\n<p>One last command now before GO should be installed: <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>source ~\/.profile<\/code><\/pre>\n\n\n\n<p>To check everything worked correctly we can run &#8216;go version&#8217; and check the response: <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>go version<\/code><\/pre>\n\n\n\n<p>And we should get: <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>go version go1.11.2 linux\/amd64<\/code><\/pre>\n\n\n\n<p>I<strong>nstall Supervisor<\/strong><\/p>\n\n\n\n<p>Like when we installed TSDBRelay we are going to use Supervisor to control the Scollector process. Install Supervisor with the following command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install supervisor<\/code><\/pre>\n\n\n\n<p><strong>Pull Scollector from Github<\/strong><\/p>\n\n\n\n<p>Like when we have previously pulled from Github we are going to start by creating a directory for Scollector before using Wget to download Scollector.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo mkdir -m 777 \/scollector<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo wget -O \/scollector\/scollector https:\/\/github.com\/bosun-monitor\/bosun\/releases\/download\/0.8.0-preview\/scollector-linux-amd64<\/code><\/pre>\n\n\n\n<p> Now we can use <a href=\"https:\/\/www.poftut.com\/chmod-x-command-linux-unix\/\">chmod<\/a> to mark Scollector as executable. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo chmod +x \/scollector\/scollector<\/code><\/pre>\n\n\n\n<p>Now we need to create our scollector.toml configuration file, normally you wont need to do this however if you are wanting to gather HAProxy metrics it is needed &#8211; skip this step if you are not requiring those.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/scollector\/scollector.toml<\/code><\/pre>\n\n\n\n<p>Enter the following into the file, this will instruct Scollector to gather HAProxy metrics.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>[[HAProxy]]\n  User = \"admin\"\n  Password = \"pass\"\n  [[HAProxy.Instances]]\n    Tier = \"1\"\n    URL = \"http:\/\/0.0.0.0\/haproxy?stats;csv\"<\/code><\/pre>\n\n\n\n<p> <strong>Create a Supervisor file to run Scollector<\/strong><\/p>\n\n\n\n<p>Just like when we have previously used Supervisor to run Bosun and TSDBRelay we are going to create a configuration file to run Scollector.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/etc\/supervisor\/conf.d\/scollector.conf<\/code><\/pre>\n\n\n\n<p><a href=\"https:\/\/gist.github.com\/tomaustin700\/fd61d66ed6d2d5cd3b8f291b9e148320\">Here<\/a> is a basic config file for you to use. The ip address after -h is the address of our HAProxy instance (0.0.0.0 in this case as we are installing Scollector on the HAProxy server). You don&#8217;t need to specify the location of the scollector.toml file as it will be auto detected if it is in the same location as Scollector.<\/p>\n\n\n\n<p> Now let&#8217;s tell supervisor to reread and update <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo supervisorctl reread<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo supervisorctl update<\/code><\/pre>\n\n\n\n<p>That should be it for HAProxy. If we navigate to Bosun we should see HAProxy under the list of hosts, if we then click on the server and navigate to &#8216;Available Metrics&#8217; we should see our HAProxy data.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img loading=\"lazy\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image.png?resize=395%2C417\" alt=\" class=\"wp-image-458\" width=\"395\" height=\"417\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image.png?w=447 447w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image.png?resize=284%2C300 284w\" sizes=\"(max-width: 395px) 100vw, 395px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Now repeat these steps on your other servers. Remember that if you are only wanting system metrics and nothing bespoke you don&#8217;t need to specify the scollector.toml file.<\/p>\n\n\n\n<p>Once done you should now be able to see a whole host of metrics from all your servers within Bosun. You can now start creating expressions to view this data and add rules using the Rule Editor to alert you when things are going wrong.<\/p>\n\n\n\n<figure class=\"wp-block-gallery columns-3 is-cropped aligncenter\"><ul class=\"blocks-gallery-grid\"><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"640\" height=\"445\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-4.png?resize=640%2C445\" alt=\" data-id=\"469\" data-link=\"http:\/\/tomaustin.xyz\/?attachment_id=469\" class=\"wp-image-469\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-4.png?w=1201 1201w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-4.png?resize=300%2C209 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-4.png?resize=768%2C535 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-4.png?resize=1024%2C713 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-4.png?resize=720%2C501 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure><\/li><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"640\" height=\"449\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-3.png?resize=640%2C449\" alt=\" data-id=\"468\" data-link=\"http:\/\/tomaustin.xyz\/?attachment_id=468\" class=\"wp-image-468\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-3.png?w=1201 1201w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-3.png?resize=300%2C211 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-3.png?resize=768%2C539 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-3.png?resize=1024%2C719 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-3.png?resize=720%2C505 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure><\/li><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"640\" height=\"431\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-2.png?resize=640%2C431\" alt=\" data-id=\"467\" data-link=\"http:\/\/tomaustin.xyz\/?attachment_id=467\" class=\"wp-image-467\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-2.png?w=1203 1203w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-2.png?resize=300%2C202 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-2.png?resize=768%2C518 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-2.png?resize=1024%2C690 1024w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-2.png?resize=720%2C485 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure><\/li><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"640\" height=\"415\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-1.png?resize=640%2C415\" alt=\" data-id=\"466\" data-link=\"http:\/\/tomaustin.xyz\/?attachment_id=466\" class=\"wp-image-466\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-1.png?w=1208 1208w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-1.png?resize=300%2C195 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-1.png?resize=768%2C498 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-1.png?resize=1024%2C665 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2019\/06\/image-1.png?resize=720%2C467 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure><\/li><\/ul><\/figure>\n\n\n\n<p>If you would like to build the entire environment in Azure <a href=\"http:\/\/tomaustin.xyz\/download\/463\/\">here<\/a> are the template files to allow you to do that easily. I hope this series helped you and if you need help or have any questions please leave a comment.<\/p>\n","feature_image":"/content/images/wordpress\/2019\/06\/bosun.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 08 Jun 2019 20:03:23 +0000","created_by":1,"updated_at":"Sun, 29 Mar 2020 15:27:03 +0000","updated_by":1,"published_at":"Sat, 08 Jun 2019 20:03:23 +0000","published_by":1},{"id":489,"title":"Using Optimizely for Feature Flagging in a WPF Application","slug":"temp-slug-29","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"","feature_image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 07 Aug 2019 16:46:10 +0000","created_by":1,"updated_at":"Wed, 07 Aug 2019 16:46:10 +0000","updated_by":1,"published_at":"","published_by":1},{"id":516,"title":"Deploying Selenium Grid to Azure Kubernetes Service (AKS) using Azure DevOps","slug":"deploying-selenium-grid-to-azure-kubernetes-service-aks-using-azure-devops","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p><strong>This article focuses on deploying Selenium Grid 3 which is now obsolete please see the <a href=\\\"https:\/\/tomaustin.xyz\/?p=694\\\">following article<\/a> which shows the same deployment process for Selenium Grid 4.<\/strong><\/p>\\n\\n\\n\\n<p>I&#8217;ve recently started using <a href=\\\"https:\/\/selenium.dev\/\\\">Selenium<\/a> for UI testing some web applications and I kept seeing <a href=\\\"https:\/\/selenium.dev\/documentation\/en\/grid\/\\\">Selenium Grid<\/a> being mentioned so decided to take a look at it. For those of you who don&#8217;t know about Selenium Grid it allows you to distribute your tests over several machines by sending your tests to a &#8216;hub&#8217; which will then distribute your tests for you over your &#8216;nodes&#8217;. The thing that really interested me about this was that everything could be run from Docker containers so within a few minutes I had all the infrastructure running locally via a compose file. This is all well and good but what if we wanted to have more than a handful nodes? AKS seemed like a good fit.<\/p>\\n\\n\\n\\n<p>Before we start I&#8217;m going to presume you already have an AKS instance running with an ingress controller deployed, it would also be good if you were also familiar with kubectl (for debugging more than anything). One thing to be aware of is that each node container requires about 1GB of RAM so if you intend on running a lot you&#8217;re going to need a pretty powerful AKS instance. I have vm size set to B2ms for the instances within the scale set but even this won&#8217;t be enough if you want to run more than a few nodes.<\/p>\\n\\n\\n\\n<p>Luckily for us Selenium already have<a href=\\\"https:\/\/github.com\/SeleniumHQ\/docker-selenium\\\"> Docker containers<\/a> for the hub and the nodes so all we really need to do is deploy them to AKS. For this I&#8217;m going to be using Helm 3 as it&#8217;s quick and easy. We are going to need to <a href=\\\"https:\/\/helm.sh\/\\\">Helm<\/a> charts to deploy but I&#8217;ve already done the hard work and built those, you can find them on my GitHub <a href=\\\"https:\/\/github.com\/tomaustin700\/AKSSeleniumGrid\\\">here<\/a>. If you do intend on using my charts then you&#8217;re probably going to want to Fork the repo so you can tweak the replica count for yourself. <\/p>\\n\\n\\n\\n<p>Let&#8217;s go to <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/\\\">Azure DevOps<\/a> and create a new project. Once completed we are going to want to build a pipeline and a release process. The pipeline will publish the charts and the release process will deploy the charts to AKS. Go to Pipelines and select the &#8216;New pipeline&#8217; button in the top right. I&#8217;m going to be using the classic pipeline editor as it&#8217;s a bit easier to follow along with so select &#8216;Use the classic editor&#8217; at the bottom.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image.png?resize=482%2C500\\\" alt=\\\"\\\" class=\\\"wp-image-517\\\" width=\\\"482\\\" height=\\\"500\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image.png?w=494 494w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image.png?resize=289%2C300 289w\\\" sizes=\\\"(max-width: 482px) 100vw, 482px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>On the next page select GitHub as your source and select the Repository you cloned earlier.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-1.png?resize=431%2C502\\\" alt=\\\"\\\" class=\\\"wp-image-518\\\" width=\\\"431\\\" height=\\\"502\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-1.png?w=505 505w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-1.png?resize=258%2C300 258w\\\" sizes=\\\"(max-width: 431px) 100vw, 431px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>When prompted to select a template just click &#8216;Empty job&#8217;. We are only going to need one build task so no templates are required! Add the &#8216;Publish build artifacts&#8217; task and configure it to match the screenshot below.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-2.png?resize=440%2C481\\\" alt=\\\"\\\" class=\\\"wp-image-519\\\" width=\\\"440\\\" height=\\\"481\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-2.png?w=510 510w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-2.png?resize=275%2C300 275w\\\" sizes=\\\"(max-width: 440px) 100vw, 440px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>That&#8217;s pretty much it for the pipeline. You may want to turn on continuous integration if you want any changes to auto deploy (Triggers &gt; Enable continuous integration). Lets hit &#8216;Save &amp; queue&#8217; and hopefully after a few seconds the pipeline will complete with a nice green tick.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-3.png?resize=640%2C133\\\" alt=\\\"\\\" class=\\\"wp-image-521\\\" width=\\\"640\\\" height=\\\"133\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-3.png?w=822 822w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-3.png?resize=300%2C63 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-3.png?resize=768%2C161 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-3.png?resize=720%2C151 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Now let&#8217;s add a Release pipeline to deploy our charts. Click Releases and select click the + New button, then select &#8216;New release pipeline&#8217;. When prompted select &#8216;Empty job&#8217; like we did before. To start let&#8217;s add an artifact so click &#8216;Add an artifact&#8217; and select your build pipeline for the Source, it should auto-populate the rest of the fields and then click Add.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-4.png?resize=522%2C568\\\" alt=\\\"\\\" class=\\\"wp-image-522\\\" width=\\\"522\\\" height=\\\"568\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-4.png?w=612 612w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-4.png?resize=276%2C300 276w\\\" sizes=\\\"(max-width: 522px) 100vw, 522px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>At this point I always enable continuous deployment so click the trigger button (lightning bolt) and Enable the deployment. This will automatically deploy our Helm charts whenever new build artifacts are published.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"396\\\" height=\\\"356\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-5.png?resize=396%2C356\\\" alt=\\\"\\\" class=\\\"wp-image-523\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-5.png?w=396 396w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-5.png?resize=300%2C270 300w\\\" sizes=\\\"(max-width: 396px) 100vw, 396px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>All we have to do now if add a few tasks to do the deployment. Start with clicking &#8216;1 job&#8217; under Stage 1, this should open the stage tasks page. The first task we are going to add is &#8216;Helm tool installer&#8217;, this will install Helm onto the build agent and allow it to deploy our charts. When the task is added it will default the Helm Version Spec to &#8216;2.14.1&#8217;, we are going to want to change this as we are going to want to use Helm 3 (Helm 3 has been released for a few months now and makes things a lot easier) so set it to latest.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-6.png?resize=477%2C436\\\" alt=\\\"\\\" class=\\\"wp-image-524\\\" width=\\\"477\\\" height=\\\"436\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-6.png?w=516 516w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-6.png?resize=300%2C274 300w\\\" sizes=\\\"(max-width: 477px) 100vw, 477px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Next add a Kubectl task, this will deal with the authentication between the pipeline and our AKS instance. Set the &#8216;Service connection type&#8217; to &#8216;Azure Resource Manager&#8217; and select your Azure subscription (you may need to authorise it), once selected you should be able to select your Resource group and your cluster. The last thing to do is set the &#8216;Command&#8217; box to login.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-7.png?resize=441%2C639\\\" alt=\\\"\\\" class=\\\"wp-image-525\\\" width=\\\"441\\\" height=\\\"639\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-7.png?w=493 493w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-7.png?resize=207%2C300 207w\\\" sizes=\\\"(max-width: 441px) 100vw, 441px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Next add the &#8216;Package and deploy Helm charts&#8217; task, we are going to start by deploying the Selenium hub. Select your Azure subscription, Resource group and Kubernetes cluster as you did before. In the &#8216;Namespace&#8217; box enter the namespace of your ingress controller (I&#8217;ve set mine to a pipeline variable but you can hard-code it if you want). Next set the &#8216;Command&#8217; to upgrade, &#8216;Chart Type&#8217; to &#8216;File Path&#8217; and select the Hub Charts folder, set &#8216;Release Name&#8217; to &#8216;selenium-hub&#8217; and tick &#8216;Install if release is not present&#8217; Your task config should look like the screenshot below.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"493\\\" height=\\\"625\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-8.png?resize=493%2C625\\\" alt=\\\"\\\" class=\\\"wp-image-526\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-8.png?w=493 493w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-8.png?resize=237%2C300 237w\\\" sizes=\\\"(max-width: 493px) 100vw, 493px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Right click the Helm task you just added and clone it twice. We are going to be deploying Chrome and Firefox nodes so we need one task each. One each task change the &#8216;Chart path&#8217; to point to the chart for the node you are deploying and change the &#8216;Release Name&#8217;. My Chrome deploy task looks like this:<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-9.png?resize=452%2C268\\\" alt=\\\"\\\" class=\\\"wp-image-528\\\" width=\\\"452\\\" height=\\\"268\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-9.png?w=469 469w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-9.png?resize=300%2C178 300w\\\" sizes=\\\"(max-width: 452px) 100vw, 452px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>And Firefox is like this:<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-10.png?resize=424%2C264\\\" alt=\\\"\\\" class=\\\"wp-image-529\\\" width=\\\"424\\\" height=\\\"264\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-10.png?w=475 475w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-10.png?resize=300%2C187 300w\\\" sizes=\\\"(max-width: 424px) 100vw, 424px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>If you chose to set the namespace from a variable like I did then make sure to set that in the variables tab and that should be it. Your Release pipeline should now look like the following screenshot.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"525\\\" height=\\\"369\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-14.png?resize=525%2C369\\\" alt=\\\"\\\" class=\\\"wp-image-533\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-14.png?w=525 525w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-14.png?resize=300%2C211 300w\\\" sizes=\\\"(max-width: 525px) 100vw, 525px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p> Save and then hit &#8216;Create release&#8217; in the top right. After a few moments the deployment should have succeeded. <\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"350\\\" height=\\\"257\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-11.png?resize=350%2C257\\\" alt=\\\"\\\" class=\\\"wp-image-530\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-11.png?w=350 350w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-11.png?resize=300%2C220 300w\\\" sizes=\\\"(max-width: 350px) 100vw, 350px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Before running tests on our Grid we need to update the ingress controller to allow us to connect to the Hub. Before that though let&#8217;s double check everything deployed correctly. Open a terminal and use kubectl to get the running pods for your namespace, with any luck you&#8217;ll see your hub pod along with two Chrome pods and two Firefox pods (my namespace is ingress-basic so substitute for your namespace name) .<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl get pods -n ingress-basic<\/code><\/pre>\\n\\n\\n\\n<p>We can see all our pods are successfully running.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-12.png?resize=618%2C82\\\" alt=\\\"\\\" class=\\\"wp-image-531\\\" width=\\\"618\\\" height=\\\"82\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-12.png?w=670 670w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-12.png?resize=300%2C40 300w\\\" sizes=\\\"(max-width: 618px) 100vw, 618px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>If you see that some of your pods aren&#8217;t running and are in a &#8216;pending&#8217; state. I&#8217;d guess that your Kubernetes nodes either don&#8217;t have enough memory resources or cpu resources free. You can quickly see this by running:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl describe node<\/code><\/pre>\\n\\n\\n\\n<p>Scroll to the &#8216;Allocated resouces&#8217; section and you will be able to see if you have overcommited resources, if so then your limits percentages will be greater than 100%. If this occurs you either have to increase the vm size for the instances within the scale set or deploy less replicas. If everything is within limits it should look like this:<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"451\\\" height=\\\"142\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-15.png?resize=451%2C142\\\" alt=\\\"\\\" class=\\\"wp-image-534\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-15.png?w=451 451w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-15.png?resize=300%2C94 300w\\\" sizes=\\\"(max-width: 451px) 100vw, 451px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Now just configure your ingress controller by adding a rule for the hub service. <a href=\\\"https:\/\/gist.github.com\/tomaustin700\/b78d07137dcc92d3bf57c274e14c5139\\\">Here is a sample ingress.yam<\/a>l file which should point you in the right direction. Once configured you should be able to access the grid console by using the url specified in your ingress.yaml file followed by \/grid\/console. Hopefully it brings up the following page. I wouldn&#8217;t recommend having a publicly accessible Grid so if you&#8217;re running this in production make sure this isn&#8217;t available to the outside world.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-13.png?fit=640%2C210&amp;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-532\\\" width=\\\"739\\\" height=\\\"242\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-13.png?w=1181 1181w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-13.png?resize=300%2C98 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-13.png?resize=1024%2C336 1024w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-13.png?resize=768%2C252 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-13.png?resize=720%2C236 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>To run tests on your Grid simply use your url followed by \/wd\/hub and pass this to your RemoteWebDriver instance. If you want a really simple example of running tests on Selenium Grid there is an example c# repo <a href=\\\"https:\/\/github.com\/tomaustin700\/SeleniumGridTest\\\">on my GitHub here<\/a>.<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p><strong>This article focuses on deploying Selenium Grid 3 which is now obsolete please see the <a href=\"https:\/\/tomaustin.xyz\/?p=694\">following article<\/a> which shows the same deployment process for Selenium Grid 4.<\/strong><\/p>\n\n\n\n<p>I&#8217;ve recently started using <a href=\"https:\/\/selenium.dev\/\">Selenium<\/a> for UI testing some web applications and I kept seeing <a href=\"https:\/\/selenium.dev\/documentation\/en\/grid\/\">Selenium Grid<\/a> being mentioned so decided to take a look at it. For those of you who don&#8217;t know about Selenium Grid it allows you to distribute your tests over several machines by sending your tests to a &#8216;hub&#8217; which will then distribute your tests for you over your &#8216;nodes&#8217;. The thing that really interested me about this was that everything could be run from Docker containers so within a few minutes I had all the infrastructure running locally via a compose file. This is all well and good but what if we wanted to have more than a handful nodes? AKS seemed like a good fit.<\/p>\n\n\n\n<p>Before we start I&#8217;m going to presume you already have an AKS instance running with an ingress controller deployed, it would also be good if you were also familiar with kubectl (for debugging more than anything). One thing to be aware of is that each node container requires about 1GB of RAM so if you intend on running a lot you&#8217;re going to need a pretty powerful AKS instance. I have vm size set to B2ms for the instances within the scale set but even this won&#8217;t be enough if you want to run more than a few nodes.<\/p>\n\n\n\n<p>Luckily for us Selenium already have<a href=\"https:\/\/github.com\/SeleniumHQ\/docker-selenium\"> Docker containers<\/a> for the hub and the nodes so all we really need to do is deploy them to AKS. For this I&#8217;m going to be using Helm 3 as it&#8217;s quick and easy. We are going to need to <a href=\"https:\/\/helm.sh\/\">Helm<\/a> charts to deploy but I&#8217;ve already done the hard work and built those, you can find them on my GitHub <a href=\"https:\/\/github.com\/tomaustin700\/AKSSeleniumGrid\">here<\/a>. If you do intend on using my charts then you&#8217;re probably going to want to Fork the repo so you can tweak the replica count for yourself. <\/p>\n\n\n\n<p>Let&#8217;s go to <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/\">Azure DevOps<\/a> and create a new project. Once completed we are going to want to build a pipeline and a release process. The pipeline will publish the charts and the release process will deploy the charts to AKS. Go to Pipelines and select the &#8216;New pipeline&#8217; button in the top right. I&#8217;m going to be using the classic pipeline editor as it&#8217;s a bit easier to follow along with so select &#8216;Use the classic editor&#8217; at the bottom.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image.png?resize=482%2C500\" alt=\" class=\"wp-image-517\" width=\"482\" height=\"500\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image.png?w=494 494w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image.png?resize=289%2C300 289w\" sizes=\"(max-width: 482px) 100vw, 482px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>On the next page select GitHub as your source and select the Repository you cloned earlier.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-1.png?resize=431%2C502\" alt=\" class=\"wp-image-518\" width=\"431\" height=\"502\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-1.png?w=505 505w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-1.png?resize=258%2C300 258w\" sizes=\"(max-width: 431px) 100vw, 431px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>When prompted to select a template just click &#8216;Empty job&#8217;. We are only going to need one build task so no templates are required! Add the &#8216;Publish build artifacts&#8217; task and configure it to match the screenshot below.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-2.png?resize=440%2C481\" alt=\" class=\"wp-image-519\" width=\"440\" height=\"481\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-2.png?w=510 510w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-2.png?resize=275%2C300 275w\" sizes=\"(max-width: 440px) 100vw, 440px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>That&#8217;s pretty much it for the pipeline. You may want to turn on continuous integration if you want any changes to auto deploy (Triggers &gt; Enable continuous integration). Lets hit &#8216;Save &amp; queue&#8217; and hopefully after a few seconds the pipeline will complete with a nice green tick.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-3.png?resize=640%2C133\" alt=\" class=\"wp-image-521\" width=\"640\" height=\"133\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-3.png?w=822 822w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-3.png?resize=300%2C63 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-3.png?resize=768%2C161 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-3.png?resize=720%2C151 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Now let&#8217;s add a Release pipeline to deploy our charts. Click Releases and select click the + New button, then select &#8216;New release pipeline&#8217;. When prompted select &#8216;Empty job&#8217; like we did before. To start let&#8217;s add an artifact so click &#8216;Add an artifact&#8217; and select your build pipeline for the Source, it should auto-populate the rest of the fields and then click Add.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-4.png?resize=522%2C568\" alt=\" class=\"wp-image-522\" width=\"522\" height=\"568\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-4.png?w=612 612w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-4.png?resize=276%2C300 276w\" sizes=\"(max-width: 522px) 100vw, 522px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>At this point I always enable continuous deployment so click the trigger button (lightning bolt) and Enable the deployment. This will automatically deploy our Helm charts whenever new build artifacts are published.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"396\" height=\"356\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-5.png?resize=396%2C356\" alt=\" class=\"wp-image-523\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-5.png?w=396 396w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-5.png?resize=300%2C270 300w\" sizes=\"(max-width: 396px) 100vw, 396px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>All we have to do now if add a few tasks to do the deployment. Start with clicking &#8216;1 job&#8217; under Stage 1, this should open the stage tasks page. The first task we are going to add is &#8216;Helm tool installer&#8217;, this will install Helm onto the build agent and allow it to deploy our charts. When the task is added it will default the Helm Version Spec to &#8216;2.14.1&#8217;, we are going to want to change this as we are going to want to use Helm 3 (Helm 3 has been released for a few months now and makes things a lot easier) so set it to latest.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-6.png?resize=477%2C436\" alt=\" class=\"wp-image-524\" width=\"477\" height=\"436\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-6.png?w=516 516w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-6.png?resize=300%2C274 300w\" sizes=\"(max-width: 477px) 100vw, 477px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Next add a Kubectl task, this will deal with the authentication between the pipeline and our AKS instance. Set the &#8216;Service connection type&#8217; to &#8216;Azure Resource Manager&#8217; and select your Azure subscription (you may need to authorise it), once selected you should be able to select your Resource group and your cluster. The last thing to do is set the &#8216;Command&#8217; box to login.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-7.png?resize=441%2C639\" alt=\" class=\"wp-image-525\" width=\"441\" height=\"639\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-7.png?w=493 493w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-7.png?resize=207%2C300 207w\" sizes=\"(max-width: 441px) 100vw, 441px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Next add the &#8216;Package and deploy Helm charts&#8217; task, we are going to start by deploying the Selenium hub. Select your Azure subscription, Resource group and Kubernetes cluster as you did before. In the &#8216;Namespace&#8217; box enter the namespace of your ingress controller (I&#8217;ve set mine to a pipeline variable but you can hard-code it if you want). Next set the &#8216;Command&#8217; to upgrade, &#8216;Chart Type&#8217; to &#8216;File Path&#8217; and select the Hub Charts folder, set &#8216;Release Name&#8217; to &#8216;selenium-hub&#8217; and tick &#8216;Install if release is not present&#8217; Your task config should look like the screenshot below.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"493\" height=\"625\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-8.png?resize=493%2C625\" alt=\" class=\"wp-image-526\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-8.png?w=493 493w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-8.png?resize=237%2C300 237w\" sizes=\"(max-width: 493px) 100vw, 493px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Right click the Helm task you just added and clone it twice. We are going to be deploying Chrome and Firefox nodes so we need one task each. One each task change the &#8216;Chart path&#8217; to point to the chart for the node you are deploying and change the &#8216;Release Name&#8217;. My Chrome deploy task looks like this:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-9.png?resize=452%2C268\" alt=\" class=\"wp-image-528\" width=\"452\" height=\"268\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-9.png?w=469 469w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-9.png?resize=300%2C178 300w\" sizes=\"(max-width: 452px) 100vw, 452px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>And Firefox is like this:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-10.png?resize=424%2C264\" alt=\" class=\"wp-image-529\" width=\"424\" height=\"264\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-10.png?w=475 475w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-10.png?resize=300%2C187 300w\" sizes=\"(max-width: 424px) 100vw, 424px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>If you chose to set the namespace from a variable like I did then make sure to set that in the variables tab and that should be it. Your Release pipeline should now look like the following screenshot.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"525\" height=\"369\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-14.png?resize=525%2C369\" alt=\" class=\"wp-image-533\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-14.png?w=525 525w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-14.png?resize=300%2C211 300w\" sizes=\"(max-width: 525px) 100vw, 525px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p> Save and then hit &#8216;Create release&#8217; in the top right. After a few moments the deployment should have succeeded. <\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"350\" height=\"257\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-11.png?resize=350%2C257\" alt=\" class=\"wp-image-530\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-11.png?w=350 350w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-11.png?resize=300%2C220 300w\" sizes=\"(max-width: 350px) 100vw, 350px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Before running tests on our Grid we need to update the ingress controller to allow us to connect to the Hub. Before that though let&#8217;s double check everything deployed correctly. Open a terminal and use kubectl to get the running pods for your namespace, with any luck you&#8217;ll see your hub pod along with two Chrome pods and two Firefox pods (my namespace is ingress-basic so substitute for your namespace name) .<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl get pods -n ingress-basic<\/code><\/pre>\n\n\n\n<p>We can see all our pods are successfully running.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-12.png?resize=618%2C82\" alt=\" class=\"wp-image-531\" width=\"618\" height=\"82\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-12.png?w=670 670w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-12.png?resize=300%2C40 300w\" sizes=\"(max-width: 618px) 100vw, 618px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>If you see that some of your pods aren&#8217;t running and are in a &#8216;pending&#8217; state. I&#8217;d guess that your Kubernetes nodes either don&#8217;t have enough memory resources or cpu resources free. You can quickly see this by running:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl describe node<\/code><\/pre>\n\n\n\n<p>Scroll to the &#8216;Allocated resouces&#8217; section and you will be able to see if you have overcommited resources, if so then your limits percentages will be greater than 100%. If this occurs you either have to increase the vm size for the instances within the scale set or deploy less replicas. If everything is within limits it should look like this:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"451\" height=\"142\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-15.png?resize=451%2C142\" alt=\" class=\"wp-image-534\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-15.png?w=451 451w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-15.png?resize=300%2C94 300w\" sizes=\"(max-width: 451px) 100vw, 451px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Now just configure your ingress controller by adding a rule for the hub service. <a href=\"https:\/\/gist.github.com\/tomaustin700\/b78d07137dcc92d3bf57c274e14c5139\">Here is a sample ingress.yam<\/a>l file which should point you in the right direction. Once configured you should be able to access the grid console by using the url specified in your ingress.yaml file followed by \/grid\/console. Hopefully it brings up the following page. I wouldn&#8217;t recommend having a publicly accessible Grid so if you&#8217;re running this in production make sure this isn&#8217;t available to the outside world.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-13.png?fit=640%2C210&amp;ssl=1\" alt=\" class=\"wp-image-532\" width=\"739\" height=\"242\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-13.png?w=1181 1181w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-13.png?resize=300%2C98 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-13.png?resize=1024%2C336 1024w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-13.png?resize=768%2C252 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/02\/image-13.png?resize=720%2C236 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" \/><\/figure><\/div>\n\n\n\n<p>To run tests on your Grid simply use your url followed by \/wd\/hub and pass this to your RemoteWebDriver instance. If you want a really simple example of running tests on Selenium Grid there is an example c# repo <a href=\"https:\/\/github.com\/tomaustin700\/SeleniumGridTest\">on my GitHub here<\/a>.<\/p>\n","feature_image":"/content/images/wordpress\/2020\/02\/image-13.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 02 Feb 2020 14:39:16 +0000","created_by":1,"updated_at":"Wed, 13 Jan 2021 11:25:01 +0000","updated_by":1,"published_at":"Sun, 02 Feb 2020 14:39:16 +0000","published_by":1},{"id":538,"title":"Presentations","slug":"presentations","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p><a rel=\\\"noreferrer noopener\\\" href=\\\"https:\/\/www.youtube.com\/watch?v=N9ZMe9fXylw&amp;feature=youtu.be\\\" target=\\\"_blank\\\">Our Automation Journey &#8211; How we do Automated UI Testing at Streets Heaver Healthcare Computing<\/a> &#8211; <a href=\\\"https:\/\/tomaustin.xyz\/download\/603\/\\\">Slide Download<\/a><\/p>\\n\\n\\n\\n<p><\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p><a rel=\"noreferrer noopener\" href=\"https:\/\/www.youtube.com\/watch?v=N9ZMe9fXylw&amp;feature=youtu.be\" target=\"_blank\">Our Automation Journey &#8211; How we do Automated UI Testing at Streets Heaver Healthcare Computing<\/a> &#8211; <a href=\"https:\/\/tomaustin.xyz\/download\/603\/\">Slide Download<\/a><\/p>\n\n\n\n<p><\/p>\n","feature_image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 23 Feb 2020 16:32:56 +0000","created_by":1,"updated_at":"Mon, 06 Jul 2020 14:24:58 +0000","updated_by":1,"published_at":"Sun, 23 Feb 2020 16:32:56 +0000","published_by":1},{"id":554,"title":"Deploying an Azure Kubernetes Service (AKS) instance with an Nginx ingress controller","slug":"deploying-an-azure-kubernetes-service-aks-instance-with-an-nginx-ingress-controller","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>This is the first article in a series which will guide you through deploying an <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/kubernetes-service\/\\\">Azure Kubernetes Service (AKS)<\/a> instance on Azure with an Nginx ingress controller, configuring a CI\/CD pipeline to configure that ingress controller and then deploying to the AKS instance using Azure <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/\\\">DevOps<\/a>. We are going to use the command line to deploy everything which may be daunting if you&#8217;re not familiar with it but it makes things fairly easy and we don&#8217;t have to worry about navigating the Azure UI.<\/p>\\n\\n\\n\\n<p>Let&#8217;s start by installing the latest version of the <a href=\\\"https:\/\/docs.microsoft.com\/en-us\/cli\/azure\/install-azure-cli?view=azure-cli-latest\\\">Azure CLI<\/a>. Once done open the command line tool of your choice (I&#8217;ve been really enjoying using the new <a href=\\\"https:\/\/github.com\/microsoft\/terminal\\\">Windows Terminal<\/a>) and run the login command.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>az login<\/code><\/pre>\\n\\n\\n\\n<p>Your default browser will hopefully open and ask you to login to your Azure account. Next let&#8217;s install <a href=\\\"https:\/\/kubernetes.io\/docs\/reference\/kubectl\/overview\/\\\">kubectl<\/a> which is the Kubernetes command-line tool.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>az aks install-cli<\/code><\/pre>\\n\\n\\n\\n<p>You&#8217;re also going to need to have <a href=\\\"https:\/\/helm.sh\/\\\">Helm<\/a> installed. Helm is a package manager for kubernetes and will allow us to deploy applications to our instance, we will be using it to deploy <a href=\\\"https:\/\/www.nginx.com\/\\\">Nginx<\/a>. As of writing the latest version of Helm is <a href=\\\"https:\/\/github.com\/helm\/helm\/releases\/tag\/v3.1.2\\\">v3.1.2<\/a> however get the latest version you can. To make things easier you can also add it to your Windows path, I&#8217;m not going to bother with this but if you want to there is a tutorial <a href=\\\"https:\/\/medium.com\/@JockDaRock\/take-the-helm-with-kubernetes-on-windows-c2cd4373104b\\\">here<\/a>.<\/p>\\n\\n\\n\\n<p>That should be everything we need to install locally so let&#8217;s get to deploying stuff to Azure. We will start with creating a resource group for our AKS instance.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>az group create --name AKS --location westeurope<\/code><\/pre>\\n\\n\\n\\n<p>You can call it what you like, I&#8217;ve named mine AKS just so it makes this tutorial fairly easy to follow. Also you can set the location to one of your choice also. To list all the Azure locations you can run the list-locations command.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>az account list-locations<\/code><\/pre>\\n\\n\\n\\n<p>Now that we have a resource group ready and waiting let&#8217;s deploy an AKS instance. I&#8217;m just going to be deploying a two node instance but you can tweak these parameters to your choosing.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>az aks create --resource-group AKS --name AKS --node-count 2 --generate-ssh-keys <\/code><\/pre>\\n\\n\\n\\n<p>If you get an error response mentioning ServicePrincipalProfile  then wait a few minutes and re-run the command. This is a known issue and has been documented <a href=\\\"https:\/\/github.com\/Azure\/azure-cli\/issues\/9585\\\">here<\/a>.<\/p>\\n\\n\\n\\n<p>Once deployed we need to get the credentials for our instance so we can start to communicate with it using kubectl.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>az aks get-credentials --resource-group AKS --name AKS<\/code><\/pre>\\n\\n\\n\\n<p>We can now check everything is running correctly by running the get nodes command, this will return some data about our AKS nodes.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl get nodes<\/code><\/pre>\\n\\n\\n\\n<p>Now that our instance is deployed we can get to configuring it. We are going to start with creating a namespace. You can think of a namespace as a way to group pods, services and deployments together.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl create namespace ingress-basic<\/code><\/pre>\\n\\n\\n\\n<p>Let&#8217;s now deploy a container image to that namespace. I&#8217;ve put together a really basic .net core container which will simply show &#8216;hello world&#8217; when accessed.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl create deployment helloworld --image tomaustin\/helloworldnetcore --namespace ingress-basic<\/code><\/pre>\\n\\n\\n\\n<p>This command will only deploy one pod but that should be fine for this tutorial, if you would like to learn more about deployments then the <a href=\\\"https:\/\/kubernetes.io\/docs\/tutorials\/kubernetes-basics\/deploy-app\/deploy-intro\/\\\">official kubernetes documentation<\/a> is fairly in-depth. Once this command completes  a pod will be running our image but there will be no way to access it. In order to be able to access it in the future we need to create a service for our deployment. Running the following command will create that service for us.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl expose deployment helloworld --name helloworld --namespace ingress-basic --port 80<\/code><\/pre>\\n\\n\\n\\n<p>Now that we have our service we need to deploy an ingress controller so we can access it. An ingress controller will direct external traffic to our service, you can find out more about ingress and kubernetes <a href=\\\"https:\/\/kubernetes.io\/docs\/concepts\/services-networking\/ingress\/\\\">here<\/a>. <\/p>\\n\\n\\n\\n<p>Firstly we are going to deploy a static public ip in Azure, we can then point a domain name at that ip address which is needed for our ingress controller. When we deployed our AKS instance it created a second resource group and deployed the nodes within it so we need to retrieve the name of that resource group, we can do that with the following command.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>az aks show --resource-group AKS --name AKS --query nodeResourceGroup -o tsv<\/code><\/pre>\\n\\n\\n\\n<p>Mine came out as &#8216;MC_AKS_AKS_westeurope&#8217; so hopefully yours will be fairly similar. Let&#8217;s now deploy a public ip address to Azure (substitute MC_AKS_AKS_westeurope with the resource group name returned by the previous command). This command will return the IP address so keep a note of that for future use.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>az network public-ip create --resource-group MC_AKS_AKS_westeurope --name AKSPublicIP --sku Standard --allocation-method static --query publicIp.ipAddress -o tsv<\/code><\/pre>\\n\\n\\n\\n<p>Now we&#8217;re going to run a few Helm commands. I&#8217;m going to cd into my Helm folder but if you added Helm to your Windows path variable then ignore the .\\\\ at the start of the Helm commands.<\/p>\\n\\n\\n\\n<p>Let&#8217;s start by adding the stable charts repo. This will allow us to pull Helm charts from that repository.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>.\\\\helm repo add stable https:\/\/kubernetes-charts.storage.googleapis.com\/<\/code><\/pre>\\n\\n\\n\\n<p>Run repo update to get the latest information about those charts.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>.\\\\helm repo update<\/code><\/pre>\\n\\n\\n\\n<p>We can now deploy Nginx to our AKS instance using Helm. Make sure you set the namespace parameter to the same one you created earlier. Set the loadBalancerIP parameter the the IP address of your Azure public IP.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>.\\\\helm install nginx-ingress stable\/nginx-ingress --namespace ingress-basic --set controller.replicaCount=2 --set controller.nodeSelector.\\\"beta\\\\.kubernetes\\\\.io\/os\\\"=linux --set defaultBackend.nodeSelector.\\\"beta\\\\.kubernetes\\\\.io\/os\\\"=linux --set controller.service.loadBalancerIP=\\\"51.105.209.106\\\"<\/code><\/pre>\\n\\n\\n\\n<p>Once completed we can check Nginx has deployed successfully by running the following command:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl get service -l app=nginx-ingress --namespace ingress-basic<\/code><\/pre>\\n\\n\\n\\n<p>Now that we have a running ingress controller we need to assign a dns name to our Azure public IP &#8211; this is then used by Nginx to direct traffic to our deployment. Make sure you update the IP address in the following command to the one you created earlier, also take note of the &#8211;dns-name parameter and set it to something unique.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>az network public-ip update --ids (az network public-ip list --query \\\"[?ipAddress!=null]|[?contains(ipAddress, '51.105.209.106')].[id]\\\" --output tsv) --dns-name akstomaustin<\/code><\/pre>\\n\\n\\n\\n<p>This created me a DNS address of &#8216;akstomaustin.westeurope.cloudapp.azure.com&#8217; and yours should be fairly similar.<\/p>\\n\\n\\n\\n<p>The last thing we need to do is apply configuration to our ingress controller. To do this we are going to use a local yaml file, a future article I will show you how to apply ingress configuration using an <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/pipelines\/\\\">Azure DevOps Pipeline<\/a> but applying it locally is fine for now. I have created a sample ingress.yaml file for you which you can find <a href=\\\"https:\/\/gist.github.com\/tomaustin700\/16d99169a7792ccd239f648af3f29f2d\\\">here<\/a>, simply save this file locally as ingress.yaml and update the host parameter with the dns address you just created. Now all we need to do is apply that file using the kubectl apply command.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl apply -f C:\\\\Users\\\\Tom\\\\Desktop\\\\ingress.yaml --namespace ingress-basic<\/code><\/pre>\\n\\n\\n\\n<p>Once applied you should finally be able to access your deployment by putting the DNS address into your browsers address bar and hitting enter! Hopefully you get the following response:<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image size-large\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"214\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=640%2C214\\\" alt=\\\"\\\" class=\\\"wp-image-566\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?w=845 845w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=300%2C100 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=768%2C257 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=720%2C241 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Congratulations!<\/p>\\n\\n\\n\\n<p>This is all working over HTTP and really we want HTTPS. There are a few ways you can configure HTTPS; I normally use <a href=\\\"https:\/\/www.cloudflare.com\/\\\">Cloudflare<\/a> which makes things nice and easy however you can also use <a href=\\\"https:\/\/letsencrypt.org\/\\\">Let&#8217;s Encrypt<\/a> and run cert-manager within AKS. Both of these approaches are outside the scope of this tutorial and there are many well written guides for both approaches which can be found with a quick google search \\ud83d\\ude42<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>This is the first article in a series which will guide you through deploying an <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/kubernetes-service\/\">Azure Kubernetes Service (AKS)<\/a> instance on Azure with an Nginx ingress controller, configuring a CI\/CD pipeline to configure that ingress controller and then deploying to the AKS instance using Azure <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/\">DevOps<\/a>. We are going to use the command line to deploy everything which may be daunting if you&#8217;re not familiar with it but it makes things fairly easy and we don&#8217;t have to worry about navigating the Azure UI.<\/p>\n\n\n\n<p>Let&#8217;s start by installing the latest version of the <a href=\"https:\/\/docs.microsoft.com\/en-us\/cli\/azure\/install-azure-cli?view=azure-cli-latest\">Azure CLI<\/a>. Once done open the command line tool of your choice (I&#8217;ve been really enjoying using the new <a href=\"https:\/\/github.com\/microsoft\/terminal\">Windows Terminal<\/a>) and run the login command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>az login<\/code><\/pre>\n\n\n\n<p>Your default browser will hopefully open and ask you to login to your Azure account. Next let&#8217;s install <a href=\"https:\/\/kubernetes.io\/docs\/reference\/kubectl\/overview\/\">kubectl<\/a> which is the Kubernetes command-line tool.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>az aks install-cli<\/code><\/pre>\n\n\n\n<p>You&#8217;re also going to need to have <a href=\"https:\/\/helm.sh\/\">Helm<\/a> installed. Helm is a package manager for kubernetes and will allow us to deploy applications to our instance, we will be using it to deploy <a href=\"https:\/\/www.nginx.com\/\">Nginx<\/a>. As of writing the latest version of Helm is <a href=\"https:\/\/github.com\/helm\/helm\/releases\/tag\/v3.1.2\">v3.1.2<\/a> however get the latest version you can. To make things easier you can also add it to your Windows path, I&#8217;m not going to bother with this but if you want to there is a tutorial <a href=\"https:\/\/medium.com\/@JockDaRock\/take-the-helm-with-kubernetes-on-windows-c2cd4373104b\">here<\/a>.<\/p>\n\n\n\n<p>That should be everything we need to install locally so let&#8217;s get to deploying stuff to Azure. We will start with creating a resource group for our AKS instance.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>az group create --name AKS --location westeurope<\/code><\/pre>\n\n\n\n<p>You can call it what you like, I&#8217;ve named mine AKS just so it makes this tutorial fairly easy to follow. Also you can set the location to one of your choice also. To list all the Azure locations you can run the list-locations command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>az account list-locations<\/code><\/pre>\n\n\n\n<p>Now that we have a resource group ready and waiting let&#8217;s deploy an AKS instance. I&#8217;m just going to be deploying a two node instance but you can tweak these parameters to your choosing.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>az aks create --resource-group AKS --name AKS --node-count 2 --generate-ssh-keys <\/code><\/pre>\n\n\n\n<p>If you get an error response mentioning ServicePrincipalProfile  then wait a few minutes and re-run the command. This is a known issue and has been documented <a href=\"https:\/\/github.com\/Azure\/azure-cli\/issues\/9585\">here<\/a>.<\/p>\n\n\n\n<p>Once deployed we need to get the credentials for our instance so we can start to communicate with it using kubectl.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>az aks get-credentials --resource-group AKS --name AKS<\/code><\/pre>\n\n\n\n<p>We can now check everything is running correctly by running the get nodes command, this will return some data about our AKS nodes.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl get nodes<\/code><\/pre>\n\n\n\n<p>Now that our instance is deployed we can get to configuring it. We are going to start with creating a namespace. You can think of a namespace as a way to group pods, services and deployments together.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl create namespace ingress-basic<\/code><\/pre>\n\n\n\n<p>Let&#8217;s now deploy a container image to that namespace. I&#8217;ve put together a really basic .net core container which will simply show &#8216;hello world&#8217; when accessed.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl create deployment helloworld --image tomaustin\/helloworldnetcore --namespace ingress-basic<\/code><\/pre>\n\n\n\n<p>This command will only deploy one pod but that should be fine for this tutorial, if you would like to learn more about deployments then the <a href=\"https:\/\/kubernetes.io\/docs\/tutorials\/kubernetes-basics\/deploy-app\/deploy-intro\/\">official kubernetes documentation<\/a> is fairly in-depth. Once this command completes  a pod will be running our image but there will be no way to access it. In order to be able to access it in the future we need to create a service for our deployment. Running the following command will create that service for us.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl expose deployment helloworld --name helloworld --namespace ingress-basic --port 80<\/code><\/pre>\n\n\n\n<p>Now that we have our service we need to deploy an ingress controller so we can access it. An ingress controller will direct external traffic to our service, you can find out more about ingress and kubernetes <a href=\"https:\/\/kubernetes.io\/docs\/concepts\/services-networking\/ingress\/\">here<\/a>. <\/p>\n\n\n\n<p>Firstly we are going to deploy a static public ip in Azure, we can then point a domain name at that ip address which is needed for our ingress controller. When we deployed our AKS instance it created a second resource group and deployed the nodes within it so we need to retrieve the name of that resource group, we can do that with the following command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>az aks show --resource-group AKS --name AKS --query nodeResourceGroup -o tsv<\/code><\/pre>\n\n\n\n<p>Mine came out as &#8216;MC_AKS_AKS_westeurope&#8217; so hopefully yours will be fairly similar. Let&#8217;s now deploy a public ip address to Azure (substitute MC_AKS_AKS_westeurope with the resource group name returned by the previous command). This command will return the IP address so keep a note of that for future use.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>az network public-ip create --resource-group MC_AKS_AKS_westeurope --name AKSPublicIP --sku Standard --allocation-method static --query publicIp.ipAddress -o tsv<\/code><\/pre>\n\n\n\n<p>Now we&#8217;re going to run a few Helm commands. I&#8217;m going to cd into my Helm folder but if you added Helm to your Windows path variable then ignore the .\\ at the start of the Helm commands.<\/p>\n\n\n\n<p>Let&#8217;s start by adding the stable charts repo. This will allow us to pull Helm charts from that repository.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>.\\helm repo add stable https:\/\/kubernetes-charts.storage.googleapis.com\/<\/code><\/pre>\n\n\n\n<p>Run repo update to get the latest information about those charts.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>.\\helm repo update<\/code><\/pre>\n\n\n\n<p>We can now deploy Nginx to our AKS instance using Helm. Make sure you set the namespace parameter to the same one you created earlier. Set the loadBalancerIP parameter the the IP address of your Azure public IP.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>.\\helm install nginx-ingress stable\/nginx-ingress --namespace ingress-basic --set controller.replicaCount=2 --set controller.nodeSelector.\"beta\\.kubernetes\\.io\/os\"=linux --set defaultBackend.nodeSelector.\"beta\\.kubernetes\\.io\/os\"=linux --set controller.service.loadBalancerIP=\"51.105.209.106\"<\/code><\/pre>\n\n\n\n<p>Once completed we can check Nginx has deployed successfully by running the following command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl get service -l app=nginx-ingress --namespace ingress-basic<\/code><\/pre>\n\n\n\n<p>Now that we have a running ingress controller we need to assign a dns name to our Azure public IP &#8211; this is then used by Nginx to direct traffic to our deployment. Make sure you update the IP address in the following command to the one you created earlier, also take note of the &#8211;dns-name parameter and set it to something unique.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>az network public-ip update --ids (az network public-ip list --query \"[?ipAddress!=null]|[?contains(ipAddress, '51.105.209.106')].[id]\" --output tsv) --dns-name akstomaustin<\/code><\/pre>\n\n\n\n<p>This created me a DNS address of &#8216;akstomaustin.westeurope.cloudapp.azure.com&#8217; and yours should be fairly similar.<\/p>\n\n\n\n<p>The last thing we need to do is apply configuration to our ingress controller. To do this we are going to use a local yaml file, a future article I will show you how to apply ingress configuration using an <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/pipelines\/\">Azure DevOps Pipeline<\/a> but applying it locally is fine for now. I have created a sample ingress.yaml file for you which you can find <a href=\"https:\/\/gist.github.com\/tomaustin700\/16d99169a7792ccd239f648af3f29f2d\">here<\/a>, simply save this file locally as ingress.yaml and update the host parameter with the dns address you just created. Now all we need to do is apply that file using the kubectl apply command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl apply -f C:\\Users\\Tom\\Desktop\\ingress.yaml --namespace ingress-basic<\/code><\/pre>\n\n\n\n<p>Once applied you should finally be able to access your deployment by putting the DNS address into your browsers address bar and hitting enter! Hopefully you get the following response:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"214\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=640%2C214\" alt=\" class=\"wp-image-566\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?w=845 845w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=300%2C100 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=768%2C257 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=720%2C241 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Congratulations!<\/p>\n\n\n\n<p>This is all working over HTTP and really we want HTTPS. There are a few ways you can configure HTTPS; I normally use <a href=\"https:\/\/www.cloudflare.com\/\">Cloudflare<\/a> which makes things nice and easy however you can also use <a href=\"https:\/\/letsencrypt.org\/\">Let&#8217;s Encrypt<\/a> and run cert-manager within AKS. Both of these approaches are outside the scope of this tutorial and there are many well written guides for both approaches which can be found with a quick google search \ud83d\ude42<\/p>\n","feature_image":"/content/images/wordpress\/2020\/03\/aks.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 27 Mar 2020 21:00:00 +0000","created_by":1,"updated_at":"Sun, 29 Mar 2020 15:23:13 +0000","updated_by":1,"published_at":"Fri, 27 Mar 2020 21:00:00 +0000","published_by":1},{"id":511,"title":"Deploying to AKS using Azure DevOps and Helm 3","slug":"deploying-to-aks-using-azure-devops-and-helm-3","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>Earlier in the year I wrote two articles describing how to deploy a website and an API to Azure Kubernetes Service using Azure DevOps, I was ready to write some more articles in the same series (such as deploying an Nginx ingress controller and lets encrypt) but I heard that the next release of Helm was getting rid of tiller (hooray!) so thought I better delay any more AKS tutorials until Helm 3 was released. Well Helm 3 was released a few weeks ago so here we go!<\/p>\\n\\n\\n\\n<p>Helm 3 was in pre-release for quite some time and I was tempted to write a tutorial showing how to use it but I didn&#8217;t want to write something that was then obsolete when another version was released so I waited. When the release of Helm 3 was imminent I did try and test using the lastest version but ran into a few issues with it and Azure DevOps (I emailed <a href=\\\"https:\/\/twitter.com\/jldeen\\\">Jessica Deen<\/a> about this and she gave me a workaround and then put out an <a href=\\\"https:\/\/jessicadeen.com\/using-helm-3-with-azure-devops\/\\\">article outlining how to use the pre-release of Helm 3 with Azure DevOps<\/a>) but before I had time to try everything out Helm 3 was officially released!<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>Earlier in the year I wrote two articles describing how to deploy a website and an API to Azure Kubernetes Service using Azure DevOps, I was ready to write some more articles in the same series (such as deploying an Nginx ingress controller and lets encrypt) but I heard that the next release of Helm was getting rid of tiller (hooray!) so thought I better delay any more AKS tutorials until Helm 3 was released. Well Helm 3 was released a few weeks ago so here we go!<\/p>\n\n\n\n<p>Helm 3 was in pre-release for quite some time and I was tempted to write a tutorial showing how to use it but I didn&#8217;t want to write something that was then obsolete when another version was released so I waited. When the release of Helm 3 was imminent I did try and test using the lastest version but ran into a few issues with it and Azure DevOps (I emailed <a href=\"https:\/\/twitter.com\/jldeen\">Jessica Deen<\/a> about this and she gave me a workaround and then put out an <a href=\"https:\/\/jessicadeen.com\/using-helm-3-with-azure-devops\/\">article outlining how to use the pre-release of Helm 3 with Azure DevOps<\/a>) but before I had time to try everything out Helm 3 was officially released!<\/p>\n","feature_image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 28 Mar 2020 00:00:00 +0000","created_by":1,"updated_at":"Fri, 27 Mar 2020 16:48:13 +0000","updated_by":1,"published_at":"","published_by":1},{"id":573,"title":"Updating an AKS Nginx ingress controller using Azure DevOps pipelines.","slug":"updating-an-aks-nginx-ingress-controller-using-azure-devops-pipelines","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>This is the second article in a series exploring how to setup an <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/kubernetes-service\/\\\">Azure Kubernetes Service<\/a> instance, implement a Nginx ingress controller and how to deploy apps to AKS using <a href=\\\"https:\/\/helm.sh\/\\\">Helm<\/a>. All the articles in the series can be found by <a href=\\\"http:\/\/tomaustin.xyz\/category\/aks-ingress-tutorial\/\\\">clicking here<\/a>. In this article we will use <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/\\\">Azure DevOps<\/a> to build a CI\/CD pipeline to automatically update the configuration of an AKS Nginx ingress controller when changes are made to the config file.<\/p>\\n\\n\\n\\n<p>I&#8217;m going to assume you already have a running AKS instance with a correctly configured ingress controller, if you don&#8217;t then use the <a href=\\\"http:\/\/tomaustin.xyz\/2020\/03\/27\/deploying-an-azure-kubernetes-service-aks-instance-with-an-nginx-ingress-controller\/\\\">first article to guide you through that process<\/a>. I&#8217;m going to be using Azure DevOps to run my pipelines as it&#8217;s free for public projects, works really well and it&#8217;s what I&#8217;m familiar with &#8211; any other CI\/CD pipeline should be able to accomplish what we are going to setup though.<\/p>\\n\\n\\n\\n<p>Let&#8217;s start by creating a new Azure DevOps project for our pipelines, if you already have a project ready then you can skip this step.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image size-large\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"355\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-1.png?resize=640%2C355\\\" alt=\\\"\\\" class=\\\"wp-image-574\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-1.png?w=651 651w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-1.png?resize=300%2C166 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Once created the first thing we are going to do is setup a service connection to our AKS instance, this will allow us to communicate with it through our pipeline. Hit the cog in the bottom left to open the project settings page and click on &#8216;Service connections&#8217; under &#8216;Pipelines&#8217;<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image size-large\\\"><img loading=\\\"lazy\\\" width=\\\"629\\\" height=\\\"371\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-2.png?resize=629%2C371\\\" alt=\\\"\\\" class=\\\"wp-image-575\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-2.png?w=629 629w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-2.png?resize=300%2C177 300w\\\" sizes=\\\"(max-width: 629px) 100vw, 629px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Press &#8216;Create service connection and select &#8216;Azure Resource Manager&#8217; for the connection type before hitting &#8216;Next&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"489\\\" height=\\\"121\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-3.png?resize=489%2C121\\\" alt=\\\"\\\" class=\\\"wp-image-576\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-3.png?w=489 489w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-3.png?resize=300%2C74 300w\\\" sizes=\\\"(max-width: 489px) 100vw, 489px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Leave the authentication method at the recommended value of  &#8216;Service principal&#8217; and press &#8216;Next&#8217; again. On the next page set the &#8216;Scope level&#8217; to &#8216;Subscription&#8217; and select the subscription that your AKS instance resides within. Now select your AKS resource group &#8211; you may get prompted to authenticate then just sign in to your Azure account. Finally give the service connection a meaningful name and press &#8216;Save&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"518\\\" height=\\\"487\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-4.png?resize=518%2C487\\\" alt=\\\"\\\" class=\\\"wp-image-577\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-4.png?w=518 518w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-4.png?resize=300%2C282 300w\\\" sizes=\\\"(max-width: 518px) 100vw, 518px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>After a few seconds your service connection should be created and we can then move onto setting up the pipeline.<\/p>\\n\\n\\n\\n<p>I&#8217;m going to be using yaml to declare my pipeline as I can just point a pipeline at a yaml file and all the configuration is already done. Yaml pipelines seem to be the preferred way of setting up pipelines now so if you aren&#8217;t familiar with them I suggest taking some time to investigate them further. Let&#8217;s start by navigating to Pipelines and pressing the &#8216;Create Pipeline&#8217; button.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"506\\\" height=\\\"292\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-5.png?resize=506%2C292\\\" alt=\\\"\\\" class=\\\"wp-image-578\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-5.png?w=506 506w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-5.png?resize=300%2C173 300w\\\" sizes=\\\"(max-width: 506px) 100vw, 506px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>I have written a complete yaml file for the pipeline so feel free to fork my project on GitHub, you can find it <a href=\\\"https:\/\/github.com\/tomaustin700\/AKSIngress\\\">here<\/a>. My repository only contains two files: ingress.yaml which is the configuration for our ingress controller and azure-pipeline.yaml which is the configuration for our pipeline. When prompted where your code is select your repository location, in my case this will be &#8216;GitHub (YAML)&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"481\\\" height=\\\"120\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-6.png?resize=481%2C120\\\" alt=\\\"\\\" class=\\\"wp-image-579\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-6.png?w=481 481w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-6.png?resize=300%2C75 300w\\\" sizes=\\\"(max-width: 481px) 100vw, 481px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Select your GitHub repository and select &#8216;Existing Azure Pipelines YAML file&#8217; when prompted.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"595\\\" height=\\\"123\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-7.png?resize=595%2C123\\\" alt=\\\"\\\" class=\\\"wp-image-580\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-7.png?w=595 595w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-7.png?resize=300%2C62 300w\\\" sizes=\\\"(max-width: 595px) 100vw, 595px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Now point the pipeline to the azure-pipeline.yaml file and press &#8216;Continue&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"505\\\" height=\\\"301\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-8.png?resize=505%2C301\\\" alt=\\\"\\\" class=\\\"wp-image-581\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-8.png?w=505 505w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-8.png?resize=300%2C179 300w\\\" sizes=\\\"(max-width: 505px) 100vw, 505px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>The last step is to review the pipeline and make any changes we may need to make. The file is already configured perfectly for me but you may need to change the &#8216;azureSubscriptionEndpoint&#8217; parameters to match the name of the service connection you made earlier, you may also need to update &#8216;azureResourceGroup&#8217; and &#8216;kubernetesCluster&#8217; to match your resources. The &#8216;Release&#8217; stage of the pipeline simply runs two kubectl commands: &#8216;Login&#8217; which will authenticate with the instance and &#8216;Apply&#8217; which will apply our new ingress configuration. Once you have finished making any changes hit &#8216;Run&#8217; in the top right corner and your pipeline will start to execute.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"582\\\" height=\\\"517\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-9.png?resize=582%2C517\\\" alt=\\\"\\\" class=\\\"wp-image-582\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-9.png?w=582 582w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-9.png?resize=300%2C266 300w\\\" sizes=\\\"(max-width: 582px) 100vw, 582px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>The pipeline is split into two stages: &#8216;Build&#8217; which will take our ingress.yaml file and publish it and &#8216;Release&#8217; which will pick up that published file and update our ingress controller with that configuration. After a few minutes your pipeline should have completed.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"558\\\" height=\\\"208\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-10.png?resize=558%2C208\\\" alt=\\\"\\\" class=\\\"wp-image-583\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-10.png?w=558 558w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-10.png?resize=300%2C112 300w\\\" sizes=\\\"(max-width: 558px) 100vw, 558px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>That&#8217;s pretty much it! Now whenever you make commit changes to ingress.yaml the pipeline will automatically update your ingress controller for you. <\/p>\\n\\n\\n\\n<p>The final article will explore building a .NET Core application, creating a Helm chart for deployment and building a CI\/CD pipeline to deploy to our AKS instance.<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>This is the second article in a series exploring how to setup an <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/kubernetes-service\/\">Azure Kubernetes Service<\/a> instance, implement a Nginx ingress controller and how to deploy apps to AKS using <a href=\"https:\/\/helm.sh\/\">Helm<\/a>. All the articles in the series can be found by <a href=\"http:\/\/tomaustin.xyz\/category\/aks-ingress-tutorial\/\">clicking here<\/a>. In this article we will use <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/\">Azure DevOps<\/a> to build a CI\/CD pipeline to automatically update the configuration of an AKS Nginx ingress controller when changes are made to the config file.<\/p>\n\n\n\n<p>I&#8217;m going to assume you already have a running AKS instance with a correctly configured ingress controller, if you don&#8217;t then use the <a href=\"http:\/\/tomaustin.xyz\/2020\/03\/27\/deploying-an-azure-kubernetes-service-aks-instance-with-an-nginx-ingress-controller\/\">first article to guide you through that process<\/a>. I&#8217;m going to be using Azure DevOps to run my pipelines as it&#8217;s free for public projects, works really well and it&#8217;s what I&#8217;m familiar with &#8211; any other CI\/CD pipeline should be able to accomplish what we are going to setup though.<\/p>\n\n\n\n<p>Let&#8217;s start by creating a new Azure DevOps project for our pipelines, if you already have a project ready then you can skip this step.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"355\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-1.png?resize=640%2C355\" alt=\" class=\"wp-image-574\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-1.png?w=651 651w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-1.png?resize=300%2C166 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Once created the first thing we are going to do is setup a service connection to our AKS instance, this will allow us to communicate with it through our pipeline. Hit the cog in the bottom left to open the project settings page and click on &#8216;Service connections&#8217; under &#8216;Pipelines&#8217;<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"629\" height=\"371\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-2.png?resize=629%2C371\" alt=\" class=\"wp-image-575\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-2.png?w=629 629w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-2.png?resize=300%2C177 300w\" sizes=\"(max-width: 629px) 100vw, 629px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Press &#8216;Create service connection and select &#8216;Azure Resource Manager&#8217; for the connection type before hitting &#8216;Next&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"489\" height=\"121\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-3.png?resize=489%2C121\" alt=\" class=\"wp-image-576\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-3.png?w=489 489w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-3.png?resize=300%2C74 300w\" sizes=\"(max-width: 489px) 100vw, 489px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Leave the authentication method at the recommended value of  &#8216;Service principal&#8217; and press &#8216;Next&#8217; again. On the next page set the &#8216;Scope level&#8217; to &#8216;Subscription&#8217; and select the subscription that your AKS instance resides within. Now select your AKS resource group &#8211; you may get prompted to authenticate then just sign in to your Azure account. Finally give the service connection a meaningful name and press &#8216;Save&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"518\" height=\"487\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-4.png?resize=518%2C487\" alt=\" class=\"wp-image-577\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-4.png?w=518 518w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-4.png?resize=300%2C282 300w\" sizes=\"(max-width: 518px) 100vw, 518px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>After a few seconds your service connection should be created and we can then move onto setting up the pipeline.<\/p>\n\n\n\n<p>I&#8217;m going to be using yaml to declare my pipeline as I can just point a pipeline at a yaml file and all the configuration is already done. Yaml pipelines seem to be the preferred way of setting up pipelines now so if you aren&#8217;t familiar with them I suggest taking some time to investigate them further. Let&#8217;s start by navigating to Pipelines and pressing the &#8216;Create Pipeline&#8217; button.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"506\" height=\"292\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-5.png?resize=506%2C292\" alt=\" class=\"wp-image-578\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-5.png?w=506 506w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-5.png?resize=300%2C173 300w\" sizes=\"(max-width: 506px) 100vw, 506px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>I have written a complete yaml file for the pipeline so feel free to fork my project on GitHub, you can find it <a href=\"https:\/\/github.com\/tomaustin700\/AKSIngress\">here<\/a>. My repository only contains two files: ingress.yaml which is the configuration for our ingress controller and azure-pipeline.yaml which is the configuration for our pipeline. When prompted where your code is select your repository location, in my case this will be &#8216;GitHub (YAML)&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"481\" height=\"120\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-6.png?resize=481%2C120\" alt=\" class=\"wp-image-579\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-6.png?w=481 481w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-6.png?resize=300%2C75 300w\" sizes=\"(max-width: 481px) 100vw, 481px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Select your GitHub repository and select &#8216;Existing Azure Pipelines YAML file&#8217; when prompted.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"595\" height=\"123\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-7.png?resize=595%2C123\" alt=\" class=\"wp-image-580\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-7.png?w=595 595w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-7.png?resize=300%2C62 300w\" sizes=\"(max-width: 595px) 100vw, 595px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Now point the pipeline to the azure-pipeline.yaml file and press &#8216;Continue&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"505\" height=\"301\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-8.png?resize=505%2C301\" alt=\" class=\"wp-image-581\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-8.png?w=505 505w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-8.png?resize=300%2C179 300w\" sizes=\"(max-width: 505px) 100vw, 505px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>The last step is to review the pipeline and make any changes we may need to make. The file is already configured perfectly for me but you may need to change the &#8216;azureSubscriptionEndpoint&#8217; parameters to match the name of the service connection you made earlier, you may also need to update &#8216;azureResourceGroup&#8217; and &#8216;kubernetesCluster&#8217; to match your resources. The &#8216;Release&#8217; stage of the pipeline simply runs two kubectl commands: &#8216;Login&#8217; which will authenticate with the instance and &#8216;Apply&#8217; which will apply our new ingress configuration. Once you have finished making any changes hit &#8216;Run&#8217; in the top right corner and your pipeline will start to execute.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"582\" height=\"517\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-9.png?resize=582%2C517\" alt=\" class=\"wp-image-582\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-9.png?w=582 582w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-9.png?resize=300%2C266 300w\" sizes=\"(max-width: 582px) 100vw, 582px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>The pipeline is split into two stages: &#8216;Build&#8217; which will take our ingress.yaml file and publish it and &#8216;Release&#8217; which will pick up that published file and update our ingress controller with that configuration. After a few minutes your pipeline should have completed.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"558\" height=\"208\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-10.png?resize=558%2C208\" alt=\" class=\"wp-image-583\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-10.png?w=558 558w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image-10.png?resize=300%2C112 300w\" sizes=\"(max-width: 558px) 100vw, 558px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>That&#8217;s pretty much it! Now whenever you make commit changes to ingress.yaml the pipeline will automatically update your ingress controller for you. <\/p>\n\n\n\n<p>The final article will explore building a .NET Core application, creating a Helm chart for deployment and building a CI\/CD pipeline to deploy to our AKS instance.<\/p>\n","feature_image":"/content/images/wordpress\/2020\/03\/ingresscicd-1.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 29 Mar 2020 15:21:04 +0000","created_by":1,"updated_at":"Sun, 29 Mar 2020 15:21:05 +0000","updated_by":1,"published_at":"Sun, 29 Mar 2020 15:21:04 +0000","published_by":1},{"id":594,"title":"3D Printing Protective Visors during the Covid-19 crisis","slug":"3d-printing-protective-visors-during-the-covid-19-crisis","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>This is a bit different to the content that I normally post but may be one of the most important posts I ever write. A while back I got myself a 3D printer and have been using it almost daily since, you don&#8217;t really realise how useful they are until they have one. I am now dedicating its use to printing protective visors during the Covid-19 crisis and if you have access to a 3D printer I suggest you do the same.<\/p>\\n\\n\\n\\n<p>The visor I have been printing was published by <a href=\\\"https:\/\/3dverkstan.se\/\\\">3DVerkstan <\/a>and is great because it&#8217;s quick and easy to print (even on poorly calibrated printers), requires no elastic and accepts readily available plastic sheets that just need to be hole punched. All the details can be found on their site <a href=\\\"https:\/\/3dverkstan.se\/protective-visor\/protective-visor-versions\/\\\">here<\/a>.<\/p>\\n\\n\\n\\n<p>I&#8217;ve been using my Prusa i3 MK3\/s to produce one every 45 mins in PLA using 0.3mm layer heights and 20% infill (this is the 0.30mm DRAFT PrusaSlicer preset) and they are coming out great. For the front sheets I bought <a href=\\\"https:\/\/www.amazon.co.uk\/dp\/B07DSYHDQ9\/ref=cm_sw_r_apa_i_gIIGEb5JFDG53\\\">120 transparent OHP sheets from Amazon<\/a> which are then hole punched twice before attaching to the frame using a pressure fit.<\/p>\\n\\n\\n\\n<p>Due to the demand for these visors they are being taken as quick as I can make them which is why if you have the ability to manufacture them I suggest you do. I&#8217;m currently prioritising giving them to my local ICU department and also first responders and the more we produce and distribute the better.<\/p>\\n\\n\\n\\n<p>Here is a link to the .stl files we are currently printing.<br><br><a href=\\\"http:\/\/tomaustin.xyz\/download\/635\/\\\">http:\/\/tomaustin.xyz\/download\/635\/<br><\/a><\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img src=\\\"https:\/\/i1.wp.com\/mk03dverkstanb4pk6hu.kinstacdn.com\/wp-content\/uploads\/2020\/03\/europe-iso838-2.jpg?w=640&#038;ssl=1\\\" alt=\\\"\\\" data-recalc-dims=\\\"1\\\"\/><\/figure>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>This is a bit different to the content that I normally post but may be one of the most important posts I ever write. A while back I got myself a 3D printer and have been using it almost daily since, you don&#8217;t really realise how useful they are until they have one. I am now dedicating its use to printing protective visors during the Covid-19 crisis and if you have access to a 3D printer I suggest you do the same.<\/p>\n\n\n\n<p>The visor I have been printing was published by <a href=\"https:\/\/3dverkstan.se\/\">3DVerkstan <\/a>and is great because it&#8217;s quick and easy to print (even on poorly calibrated printers), requires no elastic and accepts readily available plastic sheets that just need to be hole punched. All the details can be found on their site <a href=\"https:\/\/3dverkstan.se\/protective-visor\/protective-visor-versions\/\">here<\/a>.<\/p>\n\n\n\n<p>I&#8217;ve been using my Prusa i3 MK3\/s to produce one every 45 mins in PLA using 0.3mm layer heights and 20% infill (this is the 0.30mm DRAFT PrusaSlicer preset) and they are coming out great. For the front sheets I bought <a href=\"https:\/\/www.amazon.co.uk\/dp\/B07DSYHDQ9\/ref=cm_sw_r_apa_i_gIIGEb5JFDG53\">120 transparent OHP sheets from Amazon<\/a> which are then hole punched twice before attaching to the frame using a pressure fit.<\/p>\n\n\n\n<p>Due to the demand for these visors they are being taken as quick as I can make them which is why if you have the ability to manufacture them I suggest you do. I&#8217;m currently prioritising giving them to my local ICU department and also first responders and the more we produce and distribute the better.<\/p>\n\n\n\n<p>Here is a link to the .stl files we are currently printing.<br><br><a href=\"http:\/\/tomaustin.xyz\/download\/635\/\">http:\/\/tomaustin.xyz\/download\/635\/<br><\/a><\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/i1.wp.com\/mk03dverkstanb4pk6hu.kinstacdn.com\/wp-content\/uploads\/2020\/03\/europe-iso838-2.jpg?w=640&#038;ssl=1\" alt=\" data-recalc-dims=\"1\"\/><\/figure>\n","feature_image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 29 Mar 2020 16:09:56 +0000","created_by":1,"updated_at":"Wed, 15 Apr 2020 13:37:17 +0000","updated_by":1,"published_at":"Sun, 29 Mar 2020 16:09:56 +0000","published_by":1},{"id":613,"title":"XPathValidator.dev - Quickly and easily validate and test your XPath expressions.","slug":"xpathvalidator-dev-quickly-and-easily-validate-and-test-your-xpath-expressions","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>If you&#8217;ve never heard of <a href=\\\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/XPath\\\">XPath<\/a> you can think of it as a quick and easy way to query an XML document, it uses a path notation for navigating through the hierarchical structure of XML similar to that of a URL. I use XPath&#8217;s on a daily basis and use it to return elements from UI visual trees (you can find  more about this from the <a href=\\\"https:\/\/www.crowdcast.io\/e\/automated-ui-testing\/\\\">presentation I did for Digital Lincoln<\/a>) but I&#8217;ve often found it hard to test expressions as they are being written and thought a xpath validator would be really useful. To address this I started by writing a basic console application which would take an XPath as an input and check if it was valid &#8211; this worked well but I thought a website would be easier so I built <a href=\\\"https:\/\/XPathValidator.dev\\\">XPathValidator.dev<\/a>. I am aware there are a few other XPath testing sites out there but I wanted something simple and clean that would just get the job done.<\/p>\\n\\n\\n\\n<p>There are two ways the site can be used for; the first is to just validate XPath expressions and the second is to run those expressions and return the result by also providing XML. Let&#8217;s quickly try out both these features.<\/p>\\n\\n\\n\\n<h2>XPath Validation<\/h2>\\n\\n\\n\\n<p>This is the main feature I built the site for but I image most people will be more interested in evaluating their XPath expressions however I&#8217;ll quickly go through it. Simply provide an expression and hit validate. If you&#8217;re XPath if syntaxly correct you will get a nice green tick.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>\/\/*<\/code><\/pre>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"539\\\" height=\\\"351\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image.png?resize=539%2C351\\\" alt=\\\"\\\" class=\\\"wp-image-614\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image.png?w=539 539w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image.png?resize=300%2C195 300w\\\" sizes=\\\"(max-width: 539px) 100vw, 539px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>And if not you&#8217;ll get a cross with a error message.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>\/\/\/<\/code><\/pre>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"524\\\" height=\\\"345\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-1.png?resize=524%2C345\\\" alt=\\\"\\\" class=\\\"wp-image-615\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-1.png?w=524 524w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-1.png?resize=300%2C198 300w\\\" sizes=\\\"(max-width: 524px) 100vw, 524px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<h2>Expression Evaluation<\/h2>\\n\\n\\n\\n<p>This is what I image most people will use the site for so let&#8217;s see what it can do! Let&#8217;s start basic and return a node. I&#8217;m going to using the <a href=\\\"https:\/\/www.w3schools.com\/xml\/xpath_examples.asp\\\">XML Example Document provided by W3Schools<\/a>.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>\/bookstore\/book&#91;1]\/title<\/code><\/pre>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"527\\\" height=\\\"346\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-2.png?resize=527%2C346\\\" alt=\\\"\\\" class=\\\"wp-image-617\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-2.png?w=527 527w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-2.png?resize=300%2C197 300w\\\" sizes=\\\"(max-width: 527px) 100vw, 527px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Great! How about selecting all the book prices?<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>\/bookstore\/book\/price&#91;text()]<\/code><\/pre>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"534\\\" height=\\\"418\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-3.png?resize=534%2C418\\\" alt=\\\"\\\" class=\\\"wp-image-618\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-3.png?w=534 534w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-3.png?resize=300%2C235 300w\\\" sizes=\\\"(max-width: 534px) 100vw, 534px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Or even get the title nodes where their price &gt; 35.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>\/bookstore\/book&#91;price>35]\/title<\/code><\/pre>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"533\\\" height=\\\"369\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-4.png?resize=533%2C369\\\" alt=\\\"\\\" class=\\\"wp-image-619\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-4.png?w=533 533w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-4.png?resize=300%2C208 300w\\\" sizes=\\\"(max-width: 533px) 100vw, 533px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>There are a lot more XPath operators and functions out there and I suggest you check out the documentation over on <a href=\\\"https:\/\/www.w3schools.com\/xml\/xpath_intro.asp\\\">W3Schools<\/a> if you&#8217;re interested in learning more. The site was built in .Net Core 3.1 and is <a href=\\\"https:\/\/github.com\/tomaustin700\/XPathValidator\\\">open source on GitHub<\/a>, I&#8217;m happy to accept pull requests with additional functionality and if you have any problems then just <a href=\\\"https:\/\/github.com\/tomaustin700\/XPathValidator\/issues\/new\\\">open an issue<\/a>. Enjoy! <\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>If you&#8217;ve never heard of <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/XPath\">XPath<\/a> you can think of it as a quick and easy way to query an XML document, it uses a path notation for navigating through the hierarchical structure of XML similar to that of a URL. I use XPath&#8217;s on a daily basis and use it to return elements from UI visual trees (you can find  more about this from the <a href=\"https:\/\/www.crowdcast.io\/e\/automated-ui-testing\/\">presentation I did for Digital Lincoln<\/a>) but I&#8217;ve often found it hard to test expressions as they are being written and thought a xpath validator would be really useful. To address this I started by writing a basic console application which would take an XPath as an input and check if it was valid &#8211; this worked well but I thought a website would be easier so I built <a href=\"https:\/\/XPathValidator.dev\">XPathValidator.dev<\/a>. I am aware there are a few other XPath testing sites out there but I wanted something simple and clean that would just get the job done.<\/p>\n\n\n\n<p>There are two ways the site can be used for; the first is to just validate XPath expressions and the second is to run those expressions and return the result by also providing XML. Let&#8217;s quickly try out both these features.<\/p>\n\n\n\n<h2>XPath Validation<\/h2>\n\n\n\n<p>This is the main feature I built the site for but I image most people will be more interested in evaluating their XPath expressions however I&#8217;ll quickly go through it. Simply provide an expression and hit validate. If you&#8217;re XPath if syntaxly correct you will get a nice green tick.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/*<\/code><\/pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"539\" height=\"351\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image.png?resize=539%2C351\" alt=\" class=\"wp-image-614\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image.png?w=539 539w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image.png?resize=300%2C195 300w\" sizes=\"(max-width: 539px) 100vw, 539px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>And if not you&#8217;ll get a cross with a error message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/\/<\/code><\/pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"524\" height=\"345\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-1.png?resize=524%2C345\" alt=\" class=\"wp-image-615\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-1.png?w=524 524w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-1.png?resize=300%2C198 300w\" sizes=\"(max-width: 524px) 100vw, 524px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<h2>Expression Evaluation<\/h2>\n\n\n\n<p>This is what I image most people will use the site for so let&#8217;s see what it can do! Let&#8217;s start basic and return a node. I&#8217;m going to using the <a href=\"https:\/\/www.w3schools.com\/xml\/xpath_examples.asp\">XML Example Document provided by W3Schools<\/a>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/bookstore\/book&#91;1]\/title<\/code><\/pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"527\" height=\"346\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-2.png?resize=527%2C346\" alt=\" class=\"wp-image-617\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-2.png?w=527 527w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-2.png?resize=300%2C197 300w\" sizes=\"(max-width: 527px) 100vw, 527px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Great! How about selecting all the book prices?<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/bookstore\/book\/price&#91;text()]<\/code><\/pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"534\" height=\"418\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-3.png?resize=534%2C418\" alt=\" class=\"wp-image-618\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-3.png?w=534 534w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-3.png?resize=300%2C235 300w\" sizes=\"(max-width: 534px) 100vw, 534px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Or even get the title nodes where their price &gt; 35.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/bookstore\/book&#91;price>35]\/title<\/code><\/pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"533\" height=\"369\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-4.png?resize=533%2C369\" alt=\" class=\"wp-image-619\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-4.png?w=533 533w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-4.png?resize=300%2C208 300w\" sizes=\"(max-width: 533px) 100vw, 533px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>There are a lot more XPath operators and functions out there and I suggest you check out the documentation over on <a href=\"https:\/\/www.w3schools.com\/xml\/xpath_intro.asp\">W3Schools<\/a> if you&#8217;re interested in learning more. The site was built in .Net Core 3.1 and is <a href=\"https:\/\/github.com\/tomaustin700\/XPathValidator\">open source on GitHub<\/a>, I&#8217;m happy to accept pull requests with additional functionality and if you have any problems then just <a href=\"https:\/\/github.com\/tomaustin700\/XPathValidator\/issues\/new\">open an issue<\/a>. Enjoy! <\/p>\n","feature_image":"/content/images/wordpress\/2020\/04\/image.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 11 Apr 2020 14:17:04 +0000","created_by":1,"updated_at":"Sat, 11 Apr 2020 16:54:17 +0000","updated_by":1,"published_at":"Sat, 11 Apr 2020 14:17:04 +0000","published_by":1},{"id":627,"title":"How to fix \"app-name has no deployed releases\" with Helm 3","slug":"how-to-fix-app-name-has-no-deployed-releases-with-helm-3","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>Helm 3 has been out for a while now and for the most part it&#8217;s a good step up from Helm 2 however it does have one issue which if you don&#8217;t know how to deal with can be frustrating and difficult to resolve. The issue I&#8217;m referring to occurs when the first deployment of an app fails for some reason, subsequent deployments will then throw a failure message with the text &#8220;app-name has no deployed releases&#8221;.<\/p>\\n\\n\\n\\n<p>This issue can easily occur if you&#8217;re using Helm to deploy from a pipeline and make a small mistake somewhere in the pipeline configuration process. This issue is well know and has a very active GitHub issue which can be found <a href=\\\"https:\/\/github.com\/helm\/helm\/issues\/5595#issuecomment-612611077\\\">here<\/a>, there is also a pull request which attempts to resolve the issue however at time of writing it is yet to merge (see <a href=\\\"https:\/\/github.com\/helm\/helm\/pull\/7653\\\">PR7653<\/a>). If you read the GitHub issue and comments you&#8217;ll see there are a few solutions out there, I&#8217;ve not had much luck with any of them so I came up with my own. You&#8217;re going to need to have kubectl installed locally and configured for your Kubernetes instance. <\/p>\\n\\n\\n\\n<p>This fix is pretty much a clean-up operation and we are going to remove all traces of the broken deployment.  For this example my app is called &#8220;akshelm3issue&#8221; and my namespace is &#8220;ingress-basic&#8221;. We are going to start by deleting the secret associated against our app so let&#8217;s list all secrets so we can find the one we want.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl get secrets --show-labels -n ingress-basic<\/code><\/pre>\\n\\n\\n\\n<p>This will list all the secrets for the namespace, the one we are after will contain our app name within it. <\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image size-large\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"122\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-6.png?resize=640%2C122\\\" alt=\\\"\\\" class=\\\"wp-image-629\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-6.png?w=774 774w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-6.png?resize=300%2C57 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-6.png?resize=768%2C146 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-6.png?resize=720%2C137 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Now we&#8217;ve got that we can start the clean-up. Let&#8217;s delete that secret&#8230;<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl delete secret sh.helm.release.v1.akshelm3issue.v1 -n ingress-basic<\/code><\/pre>\\n\\n\\n\\n<p>The rest of the clean-up is pretty straight forward and all we need is the app name and the namespace so let&#8217;s get on with it.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl delete service akshelm3issue -n ingress-basic\\nkubectl delete deployment akshelm3issue -n ingress-basic\\nkubectl delete ingress akshelm3issue -n ingress-basic<\/code><\/pre>\\n\\n\\n\\n<p>You may get some messages stating that what you&#8217;ve attempted to delete does not exist, this will vary depending on how far your initial deployment got before it failed. That should be it! Fix whatever issue caused the initial deployment to fail and redeploy, hopefully you&#8217;re greeted with a nice green tick.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"163\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-7.png?resize=640%2C163\\\" alt=\\\"\\\" class=\\\"wp-image-630\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-7.png?w=740 740w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-7.png?resize=300%2C76 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-7.png?resize=720%2C183 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>Helm 3 has been out for a while now and for the most part it&#8217;s a good step up from Helm 2 however it does have one issue which if you don&#8217;t know how to deal with can be frustrating and difficult to resolve. The issue I&#8217;m referring to occurs when the first deployment of an app fails for some reason, subsequent deployments will then throw a failure message with the text &#8220;app-name has no deployed releases&#8221;.<\/p>\n\n\n\n<p>This issue can easily occur if you&#8217;re using Helm to deploy from a pipeline and make a small mistake somewhere in the pipeline configuration process. This issue is well know and has a very active GitHub issue which can be found <a href=\"https:\/\/github.com\/helm\/helm\/issues\/5595#issuecomment-612611077\">here<\/a>, there is also a pull request which attempts to resolve the issue however at time of writing it is yet to merge (see <a href=\"https:\/\/github.com\/helm\/helm\/pull\/7653\">PR7653<\/a>). If you read the GitHub issue and comments you&#8217;ll see there are a few solutions out there, I&#8217;ve not had much luck with any of them so I came up with my own. You&#8217;re going to need to have kubectl installed locally and configured for your Kubernetes instance. <\/p>\n\n\n\n<p>This fix is pretty much a clean-up operation and we are going to remove all traces of the broken deployment.  For this example my app is called &#8220;akshelm3issue&#8221; and my namespace is &#8220;ingress-basic&#8221;. We are going to start by deleting the secret associated against our app so let&#8217;s list all secrets so we can find the one we want.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl get secrets --show-labels -n ingress-basic<\/code><\/pre>\n\n\n\n<p>This will list all the secrets for the namespace, the one we are after will contain our app name within it. <\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"122\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-6.png?resize=640%2C122\" alt=\" class=\"wp-image-629\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-6.png?w=774 774w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-6.png?resize=300%2C57 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-6.png?resize=768%2C146 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-6.png?resize=720%2C137 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Now we&#8217;ve got that we can start the clean-up. Let&#8217;s delete that secret&#8230;<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl delete secret sh.helm.release.v1.akshelm3issue.v1 -n ingress-basic<\/code><\/pre>\n\n\n\n<p>The rest of the clean-up is pretty straight forward and all we need is the app name and the namespace so let&#8217;s get on with it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl delete service akshelm3issue -n ingress-basic\nkubectl delete deployment akshelm3issue -n ingress-basic\nkubectl delete ingress akshelm3issue -n ingress-basic<\/code><\/pre>\n\n\n\n<p>You may get some messages stating that what you&#8217;ve attempted to delete does not exist, this will vary depending on how far your initial deployment got before it failed. That should be it! Fix whatever issue caused the initial deployment to fail and redeploy, hopefully you&#8217;re greeted with a nice green tick.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"640\" height=\"163\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-7.png?resize=640%2C163\" alt=\" class=\"wp-image-630\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-7.png?w=740 740w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-7.png?resize=300%2C76 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/04\/image-7.png?resize=720%2C183 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n","feature_image":"/content/images/wordpress\/2020\/04\/image-5.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 13 Apr 2020 17:29:56 +0000","created_by":1,"updated_at":"Mon, 13 Apr 2020 17:30:20 +0000","updated_by":1,"published_at":"Mon, 13 Apr 2020 17:29:56 +0000","published_by":1},{"id":644,"title":"Installing HBase in Standalone mode on Ubuntu","slug":"installing-hbase-in-standalone-mode-on-ubuntu","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p><a href=\\\"https:\/\/hbase.apache.org\/\\\">HBase<\/a> can be installed in three modes: standalone, pseudo-distributed and distributed &#8211; each mode has uses and advantages and disadvantages and slightly different install steps because of it. This article will guide you through the installation of HBase in standalone mode on Ubuntu 18.04. <\/p>\\n\\n\\n\\n<p>So why use standalone mode? Firstly standalone mode is not recommended for production use however for development or non-important data standalone mode can be ideal. Standalone mode uses the local file system for data storage instead of Hadoop and because of this is pretty quick and easy to get running and you only need one server. Let&#8217;s begin!<\/p>\\n\\n\\n\\n<p>The first think we are going to do is install OpenJDK 8. At time of writing this is the recommended OpenJDK version for Hbase 2.1+ however if this changes you can find supported versions <a href=\\\"https:\/\/hbase.apache.org\/book.html#java\\\">here<\/a>. SSH into your Ubuntu box and install OpenJDK 8.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo apt install openjdk-8-jdk<\/code><\/pre>\\n\\n\\n\\n<p>Next we are going to make a directory for our HBase data. By default HBase in standalone mode will store data in a temporary directory that is wiped on reboot which is not what we want.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo mkdir -p \/var\/hbase<\/code><\/pre>\\n\\n\\n\\n<p>Now we can get on with installing HBase. Head over to the <a href=\\\"https:\/\/www.apache.org\/dyn\/closer.lua\/hbase\/\\\">Apache download mirrors site<\/a> and click the recommended mirror. Once there we want to find the latest HBase version and locate the version ending in -bin.tar.gz. Once we have that we can use wget to download it.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>wget https:\/\/www.mirrorservice.org\/sites\/ftp.apache.org\/hbase\/2.2.4\/hbase-2.2.4-bin.tar.gz<\/code><\/pre>\\n\\n\\n\\n<p>Now extract the downloaded file<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>tar xzvf hbase-2.2.4-bin.tar.gz<\/code><\/pre>\\n\\n\\n\\n<p>and move into the extracted directory<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>cd hbase-2.2.4<\/code><\/pre>\\n\\n\\n\\n<p>We now need to do a little bit of configuration, let&#8217;s start by setting the JAVA_HOME variable. You&#8217;re going to need to know your Java installation directory, for me this is \/usr\/lib\/jvm\/java-8-openjdk-amd64\/jre however it may be different for you. Once located we need to edit conf\/hbase-env.sh<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano conf\/hbase-env.sh<\/code><\/pre>\\n\\n\\n\\n<p>Set JAVA_HOME to your Java installation directory and then save and exit<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>export JAVA_HOME=\/usr\/lib\/jvm\/java-8-openjdk-amd64\/jre<\/code><\/pre>\\n\\n\\n\\n<p>Now we need to tell HBase about the directory we created earlier so let&#8217;s also edit conf\/hbase-site.xml and set that directory.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano conf\/hbase-site.xml<\/code><\/pre>\\n\\n\\n\\n<p>Set hbase.tmp.dir to the directory we created earlier. Your configuration should look something like this:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>&lt;configuration>\\n  &lt;property>\\n    &lt;name>hbase.tmp.dir&lt;\/name>\\n    &lt;value>\/var\/hbase&lt;\/value>\\n  &lt;\/property>\\n&lt;\/configuration><\/code><\/pre>\\n\\n\\n\\n<p>Save and exit.<\/p>\\n\\n\\n\\n<p>That&#8217;s pretty much it when it comes to installing HBase. We should be able to start HBase by running the start-hbase script<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>bin\/start-hbase.sh<\/code><\/pre>\\n\\n\\n\\n<p>After a few minutes HBase should have started, you can test this by connecting to it using the HBase shell<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>.\/bin\/hbase shell<\/code><\/pre>\\n\\n\\n\\n<p>If everything has gone to plan after a few seconds you will be at the HBase shell.<\/p>\\n\\n\\n\\n<p>Well done so far! The only thing left is to configure HBase to start on system startup. Our current config requires the start-hbase.sh script to be manually ran which is not ideal. We are going to be using <a href=\\\"http:\/\/supervisord.org\/\\\">Supervisor<\/a> to auto run our start script when the system starts. Install Supervisor using the following command:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo apt-get install supervisor<\/code><\/pre>\\n\\n\\n\\n<p>Now we need to make a conf file so Supervisor knows about HBase and can start it for us.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo nano \/etc\/supervisor\/conf.d\/hbase.conf<\/code><\/pre>\\n\\n\\n\\n<p>Enter the following configuration. One thing to be aware of is that the hbase-x.x.x directory may be in a slightly different directory for you so make sure you enter the correct path.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>&#91;program:hbase]\\ncommand=bash -c \\\"\/home\/tom\/hbase-2.2.4\/bin\/start-hbase.sh\\\"\\npriority=100\\nstdout_logfile=\/var\/log\/hbase.out.log\\nstderr_logfile=\/var\/log\/hbase.err.log\\nautostart=true\\nautorestart=true<\/code><\/pre>\\n\\n\\n\\n<p>Save and exit like usual and run the following commands to tell Supervisor that there is a new configuration and to run it.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo supervisorctl reread<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>sudo supervisorctl update<\/code><\/pre>\\n\\n\\n\\n<p>You should now be able to access the HBase web UI! If you aren&#8217;t sure what port it&#8217;s running on you can cd into the HBase logs directory and run the following command to show the ports HBase is running on:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>grep 'Jetty' *<\/code><\/pre>\\n\\n\\n\\n<p>In my case the UI can be accessed on 16030. If you can&#8217;t access the web UI you can tail the hbase error log for hints as to what&#8217;s going wrong.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>tail \/var\/log\/hbase.err.log<\/code><\/pre>\\n\\n\\n\\n<p>Remember that standalone is not recommended for production environments and you risk data loss by running it in this configuration. Thanks!<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p><a href=\"https:\/\/hbase.apache.org\/\">HBase<\/a> can be installed in three modes: standalone, pseudo-distributed and distributed &#8211; each mode has uses and advantages and disadvantages and slightly different install steps because of it. This article will guide you through the installation of HBase in standalone mode on Ubuntu 18.04. <\/p>\n\n\n\n<p>So why use standalone mode? Firstly standalone mode is not recommended for production use however for development or non-important data standalone mode can be ideal. Standalone mode uses the local file system for data storage instead of Hadoop and because of this is pretty quick and easy to get running and you only need one server. Let&#8217;s begin!<\/p>\n\n\n\n<p>The first think we are going to do is install OpenJDK 8. At time of writing this is the recommended OpenJDK version for Hbase 2.1+ however if this changes you can find supported versions <a href=\"https:\/\/hbase.apache.org\/book.html#java\">here<\/a>. SSH into your Ubuntu box and install OpenJDK 8.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt install openjdk-8-jdk<\/code><\/pre>\n\n\n\n<p>Next we are going to make a directory for our HBase data. By default HBase in standalone mode will store data in a temporary directory that is wiped on reboot which is not what we want.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo mkdir -p \/var\/hbase<\/code><\/pre>\n\n\n\n<p>Now we can get on with installing HBase. Head over to the <a href=\"https:\/\/www.apache.org\/dyn\/closer.lua\/hbase\/\">Apache download mirrors site<\/a> and click the recommended mirror. Once there we want to find the latest HBase version and locate the version ending in -bin.tar.gz. Once we have that we can use wget to download it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>wget https:\/\/www.mirrorservice.org\/sites\/ftp.apache.org\/hbase\/2.2.4\/hbase-2.2.4-bin.tar.gz<\/code><\/pre>\n\n\n\n<p>Now extract the downloaded file<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>tar xzvf hbase-2.2.4-bin.tar.gz<\/code><\/pre>\n\n\n\n<p>and move into the extracted directory<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd hbase-2.2.4<\/code><\/pre>\n\n\n\n<p>We now need to do a little bit of configuration, let&#8217;s start by setting the JAVA_HOME variable. You&#8217;re going to need to know your Java installation directory, for me this is \/usr\/lib\/jvm\/java-8-openjdk-amd64\/jre however it may be different for you. Once located we need to edit conf\/hbase-env.sh<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano conf\/hbase-env.sh<\/code><\/pre>\n\n\n\n<p>Set JAVA_HOME to your Java installation directory and then save and exit<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>export JAVA_HOME=\/usr\/lib\/jvm\/java-8-openjdk-amd64\/jre<\/code><\/pre>\n\n\n\n<p>Now we need to tell HBase about the directory we created earlier so let&#8217;s also edit conf\/hbase-site.xml and set that directory.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano conf\/hbase-site.xml<\/code><\/pre>\n\n\n\n<p>Set hbase.tmp.dir to the directory we created earlier. Your configuration should look something like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;configuration>\n  &lt;property>\n    &lt;name>hbase.tmp.dir&lt;\/name>\n    &lt;value>\/var\/hbase&lt;\/value>\n  &lt;\/property>\n&lt;\/configuration><\/code><\/pre>\n\n\n\n<p>Save and exit.<\/p>\n\n\n\n<p>That&#8217;s pretty much it when it comes to installing HBase. We should be able to start HBase by running the start-hbase script<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>bin\/start-hbase.sh<\/code><\/pre>\n\n\n\n<p>After a few minutes HBase should have started, you can test this by connecting to it using the HBase shell<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>.\/bin\/hbase shell<\/code><\/pre>\n\n\n\n<p>If everything has gone to plan after a few seconds you will be at the HBase shell.<\/p>\n\n\n\n<p>Well done so far! The only thing left is to configure HBase to start on system startup. Our current config requires the start-hbase.sh script to be manually ran which is not ideal. We are going to be using <a href=\"http:\/\/supervisord.org\/\">Supervisor<\/a> to auto run our start script when the system starts. Install Supervisor using the following command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install supervisor<\/code><\/pre>\n\n\n\n<p>Now we need to make a conf file so Supervisor knows about HBase and can start it for us.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo nano \/etc\/supervisor\/conf.d\/hbase.conf<\/code><\/pre>\n\n\n\n<p>Enter the following configuration. One thing to be aware of is that the hbase-x.x.x directory may be in a slightly different directory for you so make sure you enter the correct path.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;program:hbase]\ncommand=bash -c \"\/home\/tom\/hbase-2.2.4\/bin\/start-hbase.sh\"\npriority=100\nstdout_logfile=\/var\/log\/hbase.out.log\nstderr_logfile=\/var\/log\/hbase.err.log\nautostart=true\nautorestart=true<\/code><\/pre>\n\n\n\n<p>Save and exit like usual and run the following commands to tell Supervisor that there is a new configuration and to run it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo supervisorctl reread<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo supervisorctl update<\/code><\/pre>\n\n\n\n<p>You should now be able to access the HBase web UI! If you aren&#8217;t sure what port it&#8217;s running on you can cd into the HBase logs directory and run the following command to show the ports HBase is running on:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>grep 'Jetty' *<\/code><\/pre>\n\n\n\n<p>In my case the UI can be accessed on 16030. If you can&#8217;t access the web UI you can tail the hbase error log for hints as to what&#8217;s going wrong.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>tail \/var\/log\/hbase.err.log<\/code><\/pre>\n\n\n\n<p>Remember that standalone is not recommended for production environments and you risk data loss by running it in this configuration. Thanks!<\/p>\n","feature_image":"/content/images/wordpress\/2020\/05\/hbase_logo_with_orca_large.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 02 May 2020 18:13:58 +0000","created_by":1,"updated_at":"Sat, 02 May 2020 18:17:44 +0000","updated_by":1,"published_at":"Sat, 02 May 2020 18:13:58 +0000","published_by":1},{"id":653,"title":"YamlPipelinesValidator.dev - Quickly and easily test Azure DevOps YAML pipelines","slug":"yamlpipelinesvalidator-dev-quickly-and-easily-test-azure-devops-yaml-pipelines","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>I&#8217;ve been slowly migrating all my <a href=\\\"https:\/\/azure.microsoft.com\/en-us\/services\/devops\/\\\">Azure DevOps<\/a> pipelines to the new <a href=\\\"https:\/\/docs.microsoft.com\/en-us\/azure\/devops\/pipelines\/yaml-schema?view=azure-devops&amp;tabs=schema%2Cparameter-schema\\\">YAML<\/a> format and really been enjoying the benefits however there is currently no way to test a YAML pipeline before committing it. Having to commit the YAML before seeing if it&#8217;s valid may be fine if you&#8217;re just pushing to master and have no branch policies but if you have branch policies that require the use of pull requests (as you probably should) it soon becomes tedious when the pipeline fails due to it being invalid in some way.<\/p>\\n\\n\\n\\n<p>What I really wanted was a way to test if the pipeline was syntactically correct before committing it but there didn&#8217;t seem to be a way to do this. Microsoft had started building that functionality into their on-premise agents however that was quickly abandoned. Azure DevOps do provide an <a href=\\\"https:\/\/docs.microsoft.com\/en-us\/azure\/devops\/release-notes\/2020\/sprint-165-update#preview-fully-parsed-yaml-document-without-committing-or-running-the-pipeline\\\">API for testing a yaml pipeline<\/a> however I wanted something a bit more user friendly. <\/p>\\n\\n\\n\\n<p>After some searching I realised there wasn&#8217;t really anything that had the capability to do what I wanted so I decided to build it. I built <a href=\\\"https:\/\/yamlpipelinesvalidator.dev\/\\\">YamlPipelinesValidator.dev<\/a>! Now you can test your Azure DevOps YAML pipelines without committing anything! Underneath the UI it is just calling the Azure DevOps API so has the same limitations such as not being able to check the contents of variables or checking for correct values however it will stop you needing to commit over and over again just to check if it has the correct syntax or your task properties are correct!<\/p>\\n\\n\\n\\n<p>All the code is available on my <a href=\\\"https:\/\/github.com\/tomaustin700\/YAMLPipelineValidator\\\">GitHub<\/a> so if you have any issues let me know here or raise an issue (or raise a PR). Hopefully this will help you with your YAML pipelines and stop the endless cycle of commit &#8211; raise PR &#8211; run &#8211; fail. Enjoy!<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>I&#8217;ve been slowly migrating all my <a href=\"https:\/\/azure.microsoft.com\/en-us\/services\/devops\/\">Azure DevOps<\/a> pipelines to the new <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/devops\/pipelines\/yaml-schema?view=azure-devops&amp;tabs=schema%2Cparameter-schema\">YAML<\/a> format and really been enjoying the benefits however there is currently no way to test a YAML pipeline before committing it. Having to commit the YAML before seeing if it&#8217;s valid may be fine if you&#8217;re just pushing to master and have no branch policies but if you have branch policies that require the use of pull requests (as you probably should) it soon becomes tedious when the pipeline fails due to it being invalid in some way.<\/p>\n\n\n\n<p>What I really wanted was a way to test if the pipeline was syntactically correct before committing it but there didn&#8217;t seem to be a way to do this. Microsoft had started building that functionality into their on-premise agents however that was quickly abandoned. Azure DevOps do provide an <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/devops\/release-notes\/2020\/sprint-165-update#preview-fully-parsed-yaml-document-without-committing-or-running-the-pipeline\">API for testing a yaml pipeline<\/a> however I wanted something a bit more user friendly. <\/p>\n\n\n\n<p>After some searching I realised there wasn&#8217;t really anything that had the capability to do what I wanted so I decided to build it. I built <a href=\"https:\/\/yamlpipelinesvalidator.dev\/\">YamlPipelinesValidator.dev<\/a>! Now you can test your Azure DevOps YAML pipelines without committing anything! Underneath the UI it is just calling the Azure DevOps API so has the same limitations such as not being able to check the contents of variables or checking for correct values however it will stop you needing to commit over and over again just to check if it has the correct syntax or your task properties are correct!<\/p>\n\n\n\n<p>All the code is available on my <a href=\"https:\/\/github.com\/tomaustin700\/YAMLPipelineValidator\">GitHub<\/a> so if you have any issues let me know here or raise an issue (or raise a PR). Hopefully this will help you with your YAML pipelines and stop the endless cycle of commit &#8211; raise PR &#8211; run &#8211; fail. Enjoy!<\/p>\n","feature_image":"/content/images/wordpress\/2020\/05\/validyaml.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 31 May 2020 14:09:14 +0000","created_by":1,"updated_at":"Sun, 31 May 2020 14:12:08 +0000","updated_by":1,"published_at":"Sun, 31 May 2020 14:09:14 +0000","published_by":1},{"id":682,"title":"Managing Disk Space of Azure DevOps Self-Hosted Agents","slug":"managing-disk-space-of-azure-devops-self-hosted-agents","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>Part of my daily job involves managing <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/\\\">Azure DevOps<\/a> pipelines and agents, something we have quite a lot of! I&#8217;d estimate nightly there are over a hundred pipelines that run and probably a further fifty run each day as part of pull request validation processes. Because all agents are currently self-hosted this can create a bit of an issue regarding disk space if you&#8217;re not careful and there are a couple of tips and tricks that can help with managing this.<\/p>\\n\\n\\n\\n<p>Before getting into how to manage disk space it&#8217;s important to know how an Azure DevOps pipeline works. When a pipeline is queued it will execute a git fetch on the target branch, if you have quite a large git repository this can result in a large amount of files being pulled down onto the agent. These files will not be removed when the pipeline has completed which is why if you have a lot of pipelines you can run into disk issues.<\/p>\\n\\n\\n\\n<p>Azure DevOps has a few ways to deal with this however it can also be confusing if you&#8217;re not overly familiar with pipeline settings and managing agents. <\/p>\\n\\n\\n\\n<p>The first thing you may come across is the &#8216;Clean&#8217; option on the pipeline which may sound exactly like what you want, you&#8217;d probably expect this to clean the working directory once the pipeline has completed &#8211; unfortunately this is not the case. Clean will only clean the working directory before the pipeline has ran meaning between pipeline runs your repository files will remain on the agent. Imagine having hundreds of different pipelines that rarely hit the same agent with a large git repository &#8211; it&#8217;s a recipe for your disk space to quickly vanish. <\/p>\\n\\n\\n\\n<p>If you&#8217;re using Classic Pipelines there is a marketplace task provided by Microsoft which can quickly resolve this called <a href=\\\"https:\/\/marketplace.visualstudio.com\/items?itemName=mspremier.PostBuildCleanup&amp;targetId=8eefb3ec-c76a-4d9b-9ea7-f9cb7662c2e9\\\">Post Build Cleanup<\/a>. Post Build Cleanup looks at your pipelines clean settings and will clean the working directories when the task is ran meaning &#8211; excellent! Problem solved right? Not quite! Post Build Cleanup only support classic pipelines so if you are using YAML pipelines you&#8217;ve still got a problem. I&#8217;ve spoken to the the Microsoft Premier Services team about this and they have the following to say:<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-group\\\"><div class=\\\"wp-block-group__inner-container\\\">\\n<div class=\\\"wp-block-group\\\"><div class=\\\"wp-block-group__inner-container\\\">\\n<div class=\\\"wp-block-group\\\"><div class=\\\"wp-block-group__inner-container\\\">\\n<p><em>&#8220;Thanks for contacting us. We recently received a similar report and ran a couple tests that revealed the following issues:<\/em><\/p>\\n\\n\\n\\n<ol type=\\\"1\\\"><li><em>The workspace option of the job does not set the variable Build.Repostory.Clean to true. This is one of the predefined variables the task is looking for to check if clean is enabled. Thus, if you only use the workspace.clean parameter as in your definition below, the task simply assumes that clean is disabled and will not do anything.<\/em><\/li><li><em>If you set the checkout.clean parameter to true, the agent does indeed set the Build.Repository.Clean variable to true so our task would run. However, in order to know how to clean the agent, our task looks for the cleanOptions property inside the repository properties of the build definition. Unfortunately, this property is not set for YAML pipelines, which is the reason that our task does not clean anything.<\/em><\/li><\/ol>\\n\\n\\n\\n<p><em>We\\u2019d have to explicitly add code to handle YAML pipelines since there is not enough information in the build definition object returned by the API to figure out the correct cleanup strategy. The workspace option does not exist in the definition so we\\u2019d have to read the original YAML file and parse it in order to get the necessary information. Since YAML definitions can spread across multiple files, this isn\\u2019t as easy as it sounds. Thus, I\\u2019m not sure when we\\u2019ll be able to add proper YAML support for the task. I\\u2019m sorry I don\\u2019t have a better answer at the moment.&#8221;<\/em><\/p>\\n<\/div><\/div>\\n<\/div><\/div>\\n<\/div><\/div>\\n\\n\\n\\n<p>It looks like this isn&#8217;t something that will be resolved quickly then so we need to look at alternate solutions.<\/p>\\n\\n\\n\\n<p>Luckily for us there is a built in Azure DevOps feature that can do what we need &#8211; just about! This feature is called <a href=\\\"https:\/\/docs.microsoft.com\/en-us\/azure\/devops\/pipelines\/agents\/pools-queues?view=azure-devops&amp;tabs=yaml%2Cbrowser\\\">Maintenance Jobs<\/a>. Maintenance Jobs run on your agents and will clean the directories for you, you can schedule these to run and even set how many days to keep unused working directories. Unfortunately Maintenance Jobs are hidden away in Azure DevOps settings and if you don&#8217;t know where they are they can be hard to find. Firstly navigate to your Organisation Settings and then select the &#8216;Agents pools&#8217; pane under pipelines, then select the &#8216;Settings&#8217; tab at the top &#8211; at the bottom of that page will be Maintenance jobs settings. <\/p>\\n\\n\\n\\n<p>I have my Maintenance Jobs set to run nightly and to only keep unused working directories for one day which is fairly aggressive but due to the large amount of pipelines and the large git repository size it is necessary. Unfortunately Maintenance Jobs can only be ran on a schedule and can&#8217;t be manually queued but with a bit of tweaking of the settings you should be able to find a good middle-ground.<\/p>\\n\\n\\n\\n<p>I hope this article has helped you with managing your self hosted agents, ideally we&#8217;d all be using Microsoft hosted agents but due to the <a href=\\\"https:\/\/tomaustin.xyz\/presentations\/\\\">large amount of agents my organisation needs and what we do with them<\/a> it&#8217;s currently not feasible. Thanks.<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>Part of my daily job involves managing <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/devops\/\">Azure DevOps<\/a> pipelines and agents, something we have quite a lot of! I&#8217;d estimate nightly there are over a hundred pipelines that run and probably a further fifty run each day as part of pull request validation processes. Because all agents are currently self-hosted this can create a bit of an issue regarding disk space if you&#8217;re not careful and there are a couple of tips and tricks that can help with managing this.<\/p>\n\n\n\n<p>Before getting into how to manage disk space it&#8217;s important to know how an Azure DevOps pipeline works. When a pipeline is queued it will execute a git fetch on the target branch, if you have quite a large git repository this can result in a large amount of files being pulled down onto the agent. These files will not be removed when the pipeline has completed which is why if you have a lot of pipelines you can run into disk issues.<\/p>\n\n\n\n<p>Azure DevOps has a few ways to deal with this however it can also be confusing if you&#8217;re not overly familiar with pipeline settings and managing agents. <\/p>\n\n\n\n<p>The first thing you may come across is the &#8216;Clean&#8217; option on the pipeline which may sound exactly like what you want, you&#8217;d probably expect this to clean the working directory once the pipeline has completed &#8211; unfortunately this is not the case. Clean will only clean the working directory before the pipeline has ran meaning between pipeline runs your repository files will remain on the agent. Imagine having hundreds of different pipelines that rarely hit the same agent with a large git repository &#8211; it&#8217;s a recipe for your disk space to quickly vanish. <\/p>\n\n\n\n<p>If you&#8217;re using Classic Pipelines there is a marketplace task provided by Microsoft which can quickly resolve this called <a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=mspremier.PostBuildCleanup&amp;targetId=8eefb3ec-c76a-4d9b-9ea7-f9cb7662c2e9\">Post Build Cleanup<\/a>. Post Build Cleanup looks at your pipelines clean settings and will clean the working directories when the task is ran meaning &#8211; excellent! Problem solved right? Not quite! Post Build Cleanup only support classic pipelines so if you are using YAML pipelines you&#8217;ve still got a problem. I&#8217;ve spoken to the the Microsoft Premier Services team about this and they have the following to say:<\/p>\n\n\n\n<div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<p><em>&#8220;Thanks for contacting us. We recently received a similar report and ran a couple tests that revealed the following issues:<\/em><\/p>\n\n\n\n<ol type=\"1\"><li><em>The workspace option of the job does not set the variable Build.Repostory.Clean to true. This is one of the predefined variables the task is looking for to check if clean is enabled. Thus, if you only use the workspace.clean parameter as in your definition below, the task simply assumes that clean is disabled and will not do anything.<\/em><\/li><li><em>If you set the checkout.clean parameter to true, the agent does indeed set the Build.Repository.Clean variable to true so our task would run. However, in order to know how to clean the agent, our task looks for the cleanOptions property inside the repository properties of the build definition. Unfortunately, this property is not set for YAML pipelines, which is the reason that our task does not clean anything.<\/em><\/li><\/ol>\n\n\n\n<p><em>We\u2019d have to explicitly add code to handle YAML pipelines since there is not enough information in the build definition object returned by the API to figure out the correct cleanup strategy. The workspace option does not exist in the definition so we\u2019d have to read the original YAML file and parse it in order to get the necessary information. Since YAML definitions can spread across multiple files, this isn\u2019t as easy as it sounds. Thus, I\u2019m not sure when we\u2019ll be able to add proper YAML support for the task. I\u2019m sorry I don\u2019t have a better answer at the moment.&#8221;<\/em><\/p>\n<\/div><\/div>\n<\/div><\/div>\n<\/div><\/div>\n\n\n\n<p>It looks like this isn&#8217;t something that will be resolved quickly then so we need to look at alternate solutions.<\/p>\n\n\n\n<p>Luckily for us there is a built in Azure DevOps feature that can do what we need &#8211; just about! This feature is called <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/devops\/pipelines\/agents\/pools-queues?view=azure-devops&amp;tabs=yaml%2Cbrowser\">Maintenance Jobs<\/a>. Maintenance Jobs run on your agents and will clean the directories for you, you can schedule these to run and even set how many days to keep unused working directories. Unfortunately Maintenance Jobs are hidden away in Azure DevOps settings and if you don&#8217;t know where they are they can be hard to find. Firstly navigate to your Organisation Settings and then select the &#8216;Agents pools&#8217; pane under pipelines, then select the &#8216;Settings&#8217; tab at the top &#8211; at the bottom of that page will be Maintenance jobs settings. <\/p>\n\n\n\n<p>I have my Maintenance Jobs set to run nightly and to only keep unused working directories for one day which is fairly aggressive but due to the large amount of pipelines and the large git repository size it is necessary. Unfortunately Maintenance Jobs can only be ran on a schedule and can&#8217;t be manually queued but with a bit of tweaking of the settings you should be able to find a good middle-ground.<\/p>\n\n\n\n<p>I hope this article has helped you with managing your self hosted agents, ideally we&#8217;d all be using Microsoft hosted agents but due to the <a href=\"https:\/\/tomaustin.xyz\/presentations\/\">large amount of agents my organisation needs and what we do with them<\/a> it&#8217;s currently not feasible. Thanks.<\/p>\n","feature_image":"/content/images/wordpress\/2020\/12\/agent-pools.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 23 Dec 2020 13:00:00 +0000","created_by":1,"updated_at":"Wed, 23 Dec 2020 09:37:08 +0000","updated_by":1,"published_at":"Wed, 23 Dec 2020 13:00:00 +0000","published_by":1},{"id":694,"title":"Deploying Selenium Grid 4 to Azure Kubernetes Service (AKS) using Azure DevOps","slug":"deploying-selenium-grid-4-to-azure-kubernetes-service-aks-using-azure-devops","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>One of the most popular articles I&#8217;ve written on this blog was <a href=\\\"https:\/\/tomaustin.xyz\/2020\/02\/02\/deploying-selenium-grid-to-azure-kubernetes-service-aks-using-azure-devops\/\\\">this tutorial<\/a> showing how to deploy Selenium Grid 3 to Azure Kubernetes Service, Selenium Grid 4 is now in beta and has been rewritten from scratch so there are some big changes which you need to be aware of when deploying to Kubernetes. This article will explain some of the changes between Grid 3 and 4 and guide you through deploying Grid 4 to your AKS instance using Azure Pipelines.<\/p>\\n\\n\\n\\n<p>Before we get started I am going to assume you have a running AKS instance with a functioning ingress controller, if you don&#8217;t then you can follow the following tutorials to get up and running &#8211; <a href=\\\"https:\/\/tomaustin.xyz\/2020\/03\/27\/deploying-an-azure-kubernetes-service-aks-instance-with-an-nginx-ingress-controller\/\\\">Deploying an Azure Kubernetes Service (AKS) instance with an Nginx ingress controller<\/a> and <a href=\\\"https:\/\/tomaustin.xyz\/2020\/03\/29\/updating-an-aks-nginx-ingress-controller-using-azure-devops-pipelines\/\\\">Updating an AKS Nginx ingress controller using Azure DevOps pipelines<\/a>. It&#8217;s also beneficial to have kubectl <a href=\\\"https:\/\/kubernetes.io\/docs\/tasks\/tools\/install-kubectl\/\\\">installed locally and configured<\/a>. <\/p>\\n\\n\\n\\n<p>Let&#8217;s firstly look at some of the differences between Grid 3 and 4. Selenium Grid 3 had two types of components: Hub and Node. The hub would forward test jobs onto the nodes and the nodes would execute the tests, you would have one hub and then many nodes.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img src=\\\"https:\/\/i0.wp.com\/www.selenium.dev\/documentation\/images\/grid.png?w=640&#038;ssl=1\\\" alt=\\\"Grid\\\" data-recalc-dims=\\\"1\\\"\/><figcaption>Image from https:\/\/www.selenium.dev\/documentation\/en\/grid\/grid_3\/components_of_a_grid\/<\/figcaption><\/figure>\\n\\n\\n\\n<p> With Selenium Grid 4 things are a bit different, the hub has now gone and in it&#8217;s place we have the following components:<\/p>\\n\\n\\n\\n<ul><li>Router<\/li><li>Distributor<\/li><li>Session Map<\/li><li>Session Queue<\/li><li>Event Bus<\/li><\/ul>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img src=\\\"https:\/\/i0.wp.com\/www.selenium.dev\/documentation\/images\/grid_4.png?w=640&#038;ssl=1\\\" alt=\\\"Grid\\\" data-recalc-dims=\\\"1\\\"\/><figcaption>Image from https:\/\/www.selenium.dev\/documentation\/en\/grid\/grid_4\/components_of_a_grid\/<\/figcaption><\/figure>\\n\\n\\n\\n<p>I&#8217;m not going to go into detail about how Grid 4 works with the new components but if you are interested it&#8217;s all documented <a href=\\\"https:\/\/www.selenium.dev\/documentation\/en\/grid\/grid_4\/components_of_a_grid\/\\\">here<\/a>. Due to the additional components this makes it a little trickier to deploy but it&#8217;s not too bad once you get your head around it. Let&#8217;s get onto deployment!<\/p>\\n\\n\\n\\n<p>I&#8217;m going to be using <a href=\\\"https:\/\/helm.sh\/\\\">Helm <\/a>to deploy the Grid 4 components using Azure DevOps. I&#8217;m only using Azure DevOps as it&#8217;s what I&#8217;m familiar with however the concept is the same if you are using GitHub Actions or any other CI\/CD system. <\/p>\\n\\n\\n\\n<p>To deploy the components using Helm we need Helm charts for each component, if you navigate to the <a href=\\\"https:\/\/github.com\/tomaustin700\/AKSSeleniumGrid4\\\">following GitHub repo<\/a> I have already constructed all the charts we are going to need. That repo also contains the pipeline for deploying so it should just be a case of configuring Azure DevOps and pointing it at our files and pipeline. I&#8217;d recommend forking that GitHub repo if you want to follow along easily.<\/p>\\n\\n\\n\\n<p>Let&#8217;s head over to Azure DevOps and make a new project, once your project has initialised press the Project Settings cog in the bottom left and navigate to &#8216;Service connections&#8217;, then press &#8216;New service connection&#8217; in the top right. <\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1024x680.png?resize=416%2C276&#038;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-697\\\" width=\\\"416\\\" height=\\\"276\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image.png?resize=1024%2C680 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image.png?resize=300%2C199 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image.png?resize=768%2C510 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image.png?resize=720%2C478 720w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image.png?w=1333 1333w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image.png?w=1280 1280w\\\" sizes=\\\"(max-width: 416px) 100vw, 416px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Select &#8216;Azure Resource Manager&#8217; and press &#8216;Next&#8217;. Leave authentication method at &#8216;Service principal&#8217; and press &#8216;Next&#8217; again.<\/p>\\n\\n\\n\\n<p>We now need to connect to our Azure subscription so leave &#8216;Scope level&#8217; at &#8216;Subscription and select your Azure Subscription from the drop down. Leave &#8216;Resource Group&#8217; blank and set the service connection name. Finally press &#8216;Save&#8217;<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1-806x1024.png?resize=431%2C547&#038;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-698\\\" width=\\\"431\\\" height=\\\"547\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1.png?resize=806%2C1024 806w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1.png?resize=236%2C300 236w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1.png?resize=768%2C975 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1.png?resize=1209%2C1536 1209w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1.png?resize=720%2C914 720w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1.png?w=1270 1270w\\\" sizes=\\\"(max-width: 431px) 100vw, 431px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>Now we just need to add the pipeline so head over to Azure Pipelines by pressing the Pipeline button on the left. Once you&#8217;re on Pipelines press &#8216;New pipeline&#8217; in the top right. Select the location of your code (in my case GitHub) and select the repository. When prompted to configure the pipeline select &#8216;Existing Azure Pipelines YAML file&#8217; and select your pipeline file before pressing &#8216;Continue&#8217;.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-2-1024x624.png?resize=434%2C264&#038;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-699\\\" width=\\\"434\\\" height=\\\"264\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-2.png?resize=1024%2C624 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-2.png?resize=300%2C183 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-2.png?resize=768%2C468 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-2.png?resize=720%2C439 720w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-2.png?w=1273 1273w\\\" sizes=\\\"(max-width: 434px) 100vw, 434px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>You should now see your YAML pipeline file. You may need to make a few changes to this depending on your Azure service connection name you set earlier, Azure Resource Group name and AKS instance name. Update the following variables on each task to match yours:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>        azureSubscriptionEndpoint: 'Azure'\\n        azureResourceGroup: aksselgrig4test\\n        kubernetesCluster: aksselgrid4<\/code><\/pre>\\n\\n\\n\\n<p>Make sure to update these variables on each task, you could potentially declare them in the &#8216;variables&#8217; section to make things slightly easier but I haven&#8217;t. Also make sure to update the namespace variable to match the namespace you want to deploy Selenium Grid 4 to within your AKS instance. Once you&#8217;ve finished configuring your pipeline you should be able to run it and everything should deploy.<\/p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter size-large is-resized\\\"><img loading=\\\"lazy\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-3-1024x812.png?resize=422%2C334&#038;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-700\\\" width=\\\"422\\\" height=\\\"334\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-3.png?resize=1024%2C812 1024w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-3.png?resize=300%2C238 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-3.png?resize=768%2C609 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-3.png?resize=720%2C571 720w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-3.png?w=1230 1230w\\\" sizes=\\\"(max-width: 422px) 100vw, 422px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure><\/div>\\n\\n\\n\\n<p>If you have kubectl installed locally and configured you can run the following command to list all the components that we just deployed.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl get all -l component=selenium-grid-4 -n ingress-basic<\/code><\/pre>\\n\\n\\n\\n<p>With any luck you should be able to see everything running correctly.<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image size-large\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"170\\\" src=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-4.png?resize=640%2C170&#038;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-701\\\" srcset=\\\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-4.png?w=749 749w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-4.png?resize=300%2C80 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-4.png?resize=720%2C191 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>Now the only thing left to do is configure your ingress controller to allow access to selenium-router. I&#8217;m using an nginx ingress controller so I applied the following config using kubectl, you could also do with with an Azure DevOps pipeline as seen <a href=\\\"https:\/\/tomaustin.xyz\/2020\/03\/29\/updating-an-aks-nginx-ingress-controller-using-azure-devops-pipelines\/\\\">here<\/a> &#8211; I&#8217;d recommend you do it this way if running in prod.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>apiVersion: extensions\/v1beta1\\nkind: Ingress\\nmetadata:\\n  name: ingress\\n  namespace: ingress-basic\\n  annotations:\\n    kubernetes.io\/ingress.class: nginx\\n    nginx.ingress.kubernetes.io\/use-regex: \\\"true\\\"\\n    nginx.ingress.kubernetes.io\/rewrite-target: \/$2\\nspec:\\n  rules:\\n  - host: youraksinstancehostnamegoeshere\\n    http:\\n      paths:\\n      - path: \/grid(\/|$)(.*)\\n        backend:\\n          serviceName: selenium-router\\n          servicePort: 4444\\n      - path: \/\\n        backend:\\n          serviceName: helloworld\\n          servicePort: 80<\/code><\/pre>\\n\\n\\n\\n<p>There are a few things to note in the config. Firstly make sure to update the host to match the hostname of your AKS instance. Also I already had a service running in my AKS instance that had a rule so I needed to add another for Selenium Grid, I used an <a href=\\\"https:\/\/kubernetes.github.io\/ingress-nginx\/examples\/rewrite\/\\\">ingress rule rewrite annotation<\/a> in the path which you may also need to do if you have other services on your AKS instance. <\/p>\\n\\n\\n\\n<p>Once you&#8217;ve applied that configuration you can use <a href=\\\"https:\/\/www.postman.com\/product\/api-client\/\\\">Postman<\/a> to check everything is running correctly. Simply do an HTTP GET request to the hostname of your AKS instance followed by \/grid\/status. You should get a response with &#8216;ready: true&#8217; and info about your nodes. You should be able to start running tests on Grid. Something to note is that the url for running tests has changed between Grid 3 and Grid 4: the Grid 3 used to be hostname\/wd\/hub whereas now you don&#8217;t need the \/wd\/hub portion.<\/p>\\n\\n\\n\\n<p>That concludes this tutorial and you should now have Grid 4 deployed to AKS using an Azure DevOps pipeline. If you have any issues or queries please leave a comment or contact me on <a href=\\\"https:\/\/twitter.com\/tomaustin700\\\">Twitter<\/a>. Thanks<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>One of the most popular articles I&#8217;ve written on this blog was <a href=\"https:\/\/tomaustin.xyz\/2020\/02\/02\/deploying-selenium-grid-to-azure-kubernetes-service-aks-using-azure-devops\/\">this tutorial<\/a> showing how to deploy Selenium Grid 3 to Azure Kubernetes Service, Selenium Grid 4 is now in beta and has been rewritten from scratch so there are some big changes which you need to be aware of when deploying to Kubernetes. This article will explain some of the changes between Grid 3 and 4 and guide you through deploying Grid 4 to your AKS instance using Azure Pipelines.<\/p>\n\n\n\n<p>Before we get started I am going to assume you have a running AKS instance with a functioning ingress controller, if you don&#8217;t then you can follow the following tutorials to get up and running &#8211; <a href=\"https:\/\/tomaustin.xyz\/2020\/03\/27\/deploying-an-azure-kubernetes-service-aks-instance-with-an-nginx-ingress-controller\/\">Deploying an Azure Kubernetes Service (AKS) instance with an Nginx ingress controller<\/a> and <a href=\"https:\/\/tomaustin.xyz\/2020\/03\/29\/updating-an-aks-nginx-ingress-controller-using-azure-devops-pipelines\/\">Updating an AKS Nginx ingress controller using Azure DevOps pipelines<\/a>. It&#8217;s also beneficial to have kubectl <a href=\"https:\/\/kubernetes.io\/docs\/tasks\/tools\/install-kubectl\/\">installed locally and configured<\/a>. <\/p>\n\n\n\n<p>Let&#8217;s firstly look at some of the differences between Grid 3 and 4. Selenium Grid 3 had two types of components: Hub and Node. The hub would forward test jobs onto the nodes and the nodes would execute the tests, you would have one hub and then many nodes.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/i0.wp.com\/www.selenium.dev\/documentation\/images\/grid.png?w=640&#038;ssl=1\" alt=\"Grid\" data-recalc-dims=\"1\"\/><figcaption>Image from https:\/\/www.selenium.dev\/documentation\/en\/grid\/grid_3\/components_of_a_grid\/<\/figcaption><\/figure>\n\n\n\n<p> With Selenium Grid 4 things are a bit different, the hub has now gone and in it&#8217;s place we have the following components:<\/p>\n\n\n\n<ul><li>Router<\/li><li>Distributor<\/li><li>Session Map<\/li><li>Session Queue<\/li><li>Event Bus<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/i0.wp.com\/www.selenium.dev\/documentation\/images\/grid_4.png?w=640&#038;ssl=1\" alt=\"Grid\" data-recalc-dims=\"1\"\/><figcaption>Image from https:\/\/www.selenium.dev\/documentation\/en\/grid\/grid_4\/components_of_a_grid\/<\/figcaption><\/figure>\n\n\n\n<p>I&#8217;m not going to go into detail about how Grid 4 works with the new components but if you are interested it&#8217;s all documented <a href=\"https:\/\/www.selenium.dev\/documentation\/en\/grid\/grid_4\/components_of_a_grid\/\">here<\/a>. Due to the additional components this makes it a little trickier to deploy but it&#8217;s not too bad once you get your head around it. Let&#8217;s get onto deployment!<\/p>\n\n\n\n<p>I&#8217;m going to be using <a href=\"https:\/\/helm.sh\/\">Helm <\/a>to deploy the Grid 4 components using Azure DevOps. I&#8217;m only using Azure DevOps as it&#8217;s what I&#8217;m familiar with however the concept is the same if you are using GitHub Actions or any other CI\/CD system. <\/p>\n\n\n\n<p>To deploy the components using Helm we need Helm charts for each component, if you navigate to the <a href=\"https:\/\/github.com\/tomaustin700\/AKSSeleniumGrid4\">following GitHub repo<\/a> I have already constructed all the charts we are going to need. That repo also contains the pipeline for deploying so it should just be a case of configuring Azure DevOps and pointing it at our files and pipeline. I&#8217;d recommend forking that GitHub repo if you want to follow along easily.<\/p>\n\n\n\n<p>Let&#8217;s head over to Azure DevOps and make a new project, once your project has initialised press the Project Settings cog in the bottom left and navigate to &#8216;Service connections&#8217;, then press &#8216;New service connection&#8217; in the top right. <\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1024x680.png?resize=416%2C276&#038;ssl=1\" alt=\" class=\"wp-image-697\" width=\"416\" height=\"276\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image.png?resize=1024%2C680 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image.png?resize=300%2C199 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image.png?resize=768%2C510 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image.png?resize=720%2C478 720w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image.png?w=1333 1333w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image.png?w=1280 1280w\" sizes=\"(max-width: 416px) 100vw, 416px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Select &#8216;Azure Resource Manager&#8217; and press &#8216;Next&#8217;. Leave authentication method at &#8216;Service principal&#8217; and press &#8216;Next&#8217; again.<\/p>\n\n\n\n<p>We now need to connect to our Azure subscription so leave &#8216;Scope level&#8217; at &#8216;Subscription and select your Azure Subscription from the drop down. Leave &#8216;Resource Group&#8217; blank and set the service connection name. Finally press &#8216;Save&#8217;<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1-806x1024.png?resize=431%2C547&#038;ssl=1\" alt=\" class=\"wp-image-698\" width=\"431\" height=\"547\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1.png?resize=806%2C1024 806w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1.png?resize=236%2C300 236w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1.png?resize=768%2C975 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1.png?resize=1209%2C1536 1209w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1.png?resize=720%2C914 720w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-1.png?w=1270 1270w\" sizes=\"(max-width: 431px) 100vw, 431px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Now we just need to add the pipeline so head over to Azure Pipelines by pressing the Pipeline button on the left. Once you&#8217;re on Pipelines press &#8216;New pipeline&#8217; in the top right. Select the location of your code (in my case GitHub) and select the repository. When prompted to configure the pipeline select &#8216;Existing Azure Pipelines YAML file&#8217; and select your pipeline file before pressing &#8216;Continue&#8217;.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-2-1024x624.png?resize=434%2C264&#038;ssl=1\" alt=\" class=\"wp-image-699\" width=\"434\" height=\"264\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-2.png?resize=1024%2C624 1024w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-2.png?resize=300%2C183 300w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-2.png?resize=768%2C468 768w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-2.png?resize=720%2C439 720w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-2.png?w=1273 1273w\" sizes=\"(max-width: 434px) 100vw, 434px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>You should now see your YAML pipeline file. You may need to make a few changes to this depending on your Azure service connection name you set earlier, Azure Resource Group name and AKS instance name. Update the following variables on each task to match yours:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>        azureSubscriptionEndpoint: 'Azure'\n        azureResourceGroup: aksselgrig4test\n        kubernetesCluster: aksselgrid4<\/code><\/pre>\n\n\n\n<p>Make sure to update these variables on each task, you could potentially declare them in the &#8216;variables&#8217; section to make things slightly easier but I haven&#8217;t. Also make sure to update the namespace variable to match the namespace you want to deploy Selenium Grid 4 to within your AKS instance. Once you&#8217;ve finished configuring your pipeline you should be able to run it and everything should deploy.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-3-1024x812.png?resize=422%2C334&#038;ssl=1\" alt=\" class=\"wp-image-700\" width=\"422\" height=\"334\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-3.png?resize=1024%2C812 1024w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-3.png?resize=300%2C238 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-3.png?resize=768%2C609 768w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-3.png?resize=720%2C571 720w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-3.png?w=1230 1230w\" sizes=\"(max-width: 422px) 100vw, 422px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>If you have kubectl installed locally and configured you can run the following command to list all the components that we just deployed.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl get all -l component=selenium-grid-4 -n ingress-basic<\/code><\/pre>\n\n\n\n<p>With any luck you should be able to see everything running correctly.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"170\" src=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-4.png?resize=640%2C170&#038;ssl=1\" alt=\" class=\"wp-image-701\" srcset=\"https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-4.png?w=749 749w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-4.png?resize=300%2C80 300w, https:\/\/i2.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-4.png?resize=720%2C191 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Now the only thing left to do is configure your ingress controller to allow access to selenium-router. I&#8217;m using an nginx ingress controller so I applied the following config using kubectl, you could also do with with an Azure DevOps pipeline as seen <a href=\"https:\/\/tomaustin.xyz\/2020\/03\/29\/updating-an-aks-nginx-ingress-controller-using-azure-devops-pipelines\/\">here<\/a> &#8211; I&#8217;d recommend you do it this way if running in prod.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>apiVersion: extensions\/v1beta1\nkind: Ingress\nmetadata:\n  name: ingress\n  namespace: ingress-basic\n  annotations:\n    kubernetes.io\/ingress.class: nginx\n    nginx.ingress.kubernetes.io\/use-regex: \"true\"\n    nginx.ingress.kubernetes.io\/rewrite-target: \/$2\nspec:\n  rules:\n  - host: youraksinstancehostnamegoeshere\n    http:\n      paths:\n      - path: \/grid(\/|$)(.*)\n        backend:\n          serviceName: selenium-router\n          servicePort: 4444\n      - path: \/\n        backend:\n          serviceName: helloworld\n          servicePort: 80<\/code><\/pre>\n\n\n\n<p>There are a few things to note in the config. Firstly make sure to update the host to match the hostname of your AKS instance. Also I already had a service running in my AKS instance that had a rule so I needed to add another for Selenium Grid, I used an <a href=\"https:\/\/kubernetes.github.io\/ingress-nginx\/examples\/rewrite\/\">ingress rule rewrite annotation<\/a> in the path which you may also need to do if you have other services on your AKS instance. <\/p>\n\n\n\n<p>Once you&#8217;ve applied that configuration you can use <a href=\"https:\/\/www.postman.com\/product\/api-client\/\">Postman<\/a> to check everything is running correctly. Simply do an HTTP GET request to the hostname of your AKS instance followed by \/grid\/status. You should get a response with &#8216;ready: true&#8217; and info about your nodes. You should be able to start running tests on Grid. Something to note is that the url for running tests has changed between Grid 3 and Grid 4: the Grid 3 used to be hostname\/wd\/hub whereas now you don&#8217;t need the \/wd\/hub portion.<\/p>\n\n\n\n<p>That concludes this tutorial and you should now have Grid 4 deployed to AKS using an Azure DevOps pipeline. If you have any issues or queries please leave a comment or contact me on <a href=\"https:\/\/twitter.com\/tomaustin700\">Twitter<\/a>. Thanks<\/p>\n","feature_image":"/content/images/wordpress\/2021\/01\/image-4.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 13 Jan 2021 18:00:00 +0000","created_by":1,"updated_at":"Fri, 15 Jan 2021 13:15:17 +0000","updated_by":1,"published_at":"Wed, 13 Jan 2021 18:00:00 +0000","published_by":1},{"id":714,"title":"Using HAProxy as a Kubernetes Ingress Controller","slug":"using-haproxy-as-a-kubernetes-ingress-controller","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\\n<p>Whenever I&#8217;ve needed a Kubernetes Ingress controller in the past I&#8217;ve always used Nginx, not because it&#8217;s better than everything else but just because I was familiar with it. Outside of Kubernetes I&#8217;ve always used <a href=\\\"http:\/\/www.haproxy.org\/\\\">HAProxy<\/a> as my reverse-proxy of choice and been very happy with it, it&#8217;s always performed well and been easy to configure. Recently HAProxy released <a href=\\\"https:\/\/www.haproxy.com\/blog\/announcing-haproxy-kubernetes-ingress-controller-1-5\/\\\">v1.5 of their Ingress controller<\/a> so I thought it was time to try HAProxy instead of Nginx.<\/p>\\n\\n\\n\\n<p>In this article I&#8217;m going to show the steps to get the HAProxy Ingress running within Kubernetes and configure it to allow access. I&#8217;m going to be using <a href=\\\"https:\/\/azure.microsoft.com\/en-gb\/services\/kubernetes-service\/\\\">Azure Kubernetes Service<\/a> but these steps should work for any Kubernetes setup. <\/p>\\n\\n\\n\\n<p>I&#8217;ve already got Kubernetes setup (Azure makes this easy) however if you don&#8217;t you can quickly get a running instance by running the <a href=\\\"https:\/\/github.com\/tomaustin700\/AKS-Nginx-Deploy-Script\/blob\/master\/AKSDeploy.ps1\\\">following script<\/a> (make sure to remove the installation of Nginx and it&#8217;s configuration as that&#8217;s not needed). We&#8217;re going to be using <a href=\\\"https:\/\/helm.sh\/\\\">Helm<\/a> for HAProxy deployment as it makes it really quick and easy to get it running with minimal configuration required, I&#8217;m going to presume you have Helm already setup but if not you can follow the steps <a href=\\\"https:\/\/helm.sh\/docs\/intro\/install\/\\\">here<\/a>. You will also need Kubectl installed and configured.<\/p>\\n\\n\\n\\n<p>Let&#8217;s start by adding the HAProxy Helm repository by running the following Powershell:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>helm repo add haproxytech https:\/\/haproxytech.github.io\/helm-charts<\/code><\/pre>\\n\\n\\n\\n<p>We can then update the Helm chats<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>helm repo update<\/code><\/pre>\\n\\n\\n\\n<p>Now we can use Helm to install the HAProxy Ingress Controller. Make sure you update $publicIP with an actual public IP address.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>helm install kubernetes-ingress haproxytech\/kubernetes-ingress --set controller.service.type=LoadBalancer --set controller.service.loadBalancerIP=\\\"$publicIP\\\"<\/code><\/pre>\\n\\n\\n\\n<p>We can check the deployment was successful by running the following kubectl command:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl get deployments<\/code><\/pre>\\n\\n\\n\\n<p>and we should see the following:<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image size-large\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"59\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-5.png?resize=640%2C59&#038;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-715\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-5.png?w=681 681w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-5.png?resize=300%2C28 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>We can also check the public IP address was set correctly by getting the services and checking the external IP.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl get services<\/code><\/pre>\\n\\n\\n\\n<figure class=\\\"wp-block-image size-large\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"70\\\" src=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-7.png?resize=640%2C70&#038;ssl=1\\\" alt=\\\"\\\" class=\\\"wp-image-717\\\" srcset=\\\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-7.png?w=719 719w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-7.png?resize=300%2C33 300w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>That all looks good to me!<\/p>\\n\\n\\n\\n<p>Now that the HAProxy Ingress Controller is running we can create another deployment before configuring HAProxy to route traffic to it. In this example I&#8217;m just going to deploy my basic Helloworld image that I normally use for tutorials<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl create deployment helloworld --image tomaustin\/helloworldnetcore<\/code><\/pre>\\n\\n\\n\\n<p>Once created expose the deployment:<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl expose deployment helloworld --name helloworld --port 80<\/code><\/pre>\\n\\n\\n\\n<p>We can now just configure the Ingress Controller using Kubectl and that should be pretty much it. Save the following to a file and apply it using Kubectl, make sure to update &#8216;yourdnsnamegoeshere&#8217; with your dns address.<\/p>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>apiVersion: networking.k8s.io\/v1beta1\\nkind: Ingress\\nmetadata:\\n  name: ingress\\n  namespace: default\\n  annotations:\\n    haproxy.org\/check: \\\"true\\\"\\nspec:\\n  rules:\\n  - host: yourdnsnamegoeshere\\n    http:\\n      paths:\\n      - path: \/\\n        backend:\\n          serviceName: helloworld\\n          servicePort: 80<\/code><\/pre>\\n\\n\\n\\n<pre class=\\\"wp-block-code\\\"><code>kubectl apply -f ingress.yml<\/code><\/pre>\\n\\n\\n\\n<p>That should be it! If all went to plan you should be able to navigate to your dns address and see your service<\/p>\\n\\n\\n\\n<figure class=\\\"wp-block-image size-large\\\"><img loading=\\\"lazy\\\" width=\\\"640\\\" height=\\\"214\\\" src=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=640%2C214\\\" alt=\\\"\\\" class=\\\"wp-image-566\\\" srcset=\\\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?w=845 845w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=300%2C100 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=768%2C257 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=720%2C241 720w\\\" sizes=\\\"(max-width: 640px) 100vw, 640px\\\" data-recalc-dims=\\\"1\\\" \/><\/figure>\\n\\n\\n\\n<p>The HAProxy Ingress Controller can do a fair bit so make sure to check out the documentation <a href=\\\"https:\/\/www.haproxy.com\/documentation\/kubernetes\/latest\/configuration\/ingress\/\\\">here<\/a>. If you encountered any issues then don&#8217;t hesitate to get in touch by either leaving a comment or contacting me on <a href=\\\"https:\/\/twitter.com\/tomaustin700\\\">Twitter<\/a>. Thanks!<\/p>\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"\n<p>Whenever I&#8217;ve needed a Kubernetes Ingress controller in the past I&#8217;ve always used Nginx, not because it&#8217;s better than everything else but just because I was familiar with it. Outside of Kubernetes I&#8217;ve always used <a href=\"http:\/\/www.haproxy.org\/\">HAProxy<\/a> as my reverse-proxy of choice and been very happy with it, it&#8217;s always performed well and been easy to configure. Recently HAProxy released <a href=\"https:\/\/www.haproxy.com\/blog\/announcing-haproxy-kubernetes-ingress-controller-1-5\/\">v1.5 of their Ingress controller<\/a> so I thought it was time to try HAProxy instead of Nginx.<\/p>\n\n\n\n<p>In this article I&#8217;m going to show the steps to get the HAProxy Ingress running within Kubernetes and configure it to allow access. I&#8217;m going to be using <a href=\"https:\/\/azure.microsoft.com\/en-gb\/services\/kubernetes-service\/\">Azure Kubernetes Service<\/a> but these steps should work for any Kubernetes setup. <\/p>\n\n\n\n<p>I&#8217;ve already got Kubernetes setup (Azure makes this easy) however if you don&#8217;t you can quickly get a running instance by running the <a href=\"https:\/\/github.com\/tomaustin700\/AKS-Nginx-Deploy-Script\/blob\/master\/AKSDeploy.ps1\">following script<\/a> (make sure to remove the installation of Nginx and it&#8217;s configuration as that&#8217;s not needed). We&#8217;re going to be using <a href=\"https:\/\/helm.sh\/\">Helm<\/a> for HAProxy deployment as it makes it really quick and easy to get it running with minimal configuration required, I&#8217;m going to presume you have Helm already setup but if not you can follow the steps <a href=\"https:\/\/helm.sh\/docs\/intro\/install\/\">here<\/a>. You will also need Kubectl installed and configured.<\/p>\n\n\n\n<p>Let&#8217;s start by adding the HAProxy Helm repository by running the following Powershell:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>helm repo add haproxytech https:\/\/haproxytech.github.io\/helm-charts<\/code><\/pre>\n\n\n\n<p>We can then update the Helm chats<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>helm repo update<\/code><\/pre>\n\n\n\n<p>Now we can use Helm to install the HAProxy Ingress Controller. Make sure you update $publicIP with an actual public IP address.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>helm install kubernetes-ingress haproxytech\/kubernetes-ingress --set controller.service.type=LoadBalancer --set controller.service.loadBalancerIP=\"$publicIP\"<\/code><\/pre>\n\n\n\n<p>We can check the deployment was successful by running the following kubectl command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl get deployments<\/code><\/pre>\n\n\n\n<p>and we should see the following:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"59\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-5.png?resize=640%2C59&#038;ssl=1\" alt=\" class=\"wp-image-715\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-5.png?w=681 681w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-5.png?resize=300%2C28 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>We can also check the public IP address was set correctly by getting the services and checking the external IP.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl get services<\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"70\" src=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-7.png?resize=640%2C70&#038;ssl=1\" alt=\" class=\"wp-image-717\" srcset=\"https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-7.png?w=719 719w, https:\/\/i0.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2021\/01\/image-7.png?resize=300%2C33 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>That all looks good to me!<\/p>\n\n\n\n<p>Now that the HAProxy Ingress Controller is running we can create another deployment before configuring HAProxy to route traffic to it. In this example I&#8217;m just going to deploy my basic Helloworld image that I normally use for tutorials<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl create deployment helloworld --image tomaustin\/helloworldnetcore<\/code><\/pre>\n\n\n\n<p>Once created expose the deployment:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl expose deployment helloworld --name helloworld --port 80<\/code><\/pre>\n\n\n\n<p>We can now just configure the Ingress Controller using Kubectl and that should be pretty much it. Save the following to a file and apply it using Kubectl, make sure to update &#8216;yourdnsnamegoeshere&#8217; with your dns address.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>apiVersion: networking.k8s.io\/v1beta1\nkind: Ingress\nmetadata:\n  name: ingress\n  namespace: default\n  annotations:\n    haproxy.org\/check: \"true\"\nspec:\n  rules:\n  - host: yourdnsnamegoeshere\n    http:\n      paths:\n      - path: \/\n        backend:\n          serviceName: helloworld\n          servicePort: 80<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>kubectl apply -f ingress.yml<\/code><\/pre>\n\n\n\n<p>That should be it! If all went to plan you should be able to navigate to your dns address and see your service<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"640\" height=\"214\" src=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=640%2C214\" alt=\" class=\"wp-image-566\" srcset=\"https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?w=845 845w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=300%2C100 300w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=768%2C257 768w, https:\/\/i1.wp.com\/tomaustin.xyz\/wp-content\/uploads\/2020\/03\/image.png?resize=720%2C241 720w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>The HAProxy Ingress Controller can do a fair bit so make sure to check out the documentation <a href=\"https:\/\/www.haproxy.com\/documentation\/kubernetes\/latest\/configuration\/ingress\/\">here<\/a>. If you encountered any issues then don&#8217;t hesitate to get in touch by either leaving a comment or contacting me on <a href=\"https:\/\/twitter.com\/tomaustin700\">Twitter<\/a>. Thanks!<\/p>\n","feature_image":"/content/images/wordpress\/2021\/01\/haproxy_logo-2.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 24 Jan 2021 16:38:51 +0000","created_by":1,"updated_at":"Sun, 24 Jan 2021 16:39:56 +0000","updated_by":1,"published_at":"Sun, 24 Jan 2021 16:38:51 +0000","published_by":1},{"id":721,"title":"Setting up Apache Ambari","slug":"temp-slug-43","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"","feature_image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 24 Jan 2021 16:46:42 +0000","created_by":1,"updated_at":"Sun, 24 Jan 2021 16:46:42 +0000","updated_by":1,"published_at":"","published_by":1}],"tags":[{"id":12,"name":"17.10","slug":"17-10","description":""},{"id":53,"name":"agents","slug":"agents","description":""},{"id":33,"name":"aks","slug":"aks","description":""},{"id":44,"name":"aks ingress tutorial","slug":"aks-ingress-tutorial","description":""},{"id":19,"name":"api","slug":"api","description":""},{"id":21,"name":"asp.net","slug":"asp-net","description":""},{"id":36,"name":"azure devops","slug":"azure-devops","description":""},{"id":35,"name":"azure kubernetes service","slug":"azure-kubernetes-service","description":""},{"id":20,"name":"binance","slug":"binance","description":""},{"id":29,"name":"bosun","slug":"bosun","description":""},{"id":43,"name":"ci cd","slug":"ci-cd","description":""},{"id":54,"name":"clean","slug":"clean","description":""},{"id":22,"name":"cryptocurrency","slug":"cryptocurrency","description":""},{"id":58,"name":"haproxy","slug":"haproxy","description":""},{"id":51,"name":"hbase","slug":"hbase","description":""},{"id":37,"name":"helm","slug":"helm","description":""},{"id":6,"name":"https","slug":"https","description":""},{"id":39,"name":"ingress","slug":"ingress","description":""},{"id":50,"name":"kubernetes","slug":"kubernetes","description":""},{"id":8,"name":"lemp","slug":"lemp","description":""},{"id":7,"name":"letsencrypt","slug":"letsencrypt","description":""},{"id":55,"name":"maintenance jobs","slug":"maintenance-jobs","description":""},{"id":4,"name":"multiple sites","slug":"multiple-sites","description":""},{"id":10,"name":"mysql","slug":"mysql","description":""},{"id":13,"name":"netplan","slug":"netplan","description":""},{"id":5,"name":"nginx","slug":"nginx","description":""},{"id":9,"name":"php","slug":"php","description":""},{"id":34,"name":"selenium","slug":"selenium","description":""},{"id":38,"name":"selenium grid","slug":"selenium-grid","description":""},{"id":56,"name":"self-hosted","slug":"self-hosted","description":""},{"id":14,"name":"static ip","slug":"static-ip","description":""},{"id":3,"name":"ubuntu","slug":"ubuntu","description":""},{"id":48,"name":"validation","slug":"validation","description":""},{"id":47,"name":"xpath","slug":"xpath","description":""},{"id":46,"name":"xpathvalidator.dev","slug":"xpathvalidator-dev","description":""}],"posts_tags":[{"tag_id":6,"post_id":26},{"tag_id":8,"post_id":26},{"tag_id":7,"post_id":26},{"tag_id":4,"post_id":26},{"tag_id":10,"post_id":26},{"tag_id":5,"post_id":26},{"tag_id":9,"post_id":26},{"tag_id":3,"post_id":26},{"tag_id":12,"post_id":56},{"tag_id":13,"post_id":56},{"tag_id":14,"post_id":56},{"tag_id":3,"post_id":56},{"tag_id":19,"post_id":66},{"tag_id":21,"post_id":66},{"tag_id":20,"post_id":66},{"tag_id":22,"post_id":66},{"tag_id":29,"post_id":296},{"tag_id":3,"post_id":296},{"tag_id":19,"post_id":427},{"tag_id":35,"post_id":427},{"tag_id":33,"post_id":516},{"tag_id":36,"post_id":516},{"tag_id":35,"post_id":516},{"tag_id":37,"post_id":516},{"tag_id":34,"post_id":516},{"tag_id":38,"post_id":516},{"tag_id":33,"post_id":554},{"tag_id":44,"post_id":554},{"tag_id":35,"post_id":554},{"tag_id":39,"post_id":554},{"tag_id":5,"post_id":554},{"tag_id":44,"post_id":573},{"tag_id":36,"post_id":573},{"tag_id":35,"post_id":573},{"tag_id":43,"post_id":573},{"tag_id":39,"post_id":573},{"tag_id":5,"post_id":573},{"tag_id":48,"post_id":613},{"tag_id":47,"post_id":613},{"tag_id":46,"post_id":613},{"tag_id":33,"post_id":627},{"tag_id":35,"post_id":627},{"tag_id":37,"post_id":627},{"tag_id":50,"post_id":627},{"tag_id":51,"post_id":644},{"tag_id":3,"post_id":644},{"tag_id":53,"post_id":682},{"tag_id":36,"post_id":682},{"tag_id":54,"post_id":682},{"tag_id":55,"post_id":682},{"tag_id":56,"post_id":682},{"tag_id":36,"post_id":694},{"tag_id":35,"post_id":694},{"tag_id":50,"post_id":694},{"tag_id":34,"post_id":694},{"tag_id":38,"post_id":694},{"tag_id":35,"post_id":714},{"tag_id":58,"post_id":714},{"tag_id":39,"post_id":714},{"tag_id":50,"post_id":714}],"users":[{"id":1,"slug":"tom","bio":"","website":"","created_at":"Sun, 31 Dec 2017 15:45:35 +0000","created_by":1,"email":"tom@3.8.252.104","name":"tom","profile_image":"https:\/\/secure.gravatar.com\/avatar\/3e14a718bc1537548d5ceb53857f2183?s=512&d=mm&r=g"}]},"meta":{"exported_on":"Wed, 27 Jan 2021 13:30:00 +0000","version":"2.31.0"}}